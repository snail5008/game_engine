#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
// #![allow(unused_variables)]
/* automatically generated by rust-bindgen 0.65.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 37;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const KHRONOS_SUPPORT_INT64: u32 = 1;
pub const KHRONOS_SUPPORT_FLOAT: u32 = 1;
pub const KHRONOS_MAX_ENUM: u32 = 2147483647;
pub const GL_DEPTH_BUFFER_BIT: u32 = 256;
pub const GL_STENCIL_BUFFER_BIT: u32 = 1024;
pub const GL_COLOR_BUFFER_BIT: u32 = 16384;
pub const GL_FALSE: u32 = 0;
pub const GL_TRUE: u32 = 1;
pub const GL_POINTS: u32 = 0;
pub const GL_LINES: u32 = 1;
pub const GL_LINE_LOOP: u32 = 2;
pub const GL_LINE_STRIP: u32 = 3;
pub const GL_TRIANGLES: u32 = 4;
pub const GL_TRIANGLE_STRIP: u32 = 5;
pub const GL_TRIANGLE_FAN: u32 = 6;
pub const GL_NEVER: u32 = 512;
pub const GL_LESS: u32 = 513;
pub const GL_EQUAL: u32 = 514;
pub const GL_LEQUAL: u32 = 515;
pub const GL_GREATER: u32 = 516;
pub const GL_NOTEQUAL: u32 = 517;
pub const GL_GEQUAL: u32 = 518;
pub const GL_ALWAYS: u32 = 519;
pub const GL_ZERO: u32 = 0;
pub const GL_ONE: u32 = 1;
pub const GL_SRC_COLOR: u32 = 768;
pub const GL_ONE_MINUS_SRC_COLOR: u32 = 769;
pub const GL_SRC_ALPHA: u32 = 770;
pub const GL_ONE_MINUS_SRC_ALPHA: u32 = 771;
pub const GL_DST_ALPHA: u32 = 772;
pub const GL_ONE_MINUS_DST_ALPHA: u32 = 773;
pub const GL_DST_COLOR: u32 = 774;
pub const GL_ONE_MINUS_DST_COLOR: u32 = 775;
pub const GL_SRC_ALPHA_SATURATE: u32 = 776;
pub const GL_NONE: u32 = 0;
pub const GL_FRONT_LEFT: u32 = 1024;
pub const GL_FRONT_RIGHT: u32 = 1025;
pub const GL_BACK_LEFT: u32 = 1026;
pub const GL_BACK_RIGHT: u32 = 1027;
pub const GL_FRONT: u32 = 1028;
pub const GL_BACK: u32 = 1029;
pub const GL_LEFT: u32 = 1030;
pub const GL_RIGHT: u32 = 1031;
pub const GL_FRONT_AND_BACK: u32 = 1032;
pub const GL_NO_ERROR: u32 = 0;
pub const GL_INVALID_ENUM: u32 = 1280;
pub const GL_INVALID_VALUE: u32 = 1281;
pub const GL_INVALID_OPERATION: u32 = 1282;
pub const GL_OUT_OF_MEMORY: u32 = 1285;
pub const GL_CW: u32 = 2304;
pub const GL_CCW: u32 = 2305;
pub const GL_POINT_SIZE: u32 = 2833;
pub const GL_POINT_SIZE_RANGE: u32 = 2834;
pub const GL_POINT_SIZE_GRANULARITY: u32 = 2835;
pub const GL_LINE_SMOOTH: u32 = 2848;
pub const GL_LINE_WIDTH: u32 = 2849;
pub const GL_LINE_WIDTH_RANGE: u32 = 2850;
pub const GL_LINE_WIDTH_GRANULARITY: u32 = 2851;
pub const GL_POLYGON_MODE: u32 = 2880;
pub const GL_POLYGON_SMOOTH: u32 = 2881;
pub const GL_CULL_FACE: u32 = 2884;
pub const GL_CULL_FACE_MODE: u32 = 2885;
pub const GL_FRONT_FACE: u32 = 2886;
pub const GL_DEPTH_RANGE: u32 = 2928;
pub const GL_DEPTH_TEST: u32 = 2929;
pub const GL_DEPTH_WRITEMASK: u32 = 2930;
pub const GL_DEPTH_CLEAR_VALUE: u32 = 2931;
pub const GL_DEPTH_FUNC: u32 = 2932;
pub const GL_STENCIL_TEST: u32 = 2960;
pub const GL_STENCIL_CLEAR_VALUE: u32 = 2961;
pub const GL_STENCIL_FUNC: u32 = 2962;
pub const GL_STENCIL_VALUE_MASK: u32 = 2963;
pub const GL_STENCIL_FAIL: u32 = 2964;
pub const GL_STENCIL_PASS_DEPTH_FAIL: u32 = 2965;
pub const GL_STENCIL_PASS_DEPTH_PASS: u32 = 2966;
pub const GL_STENCIL_REF: u32 = 2967;
pub const GL_STENCIL_WRITEMASK: u32 = 2968;
pub const GL_VIEWPORT: u32 = 2978;
pub const GL_DITHER: u32 = 3024;
pub const GL_BLEND_DST: u32 = 3040;
pub const GL_BLEND_SRC: u32 = 3041;
pub const GL_BLEND: u32 = 3042;
pub const GL_LOGIC_OP_MODE: u32 = 3056;
pub const GL_DRAW_BUFFER: u32 = 3073;
pub const GL_READ_BUFFER: u32 = 3074;
pub const GL_SCISSOR_BOX: u32 = 3088;
pub const GL_SCISSOR_TEST: u32 = 3089;
pub const GL_COLOR_CLEAR_VALUE: u32 = 3106;
pub const GL_COLOR_WRITEMASK: u32 = 3107;
pub const GL_DOUBLEBUFFER: u32 = 3122;
pub const GL_STEREO: u32 = 3123;
pub const GL_LINE_SMOOTH_HINT: u32 = 3154;
pub const GL_POLYGON_SMOOTH_HINT: u32 = 3155;
pub const GL_UNPACK_SWAP_BYTES: u32 = 3312;
pub const GL_UNPACK_LSB_FIRST: u32 = 3313;
pub const GL_UNPACK_ROW_LENGTH: u32 = 3314;
pub const GL_UNPACK_SKIP_ROWS: u32 = 3315;
pub const GL_UNPACK_SKIP_PIXELS: u32 = 3316;
pub const GL_UNPACK_ALIGNMENT: u32 = 3317;
pub const GL_PACK_SWAP_BYTES: u32 = 3328;
pub const GL_PACK_LSB_FIRST: u32 = 3329;
pub const GL_PACK_ROW_LENGTH: u32 = 3330;
pub const GL_PACK_SKIP_ROWS: u32 = 3331;
pub const GL_PACK_SKIP_PIXELS: u32 = 3332;
pub const GL_PACK_ALIGNMENT: u32 = 3333;
pub const GL_MAX_TEXTURE_SIZE: u32 = 3379;
pub const GL_MAX_VIEWPORT_DIMS: u32 = 3386;
pub const GL_SUBPIXEL_BITS: u32 = 3408;
pub const GL_TEXTURE_1D: u32 = 3552;
pub const GL_TEXTURE_2D: u32 = 3553;
pub const GL_TEXTURE_WIDTH: u32 = 4096;
pub const GL_TEXTURE_HEIGHT: u32 = 4097;
pub const GL_TEXTURE_BORDER_COLOR: u32 = 4100;
pub const GL_DONT_CARE: u32 = 4352;
pub const GL_FASTEST: u32 = 4353;
pub const GL_NICEST: u32 = 4354;
pub const GL_BYTE: u32 = 5120;
pub const GL_UNSIGNED_BYTE: u32 = 5121;
pub const GL_SHORT: u32 = 5122;
pub const GL_UNSIGNED_SHORT: u32 = 5123;
pub const GL_INT: u32 = 5124;
pub const GL_UNSIGNED_INT: u32 = 5125;
pub const GL_FLOAT: u32 = 5126;
pub const GL_CLEAR: u32 = 5376;
pub const GL_AND: u32 = 5377;
pub const GL_AND_REVERSE: u32 = 5378;
pub const GL_COPY: u32 = 5379;
pub const GL_AND_INVERTED: u32 = 5380;
pub const GL_NOOP: u32 = 5381;
pub const GL_XOR: u32 = 5382;
pub const GL_OR: u32 = 5383;
pub const GL_NOR: u32 = 5384;
pub const GL_EQUIV: u32 = 5385;
pub const GL_INVERT: u32 = 5386;
pub const GL_OR_REVERSE: u32 = 5387;
pub const GL_COPY_INVERTED: u32 = 5388;
pub const GL_OR_INVERTED: u32 = 5389;
pub const GL_NAND: u32 = 5390;
pub const GL_SET: u32 = 5391;
pub const GL_TEXTURE: u32 = 5890;
pub const GL_COLOR: u32 = 6144;
pub const GL_DEPTH: u32 = 6145;
pub const GL_STENCIL: u32 = 6146;
pub const GL_STENCIL_INDEX: u32 = 6401;
pub const GL_DEPTH_COMPONENT: u32 = 6402;
pub const GL_RED: u32 = 6403;
pub const GL_GREEN: u32 = 6404;
pub const GL_BLUE: u32 = 6405;
pub const GL_ALPHA: u32 = 6406;
pub const GL_RGB: u32 = 6407;
pub const GL_RGBA: u32 = 6408;
pub const GL_POINT: u32 = 6912;
pub const GL_LINE: u32 = 6913;
pub const GL_FILL: u32 = 6914;
pub const GL_KEEP: u32 = 7680;
pub const GL_REPLACE: u32 = 7681;
pub const GL_INCR: u32 = 7682;
pub const GL_DECR: u32 = 7683;
pub const GL_VENDOR: u32 = 7936;
pub const GL_RENDERER: u32 = 7937;
pub const GL_VERSION: u32 = 7938;
pub const GL_EXTENSIONS: u32 = 7939;
pub const GL_NEAREST: u32 = 9728;
pub const GL_LINEAR: u32 = 9729;
pub const GL_NEAREST_MIPMAP_NEAREST: u32 = 9984;
pub const GL_LINEAR_MIPMAP_NEAREST: u32 = 9985;
pub const GL_NEAREST_MIPMAP_LINEAR: u32 = 9986;
pub const GL_LINEAR_MIPMAP_LINEAR: u32 = 9987;
pub const GL_TEXTURE_MAG_FILTER: u32 = 10240;
pub const GL_TEXTURE_MIN_FILTER: u32 = 10241;
pub const GL_TEXTURE_WRAP_S: u32 = 10242;
pub const GL_TEXTURE_WRAP_T: u32 = 10243;
pub const GL_REPEAT: u32 = 10497;
pub const GL_COLOR_LOGIC_OP: u32 = 3058;
pub const GL_POLYGON_OFFSET_UNITS: u32 = 10752;
pub const GL_POLYGON_OFFSET_POINT: u32 = 10753;
pub const GL_POLYGON_OFFSET_LINE: u32 = 10754;
pub const GL_POLYGON_OFFSET_FILL: u32 = 32823;
pub const GL_POLYGON_OFFSET_FACTOR: u32 = 32824;
pub const GL_TEXTURE_BINDING_1D: u32 = 32872;
pub const GL_TEXTURE_BINDING_2D: u32 = 32873;
pub const GL_TEXTURE_INTERNAL_FORMAT: u32 = 4099;
pub const GL_TEXTURE_RED_SIZE: u32 = 32860;
pub const GL_TEXTURE_GREEN_SIZE: u32 = 32861;
pub const GL_TEXTURE_BLUE_SIZE: u32 = 32862;
pub const GL_TEXTURE_ALPHA_SIZE: u32 = 32863;
pub const GL_DOUBLE: u32 = 5130;
pub const GL_PROXY_TEXTURE_1D: u32 = 32867;
pub const GL_PROXY_TEXTURE_2D: u32 = 32868;
pub const GL_R3_G3_B2: u32 = 10768;
pub const GL_RGB4: u32 = 32847;
pub const GL_RGB5: u32 = 32848;
pub const GL_RGB8: u32 = 32849;
pub const GL_RGB10: u32 = 32850;
pub const GL_RGB12: u32 = 32851;
pub const GL_RGB16: u32 = 32852;
pub const GL_RGBA2: u32 = 32853;
pub const GL_RGBA4: u32 = 32854;
pub const GL_RGB5_A1: u32 = 32855;
pub const GL_RGBA8: u32 = 32856;
pub const GL_RGB10_A2: u32 = 32857;
pub const GL_RGBA12: u32 = 32858;
pub const GL_RGBA16: u32 = 32859;
pub const GL_UNSIGNED_BYTE_3_3_2: u32 = 32818;
pub const GL_UNSIGNED_SHORT_4_4_4_4: u32 = 32819;
pub const GL_UNSIGNED_SHORT_5_5_5_1: u32 = 32820;
pub const GL_UNSIGNED_INT_8_8_8_8: u32 = 32821;
pub const GL_UNSIGNED_INT_10_10_10_2: u32 = 32822;
pub const GL_TEXTURE_BINDING_3D: u32 = 32874;
pub const GL_PACK_SKIP_IMAGES: u32 = 32875;
pub const GL_PACK_IMAGE_HEIGHT: u32 = 32876;
pub const GL_UNPACK_SKIP_IMAGES: u32 = 32877;
pub const GL_UNPACK_IMAGE_HEIGHT: u32 = 32878;
pub const GL_TEXTURE_3D: u32 = 32879;
pub const GL_PROXY_TEXTURE_3D: u32 = 32880;
pub const GL_TEXTURE_DEPTH: u32 = 32881;
pub const GL_TEXTURE_WRAP_R: u32 = 32882;
pub const GL_MAX_3D_TEXTURE_SIZE: u32 = 32883;
pub const GL_UNSIGNED_BYTE_2_3_3_REV: u32 = 33634;
pub const GL_UNSIGNED_SHORT_5_6_5: u32 = 33635;
pub const GL_UNSIGNED_SHORT_5_6_5_REV: u32 = 33636;
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV: u32 = 33637;
pub const GL_UNSIGNED_SHORT_1_5_5_5_REV: u32 = 33638;
pub const GL_UNSIGNED_INT_8_8_8_8_REV: u32 = 33639;
pub const GL_UNSIGNED_INT_2_10_10_10_REV: u32 = 33640;
pub const GL_BGR: u32 = 32992;
pub const GL_BGRA: u32 = 32993;
pub const GL_MAX_ELEMENTS_VERTICES: u32 = 33000;
pub const GL_MAX_ELEMENTS_INDICES: u32 = 33001;
pub const GL_CLAMP_TO_EDGE: u32 = 33071;
pub const GL_TEXTURE_MIN_LOD: u32 = 33082;
pub const GL_TEXTURE_MAX_LOD: u32 = 33083;
pub const GL_TEXTURE_BASE_LEVEL: u32 = 33084;
pub const GL_TEXTURE_MAX_LEVEL: u32 = 33085;
pub const GL_SMOOTH_POINT_SIZE_RANGE: u32 = 2834;
pub const GL_SMOOTH_POINT_SIZE_GRANULARITY: u32 = 2835;
pub const GL_SMOOTH_LINE_WIDTH_RANGE: u32 = 2850;
pub const GL_SMOOTH_LINE_WIDTH_GRANULARITY: u32 = 2851;
pub const GL_ALIASED_LINE_WIDTH_RANGE: u32 = 33902;
pub const GL_TEXTURE0: u32 = 33984;
pub const GL_TEXTURE1: u32 = 33985;
pub const GL_TEXTURE2: u32 = 33986;
pub const GL_TEXTURE3: u32 = 33987;
pub const GL_TEXTURE4: u32 = 33988;
pub const GL_TEXTURE5: u32 = 33989;
pub const GL_TEXTURE6: u32 = 33990;
pub const GL_TEXTURE7: u32 = 33991;
pub const GL_TEXTURE8: u32 = 33992;
pub const GL_TEXTURE9: u32 = 33993;
pub const GL_TEXTURE10: u32 = 33994;
pub const GL_TEXTURE11: u32 = 33995;
pub const GL_TEXTURE12: u32 = 33996;
pub const GL_TEXTURE13: u32 = 33997;
pub const GL_TEXTURE14: u32 = 33998;
pub const GL_TEXTURE15: u32 = 33999;
pub const GL_TEXTURE16: u32 = 34000;
pub const GL_TEXTURE17: u32 = 34001;
pub const GL_TEXTURE18: u32 = 34002;
pub const GL_TEXTURE19: u32 = 34003;
pub const GL_TEXTURE20: u32 = 34004;
pub const GL_TEXTURE21: u32 = 34005;
pub const GL_TEXTURE22: u32 = 34006;
pub const GL_TEXTURE23: u32 = 34007;
pub const GL_TEXTURE24: u32 = 34008;
pub const GL_TEXTURE25: u32 = 34009;
pub const GL_TEXTURE26: u32 = 34010;
pub const GL_TEXTURE27: u32 = 34011;
pub const GL_TEXTURE28: u32 = 34012;
pub const GL_TEXTURE29: u32 = 34013;
pub const GL_TEXTURE30: u32 = 34014;
pub const GL_TEXTURE31: u32 = 34015;
pub const GL_ACTIVE_TEXTURE: u32 = 34016;
pub const GL_MULTISAMPLE: u32 = 32925;
pub const GL_SAMPLE_ALPHA_TO_COVERAGE: u32 = 32926;
pub const GL_SAMPLE_ALPHA_TO_ONE: u32 = 32927;
pub const GL_SAMPLE_COVERAGE: u32 = 32928;
pub const GL_SAMPLE_BUFFERS: u32 = 32936;
pub const GL_SAMPLES: u32 = 32937;
pub const GL_SAMPLE_COVERAGE_VALUE: u32 = 32938;
pub const GL_SAMPLE_COVERAGE_INVERT: u32 = 32939;
pub const GL_TEXTURE_CUBE_MAP: u32 = 34067;
pub const GL_TEXTURE_BINDING_CUBE_MAP: u32 = 34068;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X: u32 = 34069;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X: u32 = 34070;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y: u32 = 34071;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y: u32 = 34072;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z: u32 = 34073;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z: u32 = 34074;
pub const GL_PROXY_TEXTURE_CUBE_MAP: u32 = 34075;
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE: u32 = 34076;
pub const GL_COMPRESSED_RGB: u32 = 34029;
pub const GL_COMPRESSED_RGBA: u32 = 34030;
pub const GL_TEXTURE_COMPRESSION_HINT: u32 = 34031;
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE: u32 = 34464;
pub const GL_TEXTURE_COMPRESSED: u32 = 34465;
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS: u32 = 34466;
pub const GL_COMPRESSED_TEXTURE_FORMATS: u32 = 34467;
pub const GL_CLAMP_TO_BORDER: u32 = 33069;
pub const GL_BLEND_DST_RGB: u32 = 32968;
pub const GL_BLEND_SRC_RGB: u32 = 32969;
pub const GL_BLEND_DST_ALPHA: u32 = 32970;
pub const GL_BLEND_SRC_ALPHA: u32 = 32971;
pub const GL_POINT_FADE_THRESHOLD_SIZE: u32 = 33064;
pub const GL_DEPTH_COMPONENT16: u32 = 33189;
pub const GL_DEPTH_COMPONENT24: u32 = 33190;
pub const GL_DEPTH_COMPONENT32: u32 = 33191;
pub const GL_MIRRORED_REPEAT: u32 = 33648;
pub const GL_MAX_TEXTURE_LOD_BIAS: u32 = 34045;
pub const GL_TEXTURE_LOD_BIAS: u32 = 34049;
pub const GL_INCR_WRAP: u32 = 34055;
pub const GL_DECR_WRAP: u32 = 34056;
pub const GL_TEXTURE_DEPTH_SIZE: u32 = 34890;
pub const GL_TEXTURE_COMPARE_MODE: u32 = 34892;
pub const GL_TEXTURE_COMPARE_FUNC: u32 = 34893;
pub const GL_BLEND_COLOR: u32 = 32773;
pub const GL_BLEND_EQUATION: u32 = 32777;
pub const GL_CONSTANT_COLOR: u32 = 32769;
pub const GL_ONE_MINUS_CONSTANT_COLOR: u32 = 32770;
pub const GL_CONSTANT_ALPHA: u32 = 32771;
pub const GL_ONE_MINUS_CONSTANT_ALPHA: u32 = 32772;
pub const GL_FUNC_ADD: u32 = 32774;
pub const GL_FUNC_REVERSE_SUBTRACT: u32 = 32779;
pub const GL_FUNC_SUBTRACT: u32 = 32778;
pub const GL_MIN: u32 = 32775;
pub const GL_MAX: u32 = 32776;
pub const GL_BUFFER_SIZE: u32 = 34660;
pub const GL_BUFFER_USAGE: u32 = 34661;
pub const GL_QUERY_COUNTER_BITS: u32 = 34916;
pub const GL_CURRENT_QUERY: u32 = 34917;
pub const GL_QUERY_RESULT: u32 = 34918;
pub const GL_QUERY_RESULT_AVAILABLE: u32 = 34919;
pub const GL_ARRAY_BUFFER: u32 = 34962;
pub const GL_ELEMENT_ARRAY_BUFFER: u32 = 34963;
pub const GL_ARRAY_BUFFER_BINDING: u32 = 34964;
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING: u32 = 34965;
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: u32 = 34975;
pub const GL_READ_ONLY: u32 = 35000;
pub const GL_WRITE_ONLY: u32 = 35001;
pub const GL_READ_WRITE: u32 = 35002;
pub const GL_BUFFER_ACCESS: u32 = 35003;
pub const GL_BUFFER_MAPPED: u32 = 35004;
pub const GL_BUFFER_MAP_POINTER: u32 = 35005;
pub const GL_STREAM_DRAW: u32 = 35040;
pub const GL_STREAM_READ: u32 = 35041;
pub const GL_STREAM_COPY: u32 = 35042;
pub const GL_STATIC_DRAW: u32 = 35044;
pub const GL_STATIC_READ: u32 = 35045;
pub const GL_STATIC_COPY: u32 = 35046;
pub const GL_DYNAMIC_DRAW: u32 = 35048;
pub const GL_DYNAMIC_READ: u32 = 35049;
pub const GL_DYNAMIC_COPY: u32 = 35050;
pub const GL_SAMPLES_PASSED: u32 = 35092;
pub const GL_SRC1_ALPHA: u32 = 34185;
pub const GL_BLEND_EQUATION_RGB: u32 = 32777;
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED: u32 = 34338;
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE: u32 = 34339;
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE: u32 = 34340;
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE: u32 = 34341;
pub const GL_CURRENT_VERTEX_ATTRIB: u32 = 34342;
pub const GL_VERTEX_PROGRAM_POINT_SIZE: u32 = 34370;
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER: u32 = 34373;
pub const GL_STENCIL_BACK_FUNC: u32 = 34816;
pub const GL_STENCIL_BACK_FAIL: u32 = 34817;
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL: u32 = 34818;
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS: u32 = 34819;
pub const GL_MAX_DRAW_BUFFERS: u32 = 34852;
pub const GL_DRAW_BUFFER0: u32 = 34853;
pub const GL_DRAW_BUFFER1: u32 = 34854;
pub const GL_DRAW_BUFFER2: u32 = 34855;
pub const GL_DRAW_BUFFER3: u32 = 34856;
pub const GL_DRAW_BUFFER4: u32 = 34857;
pub const GL_DRAW_BUFFER5: u32 = 34858;
pub const GL_DRAW_BUFFER6: u32 = 34859;
pub const GL_DRAW_BUFFER7: u32 = 34860;
pub const GL_DRAW_BUFFER8: u32 = 34861;
pub const GL_DRAW_BUFFER9: u32 = 34862;
pub const GL_DRAW_BUFFER10: u32 = 34863;
pub const GL_DRAW_BUFFER11: u32 = 34864;
pub const GL_DRAW_BUFFER12: u32 = 34865;
pub const GL_DRAW_BUFFER13: u32 = 34866;
pub const GL_DRAW_BUFFER14: u32 = 34867;
pub const GL_DRAW_BUFFER15: u32 = 34868;
pub const GL_BLEND_EQUATION_ALPHA: u32 = 34877;
pub const GL_MAX_VERTEX_ATTRIBS: u32 = 34921;
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED: u32 = 34922;
pub const GL_MAX_TEXTURE_IMAGE_UNITS: u32 = 34930;
pub const GL_FRAGMENT_SHADER: u32 = 35632;
pub const GL_VERTEX_SHADER: u32 = 35633;
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS: u32 = 35657;
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS: u32 = 35658;
pub const GL_MAX_VARYING_FLOATS: u32 = 35659;
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS: u32 = 35660;
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS: u32 = 35661;
pub const GL_SHADER_TYPE: u32 = 35663;
pub const GL_FLOAT_VEC2: u32 = 35664;
pub const GL_FLOAT_VEC3: u32 = 35665;
pub const GL_FLOAT_VEC4: u32 = 35666;
pub const GL_INT_VEC2: u32 = 35667;
pub const GL_INT_VEC3: u32 = 35668;
pub const GL_INT_VEC4: u32 = 35669;
pub const GL_BOOL: u32 = 35670;
pub const GL_BOOL_VEC2: u32 = 35671;
pub const GL_BOOL_VEC3: u32 = 35672;
pub const GL_BOOL_VEC4: u32 = 35673;
pub const GL_FLOAT_MAT2: u32 = 35674;
pub const GL_FLOAT_MAT3: u32 = 35675;
pub const GL_FLOAT_MAT4: u32 = 35676;
pub const GL_SAMPLER_1D: u32 = 35677;
pub const GL_SAMPLER_2D: u32 = 35678;
pub const GL_SAMPLER_3D: u32 = 35679;
pub const GL_SAMPLER_CUBE: u32 = 35680;
pub const GL_SAMPLER_1D_SHADOW: u32 = 35681;
pub const GL_SAMPLER_2D_SHADOW: u32 = 35682;
pub const GL_DELETE_STATUS: u32 = 35712;
pub const GL_COMPILE_STATUS: u32 = 35713;
pub const GL_LINK_STATUS: u32 = 35714;
pub const GL_VALIDATE_STATUS: u32 = 35715;
pub const GL_INFO_LOG_LENGTH: u32 = 35716;
pub const GL_ATTACHED_SHADERS: u32 = 35717;
pub const GL_ACTIVE_UNIFORMS: u32 = 35718;
pub const GL_ACTIVE_UNIFORM_MAX_LENGTH: u32 = 35719;
pub const GL_SHADER_SOURCE_LENGTH: u32 = 35720;
pub const GL_ACTIVE_ATTRIBUTES: u32 = 35721;
pub const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH: u32 = 35722;
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT: u32 = 35723;
pub const GL_SHADING_LANGUAGE_VERSION: u32 = 35724;
pub const GL_CURRENT_PROGRAM: u32 = 35725;
pub const GL_POINT_SPRITE_COORD_ORIGIN: u32 = 36000;
pub const GL_LOWER_LEFT: u32 = 36001;
pub const GL_UPPER_LEFT: u32 = 36002;
pub const GL_STENCIL_BACK_REF: u32 = 36003;
pub const GL_STENCIL_BACK_VALUE_MASK: u32 = 36004;
pub const GL_STENCIL_BACK_WRITEMASK: u32 = 36005;
pub const GL_PIXEL_PACK_BUFFER: u32 = 35051;
pub const GL_PIXEL_UNPACK_BUFFER: u32 = 35052;
pub const GL_PIXEL_PACK_BUFFER_BINDING: u32 = 35053;
pub const GL_PIXEL_UNPACK_BUFFER_BINDING: u32 = 35055;
pub const GL_FLOAT_MAT2x3: u32 = 35685;
pub const GL_FLOAT_MAT2x4: u32 = 35686;
pub const GL_FLOAT_MAT3x2: u32 = 35687;
pub const GL_FLOAT_MAT3x4: u32 = 35688;
pub const GL_FLOAT_MAT4x2: u32 = 35689;
pub const GL_FLOAT_MAT4x3: u32 = 35690;
pub const GL_SRGB: u32 = 35904;
pub const GL_SRGB8: u32 = 35905;
pub const GL_SRGB_ALPHA: u32 = 35906;
pub const GL_SRGB8_ALPHA8: u32 = 35907;
pub const GL_COMPRESSED_SRGB: u32 = 35912;
pub const GL_COMPRESSED_SRGB_ALPHA: u32 = 35913;
pub const GL_COMPARE_REF_TO_TEXTURE: u32 = 34894;
pub const GL_CLIP_DISTANCE0: u32 = 12288;
pub const GL_CLIP_DISTANCE1: u32 = 12289;
pub const GL_CLIP_DISTANCE2: u32 = 12290;
pub const GL_CLIP_DISTANCE3: u32 = 12291;
pub const GL_CLIP_DISTANCE4: u32 = 12292;
pub const GL_CLIP_DISTANCE5: u32 = 12293;
pub const GL_CLIP_DISTANCE6: u32 = 12294;
pub const GL_CLIP_DISTANCE7: u32 = 12295;
pub const GL_MAX_CLIP_DISTANCES: u32 = 3378;
pub const GL_MAJOR_VERSION: u32 = 33307;
pub const GL_MINOR_VERSION: u32 = 33308;
pub const GL_NUM_EXTENSIONS: u32 = 33309;
pub const GL_CONTEXT_FLAGS: u32 = 33310;
pub const GL_COMPRESSED_RED: u32 = 33317;
pub const GL_COMPRESSED_RG: u32 = 33318;
pub const GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT: u32 = 1;
pub const GL_RGBA32F: u32 = 34836;
pub const GL_RGB32F: u32 = 34837;
pub const GL_RGBA16F: u32 = 34842;
pub const GL_RGB16F: u32 = 34843;
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER: u32 = 35069;
pub const GL_MAX_ARRAY_TEXTURE_LAYERS: u32 = 35071;
pub const GL_MIN_PROGRAM_TEXEL_OFFSET: u32 = 35076;
pub const GL_MAX_PROGRAM_TEXEL_OFFSET: u32 = 35077;
pub const GL_CLAMP_READ_COLOR: u32 = 35100;
pub const GL_FIXED_ONLY: u32 = 35101;
pub const GL_MAX_VARYING_COMPONENTS: u32 = 35659;
pub const GL_TEXTURE_1D_ARRAY: u32 = 35864;
pub const GL_PROXY_TEXTURE_1D_ARRAY: u32 = 35865;
pub const GL_TEXTURE_2D_ARRAY: u32 = 35866;
pub const GL_PROXY_TEXTURE_2D_ARRAY: u32 = 35867;
pub const GL_TEXTURE_BINDING_1D_ARRAY: u32 = 35868;
pub const GL_TEXTURE_BINDING_2D_ARRAY: u32 = 35869;
pub const GL_R11F_G11F_B10F: u32 = 35898;
pub const GL_UNSIGNED_INT_10F_11F_11F_REV: u32 = 35899;
pub const GL_RGB9_E5: u32 = 35901;
pub const GL_UNSIGNED_INT_5_9_9_9_REV: u32 = 35902;
pub const GL_TEXTURE_SHARED_SIZE: u32 = 35903;
pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH: u32 = 35958;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE: u32 = 35967;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: u32 = 35968;
pub const GL_TRANSFORM_FEEDBACK_VARYINGS: u32 = 35971;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START: u32 = 35972;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE: u32 = 35973;
pub const GL_PRIMITIVES_GENERATED: u32 = 35975;
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: u32 = 35976;
pub const GL_RASTERIZER_DISCARD: u32 = 35977;
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: u32 = 35978;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: u32 = 35979;
pub const GL_INTERLEAVED_ATTRIBS: u32 = 35980;
pub const GL_SEPARATE_ATTRIBS: u32 = 35981;
pub const GL_TRANSFORM_FEEDBACK_BUFFER: u32 = 35982;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING: u32 = 35983;
pub const GL_RGBA32UI: u32 = 36208;
pub const GL_RGB32UI: u32 = 36209;
pub const GL_RGBA16UI: u32 = 36214;
pub const GL_RGB16UI: u32 = 36215;
pub const GL_RGBA8UI: u32 = 36220;
pub const GL_RGB8UI: u32 = 36221;
pub const GL_RGBA32I: u32 = 36226;
pub const GL_RGB32I: u32 = 36227;
pub const GL_RGBA16I: u32 = 36232;
pub const GL_RGB16I: u32 = 36233;
pub const GL_RGBA8I: u32 = 36238;
pub const GL_RGB8I: u32 = 36239;
pub const GL_RED_INTEGER: u32 = 36244;
pub const GL_GREEN_INTEGER: u32 = 36245;
pub const GL_BLUE_INTEGER: u32 = 36246;
pub const GL_RGB_INTEGER: u32 = 36248;
pub const GL_RGBA_INTEGER: u32 = 36249;
pub const GL_BGR_INTEGER: u32 = 36250;
pub const GL_BGRA_INTEGER: u32 = 36251;
pub const GL_SAMPLER_1D_ARRAY: u32 = 36288;
pub const GL_SAMPLER_2D_ARRAY: u32 = 36289;
pub const GL_SAMPLER_1D_ARRAY_SHADOW: u32 = 36291;
pub const GL_SAMPLER_2D_ARRAY_SHADOW: u32 = 36292;
pub const GL_SAMPLER_CUBE_SHADOW: u32 = 36293;
pub const GL_UNSIGNED_INT_VEC2: u32 = 36294;
pub const GL_UNSIGNED_INT_VEC3: u32 = 36295;
pub const GL_UNSIGNED_INT_VEC4: u32 = 36296;
pub const GL_INT_SAMPLER_1D: u32 = 36297;
pub const GL_INT_SAMPLER_2D: u32 = 36298;
pub const GL_INT_SAMPLER_3D: u32 = 36299;
pub const GL_INT_SAMPLER_CUBE: u32 = 36300;
pub const GL_INT_SAMPLER_1D_ARRAY: u32 = 36302;
pub const GL_INT_SAMPLER_2D_ARRAY: u32 = 36303;
pub const GL_UNSIGNED_INT_SAMPLER_1D: u32 = 36305;
pub const GL_UNSIGNED_INT_SAMPLER_2D: u32 = 36306;
pub const GL_UNSIGNED_INT_SAMPLER_3D: u32 = 36307;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE: u32 = 36308;
pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY: u32 = 36310;
pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY: u32 = 36311;
pub const GL_QUERY_WAIT: u32 = 36371;
pub const GL_QUERY_NO_WAIT: u32 = 36372;
pub const GL_QUERY_BY_REGION_WAIT: u32 = 36373;
pub const GL_QUERY_BY_REGION_NO_WAIT: u32 = 36374;
pub const GL_BUFFER_ACCESS_FLAGS: u32 = 37151;
pub const GL_BUFFER_MAP_LENGTH: u32 = 37152;
pub const GL_BUFFER_MAP_OFFSET: u32 = 37153;
pub const GL_DEPTH_COMPONENT32F: u32 = 36012;
pub const GL_DEPTH32F_STENCIL8: u32 = 36013;
pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV: u32 = 36269;
pub const GL_INVALID_FRAMEBUFFER_OPERATION: u32 = 1286;
pub const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: u32 = 33296;
pub const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: u32 = 33297;
pub const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE: u32 = 33298;
pub const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: u32 = 33299;
pub const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: u32 = 33300;
pub const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: u32 = 33301;
pub const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: u32 = 33302;
pub const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: u32 = 33303;
pub const GL_FRAMEBUFFER_DEFAULT: u32 = 33304;
pub const GL_FRAMEBUFFER_UNDEFINED: u32 = 33305;
pub const GL_DEPTH_STENCIL_ATTACHMENT: u32 = 33306;
pub const GL_MAX_RENDERBUFFER_SIZE: u32 = 34024;
pub const GL_DEPTH_STENCIL: u32 = 34041;
pub const GL_UNSIGNED_INT_24_8: u32 = 34042;
pub const GL_DEPTH24_STENCIL8: u32 = 35056;
pub const GL_TEXTURE_STENCIL_SIZE: u32 = 35057;
pub const GL_TEXTURE_RED_TYPE: u32 = 35856;
pub const GL_TEXTURE_GREEN_TYPE: u32 = 35857;
pub const GL_TEXTURE_BLUE_TYPE: u32 = 35858;
pub const GL_TEXTURE_ALPHA_TYPE: u32 = 35859;
pub const GL_TEXTURE_DEPTH_TYPE: u32 = 35862;
pub const GL_UNSIGNED_NORMALIZED: u32 = 35863;
pub const GL_FRAMEBUFFER_BINDING: u32 = 36006;
pub const GL_DRAW_FRAMEBUFFER_BINDING: u32 = 36006;
pub const GL_RENDERBUFFER_BINDING: u32 = 36007;
pub const GL_READ_FRAMEBUFFER: u32 = 36008;
pub const GL_DRAW_FRAMEBUFFER: u32 = 36009;
pub const GL_READ_FRAMEBUFFER_BINDING: u32 = 36010;
pub const GL_RENDERBUFFER_SAMPLES: u32 = 36011;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: u32 = 36048;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: u32 = 36049;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: u32 = 36050;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: u32 = 36051;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: u32 = 36052;
pub const GL_FRAMEBUFFER_COMPLETE: u32 = 36053;
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT: u32 = 36054;
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: u32 = 36055;
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER: u32 = 36059;
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER: u32 = 36060;
pub const GL_FRAMEBUFFER_UNSUPPORTED: u32 = 36061;
pub const GL_MAX_COLOR_ATTACHMENTS: u32 = 36063;
pub const GL_COLOR_ATTACHMENT0: u32 = 36064;
pub const GL_COLOR_ATTACHMENT1: u32 = 36065;
pub const GL_COLOR_ATTACHMENT2: u32 = 36066;
pub const GL_COLOR_ATTACHMENT3: u32 = 36067;
pub const GL_COLOR_ATTACHMENT4: u32 = 36068;
pub const GL_COLOR_ATTACHMENT5: u32 = 36069;
pub const GL_COLOR_ATTACHMENT6: u32 = 36070;
pub const GL_COLOR_ATTACHMENT7: u32 = 36071;
pub const GL_COLOR_ATTACHMENT8: u32 = 36072;
pub const GL_COLOR_ATTACHMENT9: u32 = 36073;
pub const GL_COLOR_ATTACHMENT10: u32 = 36074;
pub const GL_COLOR_ATTACHMENT11: u32 = 36075;
pub const GL_COLOR_ATTACHMENT12: u32 = 36076;
pub const GL_COLOR_ATTACHMENT13: u32 = 36077;
pub const GL_COLOR_ATTACHMENT14: u32 = 36078;
pub const GL_COLOR_ATTACHMENT15: u32 = 36079;
pub const GL_COLOR_ATTACHMENT16: u32 = 36080;
pub const GL_COLOR_ATTACHMENT17: u32 = 36081;
pub const GL_COLOR_ATTACHMENT18: u32 = 36082;
pub const GL_COLOR_ATTACHMENT19: u32 = 36083;
pub const GL_COLOR_ATTACHMENT20: u32 = 36084;
pub const GL_COLOR_ATTACHMENT21: u32 = 36085;
pub const GL_COLOR_ATTACHMENT22: u32 = 36086;
pub const GL_COLOR_ATTACHMENT23: u32 = 36087;
pub const GL_COLOR_ATTACHMENT24: u32 = 36088;
pub const GL_COLOR_ATTACHMENT25: u32 = 36089;
pub const GL_COLOR_ATTACHMENT26: u32 = 36090;
pub const GL_COLOR_ATTACHMENT27: u32 = 36091;
pub const GL_COLOR_ATTACHMENT28: u32 = 36092;
pub const GL_COLOR_ATTACHMENT29: u32 = 36093;
pub const GL_COLOR_ATTACHMENT30: u32 = 36094;
pub const GL_COLOR_ATTACHMENT31: u32 = 36095;
pub const GL_DEPTH_ATTACHMENT: u32 = 36096;
pub const GL_STENCIL_ATTACHMENT: u32 = 36128;
pub const GL_FRAMEBUFFER: u32 = 36160;
pub const GL_RENDERBUFFER: u32 = 36161;
pub const GL_RENDERBUFFER_WIDTH: u32 = 36162;
pub const GL_RENDERBUFFER_HEIGHT: u32 = 36163;
pub const GL_RENDERBUFFER_INTERNAL_FORMAT: u32 = 36164;
pub const GL_STENCIL_INDEX1: u32 = 36166;
pub const GL_STENCIL_INDEX4: u32 = 36167;
pub const GL_STENCIL_INDEX8: u32 = 36168;
pub const GL_STENCIL_INDEX16: u32 = 36169;
pub const GL_RENDERBUFFER_RED_SIZE: u32 = 36176;
pub const GL_RENDERBUFFER_GREEN_SIZE: u32 = 36177;
pub const GL_RENDERBUFFER_BLUE_SIZE: u32 = 36178;
pub const GL_RENDERBUFFER_ALPHA_SIZE: u32 = 36179;
pub const GL_RENDERBUFFER_DEPTH_SIZE: u32 = 36180;
pub const GL_RENDERBUFFER_STENCIL_SIZE: u32 = 36181;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: u32 = 36182;
pub const GL_MAX_SAMPLES: u32 = 36183;
pub const GL_FRAMEBUFFER_SRGB: u32 = 36281;
pub const GL_HALF_FLOAT: u32 = 5131;
pub const GL_MAP_READ_BIT: u32 = 1;
pub const GL_MAP_WRITE_BIT: u32 = 2;
pub const GL_MAP_INVALIDATE_RANGE_BIT: u32 = 4;
pub const GL_MAP_INVALIDATE_BUFFER_BIT: u32 = 8;
pub const GL_MAP_FLUSH_EXPLICIT_BIT: u32 = 16;
pub const GL_MAP_UNSYNCHRONIZED_BIT: u32 = 32;
pub const GL_COMPRESSED_RED_RGTC1: u32 = 36283;
pub const GL_COMPRESSED_SIGNED_RED_RGTC1: u32 = 36284;
pub const GL_COMPRESSED_RG_RGTC2: u32 = 36285;
pub const GL_COMPRESSED_SIGNED_RG_RGTC2: u32 = 36286;
pub const GL_RG: u32 = 33319;
pub const GL_RG_INTEGER: u32 = 33320;
pub const GL_R8: u32 = 33321;
pub const GL_R16: u32 = 33322;
pub const GL_RG8: u32 = 33323;
pub const GL_RG16: u32 = 33324;
pub const GL_R16F: u32 = 33325;
pub const GL_R32F: u32 = 33326;
pub const GL_RG16F: u32 = 33327;
pub const GL_RG32F: u32 = 33328;
pub const GL_R8I: u32 = 33329;
pub const GL_R8UI: u32 = 33330;
pub const GL_R16I: u32 = 33331;
pub const GL_R16UI: u32 = 33332;
pub const GL_R32I: u32 = 33333;
pub const GL_R32UI: u32 = 33334;
pub const GL_RG8I: u32 = 33335;
pub const GL_RG8UI: u32 = 33336;
pub const GL_RG16I: u32 = 33337;
pub const GL_RG16UI: u32 = 33338;
pub const GL_RG32I: u32 = 33339;
pub const GL_RG32UI: u32 = 33340;
pub const GL_VERTEX_ARRAY_BINDING: u32 = 34229;
pub const GL_SAMPLER_2D_RECT: u32 = 35683;
pub const GL_SAMPLER_2D_RECT_SHADOW: u32 = 35684;
pub const GL_SAMPLER_BUFFER: u32 = 36290;
pub const GL_INT_SAMPLER_2D_RECT: u32 = 36301;
pub const GL_INT_SAMPLER_BUFFER: u32 = 36304;
pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT: u32 = 36309;
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER: u32 = 36312;
pub const GL_TEXTURE_BUFFER: u32 = 35882;
pub const GL_MAX_TEXTURE_BUFFER_SIZE: u32 = 35883;
pub const GL_TEXTURE_BINDING_BUFFER: u32 = 35884;
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING: u32 = 35885;
pub const GL_TEXTURE_RECTANGLE: u32 = 34037;
pub const GL_TEXTURE_BINDING_RECTANGLE: u32 = 34038;
pub const GL_PROXY_TEXTURE_RECTANGLE: u32 = 34039;
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE: u32 = 34040;
pub const GL_R8_SNORM: u32 = 36756;
pub const GL_RG8_SNORM: u32 = 36757;
pub const GL_RGB8_SNORM: u32 = 36758;
pub const GL_RGBA8_SNORM: u32 = 36759;
pub const GL_R16_SNORM: u32 = 36760;
pub const GL_RG16_SNORM: u32 = 36761;
pub const GL_RGB16_SNORM: u32 = 36762;
pub const GL_RGBA16_SNORM: u32 = 36763;
pub const GL_SIGNED_NORMALIZED: u32 = 36764;
pub const GL_PRIMITIVE_RESTART: u32 = 36765;
pub const GL_PRIMITIVE_RESTART_INDEX: u32 = 36766;
pub const GL_COPY_READ_BUFFER: u32 = 36662;
pub const GL_COPY_WRITE_BUFFER: u32 = 36663;
pub const GL_UNIFORM_BUFFER: u32 = 35345;
pub const GL_UNIFORM_BUFFER_BINDING: u32 = 35368;
pub const GL_UNIFORM_BUFFER_START: u32 = 35369;
pub const GL_UNIFORM_BUFFER_SIZE: u32 = 35370;
pub const GL_MAX_VERTEX_UNIFORM_BLOCKS: u32 = 35371;
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS: u32 = 35372;
pub const GL_MAX_FRAGMENT_UNIFORM_BLOCKS: u32 = 35373;
pub const GL_MAX_COMBINED_UNIFORM_BLOCKS: u32 = 35374;
pub const GL_MAX_UNIFORM_BUFFER_BINDINGS: u32 = 35375;
pub const GL_MAX_UNIFORM_BLOCK_SIZE: u32 = 35376;
pub const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: u32 = 35377;
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS: u32 = 35378;
pub const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: u32 = 35379;
pub const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT: u32 = 35380;
pub const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH: u32 = 35381;
pub const GL_ACTIVE_UNIFORM_BLOCKS: u32 = 35382;
pub const GL_UNIFORM_TYPE: u32 = 35383;
pub const GL_UNIFORM_SIZE: u32 = 35384;
pub const GL_UNIFORM_NAME_LENGTH: u32 = 35385;
pub const GL_UNIFORM_BLOCK_INDEX: u32 = 35386;
pub const GL_UNIFORM_OFFSET: u32 = 35387;
pub const GL_UNIFORM_ARRAY_STRIDE: u32 = 35388;
pub const GL_UNIFORM_MATRIX_STRIDE: u32 = 35389;
pub const GL_UNIFORM_IS_ROW_MAJOR: u32 = 35390;
pub const GL_UNIFORM_BLOCK_BINDING: u32 = 35391;
pub const GL_UNIFORM_BLOCK_DATA_SIZE: u32 = 35392;
pub const GL_UNIFORM_BLOCK_NAME_LENGTH: u32 = 35393;
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS: u32 = 35394;
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: u32 = 35395;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: u32 = 35396;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER: u32 = 35397;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: u32 = 35398;
pub const GL_INVALID_INDEX: u32 = 4294967295;
pub const GL_CONTEXT_CORE_PROFILE_BIT: u32 = 1;
pub const GL_CONTEXT_COMPATIBILITY_PROFILE_BIT: u32 = 2;
pub const GL_LINES_ADJACENCY: u32 = 10;
pub const GL_LINE_STRIP_ADJACENCY: u32 = 11;
pub const GL_TRIANGLES_ADJACENCY: u32 = 12;
pub const GL_TRIANGLE_STRIP_ADJACENCY: u32 = 13;
pub const GL_PROGRAM_POINT_SIZE: u32 = 34370;
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS: u32 = 35881;
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED: u32 = 36263;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS: u32 = 36264;
pub const GL_GEOMETRY_SHADER: u32 = 36313;
pub const GL_GEOMETRY_VERTICES_OUT: u32 = 35094;
pub const GL_GEOMETRY_INPUT_TYPE: u32 = 35095;
pub const GL_GEOMETRY_OUTPUT_TYPE: u32 = 35096;
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS: u32 = 36319;
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES: u32 = 36320;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS: u32 = 36321;
pub const GL_MAX_VERTEX_OUTPUT_COMPONENTS: u32 = 37154;
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS: u32 = 37155;
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS: u32 = 37156;
pub const GL_MAX_FRAGMENT_INPUT_COMPONENTS: u32 = 37157;
pub const GL_CONTEXT_PROFILE_MASK: u32 = 37158;
pub const GL_DEPTH_CLAMP: u32 = 34383;
pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION: u32 = 36428;
pub const GL_FIRST_VERTEX_CONVENTION: u32 = 36429;
pub const GL_LAST_VERTEX_CONVENTION: u32 = 36430;
pub const GL_PROVOKING_VERTEX: u32 = 36431;
pub const GL_TEXTURE_CUBE_MAP_SEAMLESS: u32 = 34895;
pub const GL_MAX_SERVER_WAIT_TIMEOUT: u32 = 37137;
pub const GL_OBJECT_TYPE: u32 = 37138;
pub const GL_SYNC_CONDITION: u32 = 37139;
pub const GL_SYNC_STATUS: u32 = 37140;
pub const GL_SYNC_FLAGS: u32 = 37141;
pub const GL_SYNC_FENCE: u32 = 37142;
pub const GL_SYNC_GPU_COMMANDS_COMPLETE: u32 = 37143;
pub const GL_UNSIGNALED: u32 = 37144;
pub const GL_SIGNALED: u32 = 37145;
pub const GL_ALREADY_SIGNALED: u32 = 37146;
pub const GL_TIMEOUT_EXPIRED: u32 = 37147;
pub const GL_CONDITION_SATISFIED: u32 = 37148;
pub const GL_WAIT_FAILED: u32 = 37149;
pub const GL_TIMEOUT_IGNORED: i32 = -1;
pub const GL_SYNC_FLUSH_COMMANDS_BIT: u32 = 1;
pub const GL_SAMPLE_POSITION: u32 = 36432;
pub const GL_SAMPLE_MASK: u32 = 36433;
pub const GL_SAMPLE_MASK_VALUE: u32 = 36434;
pub const GL_MAX_SAMPLE_MASK_WORDS: u32 = 36441;
pub const GL_TEXTURE_2D_MULTISAMPLE: u32 = 37120;
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE: u32 = 37121;
pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY: u32 = 37122;
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY: u32 = 37123;
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE: u32 = 37124;
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY: u32 = 37125;
pub const GL_TEXTURE_SAMPLES: u32 = 37126;
pub const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS: u32 = 37127;
pub const GL_SAMPLER_2D_MULTISAMPLE: u32 = 37128;
pub const GL_INT_SAMPLER_2D_MULTISAMPLE: u32 = 37129;
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE: u32 = 37130;
pub const GL_SAMPLER_2D_MULTISAMPLE_ARRAY: u32 = 37131;
pub const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY: u32 = 37132;
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY: u32 = 37133;
pub const GL_MAX_COLOR_TEXTURE_SAMPLES: u32 = 37134;
pub const GL_MAX_DEPTH_TEXTURE_SAMPLES: u32 = 37135;
pub const GL_MAX_INTEGER_SAMPLES: u32 = 37136;
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR: u32 = 35070;
pub const GL_SRC1_COLOR: u32 = 35065;
pub const GL_ONE_MINUS_SRC1_COLOR: u32 = 35066;
pub const GL_ONE_MINUS_SRC1_ALPHA: u32 = 35067;
pub const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS: u32 = 35068;
pub const GL_ANY_SAMPLES_PASSED: u32 = 35887;
pub const GL_SAMPLER_BINDING: u32 = 35097;
pub const GL_RGB10_A2UI: u32 = 36975;
pub const GL_TEXTURE_SWIZZLE_R: u32 = 36418;
pub const GL_TEXTURE_SWIZZLE_G: u32 = 36419;
pub const GL_TEXTURE_SWIZZLE_B: u32 = 36420;
pub const GL_TEXTURE_SWIZZLE_A: u32 = 36421;
pub const GL_TEXTURE_SWIZZLE_RGBA: u32 = 36422;
pub const GL_TIME_ELAPSED: u32 = 35007;
pub const GL_TIMESTAMP: u32 = 36392;
pub const GL_INT_2_10_10_10_REV: u32 = 36255;
pub const GL_SAMPLE_SHADING: u32 = 35894;
pub const GL_MIN_SAMPLE_SHADING_VALUE: u32 = 35895;
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET: u32 = 36446;
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET: u32 = 36447;
pub const GL_TEXTURE_CUBE_MAP_ARRAY: u32 = 36873;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY: u32 = 36874;
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY: u32 = 36875;
pub const GL_SAMPLER_CUBE_MAP_ARRAY: u32 = 36876;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW: u32 = 36877;
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY: u32 = 36878;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY: u32 = 36879;
pub const GL_DRAW_INDIRECT_BUFFER: u32 = 36671;
pub const GL_DRAW_INDIRECT_BUFFER_BINDING: u32 = 36675;
pub const GL_GEOMETRY_SHADER_INVOCATIONS: u32 = 34943;
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS: u32 = 36442;
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET: u32 = 36443;
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET: u32 = 36444;
pub const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS: u32 = 36445;
pub const GL_MAX_VERTEX_STREAMS: u32 = 36465;
pub const GL_DOUBLE_VEC2: u32 = 36860;
pub const GL_DOUBLE_VEC3: u32 = 36861;
pub const GL_DOUBLE_VEC4: u32 = 36862;
pub const GL_DOUBLE_MAT2: u32 = 36678;
pub const GL_DOUBLE_MAT3: u32 = 36679;
pub const GL_DOUBLE_MAT4: u32 = 36680;
pub const GL_DOUBLE_MAT2x3: u32 = 36681;
pub const GL_DOUBLE_MAT2x4: u32 = 36682;
pub const GL_DOUBLE_MAT3x2: u32 = 36683;
pub const GL_DOUBLE_MAT3x4: u32 = 36684;
pub const GL_DOUBLE_MAT4x2: u32 = 36685;
pub const GL_DOUBLE_MAT4x3: u32 = 36686;
pub const GL_ACTIVE_SUBROUTINES: u32 = 36325;
pub const GL_ACTIVE_SUBROUTINE_UNIFORMS: u32 = 36326;
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS: u32 = 36423;
pub const GL_ACTIVE_SUBROUTINE_MAX_LENGTH: u32 = 36424;
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH: u32 = 36425;
pub const GL_MAX_SUBROUTINES: u32 = 36327;
pub const GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS: u32 = 36328;
pub const GL_NUM_COMPATIBLE_SUBROUTINES: u32 = 36426;
pub const GL_COMPATIBLE_SUBROUTINES: u32 = 36427;
pub const GL_PATCHES: u32 = 14;
pub const GL_PATCH_VERTICES: u32 = 36466;
pub const GL_PATCH_DEFAULT_INNER_LEVEL: u32 = 36467;
pub const GL_PATCH_DEFAULT_OUTER_LEVEL: u32 = 36468;
pub const GL_TESS_CONTROL_OUTPUT_VERTICES: u32 = 36469;
pub const GL_TESS_GEN_MODE: u32 = 36470;
pub const GL_TESS_GEN_SPACING: u32 = 36471;
pub const GL_TESS_GEN_VERTEX_ORDER: u32 = 36472;
pub const GL_TESS_GEN_POINT_MODE: u32 = 36473;
pub const GL_ISOLINES: u32 = 36474;
pub const GL_QUADS: u32 = 7;
pub const GL_FRACTIONAL_ODD: u32 = 36475;
pub const GL_FRACTIONAL_EVEN: u32 = 36476;
pub const GL_MAX_PATCH_VERTICES: u32 = 36477;
pub const GL_MAX_TESS_GEN_LEVEL: u32 = 36478;
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS: u32 = 36479;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS: u32 = 36480;
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS: u32 = 36481;
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS: u32 = 36482;
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS: u32 = 36483;
pub const GL_MAX_TESS_PATCH_COMPONENTS: u32 = 36484;
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS: u32 = 36485;
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS: u32 = 36486;
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS: u32 = 36489;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS: u32 = 36490;
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS: u32 = 34924;
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS: u32 = 34925;
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS: u32 = 36382;
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS: u32 = 36383;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER: u32 = 34032;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER: u32 = 34033;
pub const GL_TESS_EVALUATION_SHADER: u32 = 36487;
pub const GL_TESS_CONTROL_SHADER: u32 = 36488;
pub const GL_TRANSFORM_FEEDBACK: u32 = 36386;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED: u32 = 36387;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE: u32 = 36388;
pub const GL_TRANSFORM_FEEDBACK_BINDING: u32 = 36389;
pub const GL_MAX_TRANSFORM_FEEDBACK_BUFFERS: u32 = 36464;
pub const GL_FIXED: u32 = 5132;
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE: u32 = 35738;
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT: u32 = 35739;
pub const GL_LOW_FLOAT: u32 = 36336;
pub const GL_MEDIUM_FLOAT: u32 = 36337;
pub const GL_HIGH_FLOAT: u32 = 36338;
pub const GL_LOW_INT: u32 = 36339;
pub const GL_MEDIUM_INT: u32 = 36340;
pub const GL_HIGH_INT: u32 = 36341;
pub const GL_SHADER_COMPILER: u32 = 36346;
pub const GL_SHADER_BINARY_FORMATS: u32 = 36344;
pub const GL_NUM_SHADER_BINARY_FORMATS: u32 = 36345;
pub const GL_MAX_VERTEX_UNIFORM_VECTORS: u32 = 36347;
pub const GL_MAX_VARYING_VECTORS: u32 = 36348;
pub const GL_MAX_FRAGMENT_UNIFORM_VECTORS: u32 = 36349;
pub const GL_RGB565: u32 = 36194;
pub const GL_PROGRAM_BINARY_RETRIEVABLE_HINT: u32 = 33367;
pub const GL_PROGRAM_BINARY_LENGTH: u32 = 34625;
pub const GL_NUM_PROGRAM_BINARY_FORMATS: u32 = 34814;
pub const GL_PROGRAM_BINARY_FORMATS: u32 = 34815;
pub const GL_VERTEX_SHADER_BIT: u32 = 1;
pub const GL_FRAGMENT_SHADER_BIT: u32 = 2;
pub const GL_GEOMETRY_SHADER_BIT: u32 = 4;
pub const GL_TESS_CONTROL_SHADER_BIT: u32 = 8;
pub const GL_TESS_EVALUATION_SHADER_BIT: u32 = 16;
pub const GL_ALL_SHADER_BITS: u32 = 4294967295;
pub const GL_PROGRAM_SEPARABLE: u32 = 33368;
pub const GL_ACTIVE_PROGRAM: u32 = 33369;
pub const GL_PROGRAM_PIPELINE_BINDING: u32 = 33370;
pub const GL_MAX_VIEWPORTS: u32 = 33371;
pub const GL_VIEWPORT_SUBPIXEL_BITS: u32 = 33372;
pub const GL_VIEWPORT_BOUNDS_RANGE: u32 = 33373;
pub const GL_LAYER_PROVOKING_VERTEX: u32 = 33374;
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX: u32 = 33375;
pub const GL_UNDEFINED_VERTEX: u32 = 33376;
pub const GL_COPY_READ_BUFFER_BINDING: u32 = 36662;
pub const GL_COPY_WRITE_BUFFER_BINDING: u32 = 36663;
pub const GL_TRANSFORM_FEEDBACK_ACTIVE: u32 = 36388;
pub const GL_TRANSFORM_FEEDBACK_PAUSED: u32 = 36387;
pub const GL_UNPACK_COMPRESSED_BLOCK_WIDTH: u32 = 37159;
pub const GL_UNPACK_COMPRESSED_BLOCK_HEIGHT: u32 = 37160;
pub const GL_UNPACK_COMPRESSED_BLOCK_DEPTH: u32 = 37161;
pub const GL_UNPACK_COMPRESSED_BLOCK_SIZE: u32 = 37162;
pub const GL_PACK_COMPRESSED_BLOCK_WIDTH: u32 = 37163;
pub const GL_PACK_COMPRESSED_BLOCK_HEIGHT: u32 = 37164;
pub const GL_PACK_COMPRESSED_BLOCK_DEPTH: u32 = 37165;
pub const GL_PACK_COMPRESSED_BLOCK_SIZE: u32 = 37166;
pub const GL_NUM_SAMPLE_COUNTS: u32 = 37760;
pub const GL_MIN_MAP_BUFFER_ALIGNMENT: u32 = 37052;
pub const GL_ATOMIC_COUNTER_BUFFER: u32 = 37568;
pub const GL_ATOMIC_COUNTER_BUFFER_BINDING: u32 = 37569;
pub const GL_ATOMIC_COUNTER_BUFFER_START: u32 = 37570;
pub const GL_ATOMIC_COUNTER_BUFFER_SIZE: u32 = 37571;
pub const GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE: u32 = 37572;
pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS: u32 = 37573;
pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES: u32 = 37574;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER: u32 = 37575;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER: u32 = 37576;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER: u32 = 37577;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER: u32 = 37578;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER: u32 = 37579;
pub const GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS: u32 = 37580;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS: u32 = 37581;
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS: u32 = 37582;
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS: u32 = 37583;
pub const GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS: u32 = 37584;
pub const GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS: u32 = 37585;
pub const GL_MAX_VERTEX_ATOMIC_COUNTERS: u32 = 37586;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS: u32 = 37587;
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS: u32 = 37588;
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS: u32 = 37589;
pub const GL_MAX_FRAGMENT_ATOMIC_COUNTERS: u32 = 37590;
pub const GL_MAX_COMBINED_ATOMIC_COUNTERS: u32 = 37591;
pub const GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE: u32 = 37592;
pub const GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS: u32 = 37596;
pub const GL_ACTIVE_ATOMIC_COUNTER_BUFFERS: u32 = 37593;
pub const GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX: u32 = 37594;
pub const GL_UNSIGNED_INT_ATOMIC_COUNTER: u32 = 37595;
pub const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT: u32 = 1;
pub const GL_ELEMENT_ARRAY_BARRIER_BIT: u32 = 2;
pub const GL_UNIFORM_BARRIER_BIT: u32 = 4;
pub const GL_TEXTURE_FETCH_BARRIER_BIT: u32 = 8;
pub const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT: u32 = 32;
pub const GL_COMMAND_BARRIER_BIT: u32 = 64;
pub const GL_PIXEL_BUFFER_BARRIER_BIT: u32 = 128;
pub const GL_TEXTURE_UPDATE_BARRIER_BIT: u32 = 256;
pub const GL_BUFFER_UPDATE_BARRIER_BIT: u32 = 512;
pub const GL_FRAMEBUFFER_BARRIER_BIT: u32 = 1024;
pub const GL_TRANSFORM_FEEDBACK_BARRIER_BIT: u32 = 2048;
pub const GL_ATOMIC_COUNTER_BARRIER_BIT: u32 = 4096;
pub const GL_ALL_BARRIER_BITS: u32 = 4294967295;
pub const GL_MAX_IMAGE_UNITS: u32 = 36664;
pub const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS: u32 = 36665;
pub const GL_IMAGE_BINDING_NAME: u32 = 36666;
pub const GL_IMAGE_BINDING_LEVEL: u32 = 36667;
pub const GL_IMAGE_BINDING_LAYERED: u32 = 36668;
pub const GL_IMAGE_BINDING_LAYER: u32 = 36669;
pub const GL_IMAGE_BINDING_ACCESS: u32 = 36670;
pub const GL_IMAGE_1D: u32 = 36940;
pub const GL_IMAGE_2D: u32 = 36941;
pub const GL_IMAGE_3D: u32 = 36942;
pub const GL_IMAGE_2D_RECT: u32 = 36943;
pub const GL_IMAGE_CUBE: u32 = 36944;
pub const GL_IMAGE_BUFFER: u32 = 36945;
pub const GL_IMAGE_1D_ARRAY: u32 = 36946;
pub const GL_IMAGE_2D_ARRAY: u32 = 36947;
pub const GL_IMAGE_CUBE_MAP_ARRAY: u32 = 36948;
pub const GL_IMAGE_2D_MULTISAMPLE: u32 = 36949;
pub const GL_IMAGE_2D_MULTISAMPLE_ARRAY: u32 = 36950;
pub const GL_INT_IMAGE_1D: u32 = 36951;
pub const GL_INT_IMAGE_2D: u32 = 36952;
pub const GL_INT_IMAGE_3D: u32 = 36953;
pub const GL_INT_IMAGE_2D_RECT: u32 = 36954;
pub const GL_INT_IMAGE_CUBE: u32 = 36955;
pub const GL_INT_IMAGE_BUFFER: u32 = 36956;
pub const GL_INT_IMAGE_1D_ARRAY: u32 = 36957;
pub const GL_INT_IMAGE_2D_ARRAY: u32 = 36958;
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY: u32 = 36959;
pub const GL_INT_IMAGE_2D_MULTISAMPLE: u32 = 36960;
pub const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY: u32 = 36961;
pub const GL_UNSIGNED_INT_IMAGE_1D: u32 = 36962;
pub const GL_UNSIGNED_INT_IMAGE_2D: u32 = 36963;
pub const GL_UNSIGNED_INT_IMAGE_3D: u32 = 36964;
pub const GL_UNSIGNED_INT_IMAGE_2D_RECT: u32 = 36965;
pub const GL_UNSIGNED_INT_IMAGE_CUBE: u32 = 36966;
pub const GL_UNSIGNED_INT_IMAGE_BUFFER: u32 = 36967;
pub const GL_UNSIGNED_INT_IMAGE_1D_ARRAY: u32 = 36968;
pub const GL_UNSIGNED_INT_IMAGE_2D_ARRAY: u32 = 36969;
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY: u32 = 36970;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE: u32 = 36971;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY: u32 = 36972;
pub const GL_MAX_IMAGE_SAMPLES: u32 = 36973;
pub const GL_IMAGE_BINDING_FORMAT: u32 = 36974;
pub const GL_IMAGE_FORMAT_COMPATIBILITY_TYPE: u32 = 37063;
pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE: u32 = 37064;
pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS: u32 = 37065;
pub const GL_MAX_VERTEX_IMAGE_UNIFORMS: u32 = 37066;
pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS: u32 = 37067;
pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS: u32 = 37068;
pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS: u32 = 37069;
pub const GL_MAX_FRAGMENT_IMAGE_UNIFORMS: u32 = 37070;
pub const GL_MAX_COMBINED_IMAGE_UNIFORMS: u32 = 37071;
pub const GL_COMPRESSED_RGBA_BPTC_UNORM: u32 = 36492;
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM: u32 = 36493;
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT: u32 = 36494;
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT: u32 = 36495;
pub const GL_TEXTURE_IMMUTABLE_FORMAT: u32 = 37167;
pub const GL_NUM_SHADING_LANGUAGE_VERSIONS: u32 = 33513;
pub const GL_VERTEX_ATTRIB_ARRAY_LONG: u32 = 34638;
pub const GL_COMPRESSED_RGB8_ETC2: u32 = 37492;
pub const GL_COMPRESSED_SRGB8_ETC2: u32 = 37493;
pub const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: u32 = 37494;
pub const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: u32 = 37495;
pub const GL_COMPRESSED_RGBA8_ETC2_EAC: u32 = 37496;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: u32 = 37497;
pub const GL_COMPRESSED_R11_EAC: u32 = 37488;
pub const GL_COMPRESSED_SIGNED_R11_EAC: u32 = 37489;
pub const GL_COMPRESSED_RG11_EAC: u32 = 37490;
pub const GL_COMPRESSED_SIGNED_RG11_EAC: u32 = 37491;
pub const GL_PRIMITIVE_RESTART_FIXED_INDEX: u32 = 36201;
pub const GL_ANY_SAMPLES_PASSED_CONSERVATIVE: u32 = 36202;
pub const GL_MAX_ELEMENT_INDEX: u32 = 36203;
pub const GL_COMPUTE_SHADER: u32 = 37305;
pub const GL_MAX_COMPUTE_UNIFORM_BLOCKS: u32 = 37307;
pub const GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS: u32 = 37308;
pub const GL_MAX_COMPUTE_IMAGE_UNIFORMS: u32 = 37309;
pub const GL_MAX_COMPUTE_SHARED_MEMORY_SIZE: u32 = 33378;
pub const GL_MAX_COMPUTE_UNIFORM_COMPONENTS: u32 = 33379;
pub const GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS: u32 = 33380;
pub const GL_MAX_COMPUTE_ATOMIC_COUNTERS: u32 = 33381;
pub const GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS: u32 = 33382;
pub const GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS: u32 = 37099;
pub const GL_MAX_COMPUTE_WORK_GROUP_COUNT: u32 = 37310;
pub const GL_MAX_COMPUTE_WORK_GROUP_SIZE: u32 = 37311;
pub const GL_COMPUTE_WORK_GROUP_SIZE: u32 = 33383;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER: u32 = 37100;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER: u32 = 37101;
pub const GL_DISPATCH_INDIRECT_BUFFER: u32 = 37102;
pub const GL_DISPATCH_INDIRECT_BUFFER_BINDING: u32 = 37103;
pub const GL_COMPUTE_SHADER_BIT: u32 = 32;
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS: u32 = 33346;
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH: u32 = 33347;
pub const GL_DEBUG_CALLBACK_FUNCTION: u32 = 33348;
pub const GL_DEBUG_CALLBACK_USER_PARAM: u32 = 33349;
pub const GL_DEBUG_SOURCE_API: u32 = 33350;
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM: u32 = 33351;
pub const GL_DEBUG_SOURCE_SHADER_COMPILER: u32 = 33352;
pub const GL_DEBUG_SOURCE_THIRD_PARTY: u32 = 33353;
pub const GL_DEBUG_SOURCE_APPLICATION: u32 = 33354;
pub const GL_DEBUG_SOURCE_OTHER: u32 = 33355;
pub const GL_DEBUG_TYPE_ERROR: u32 = 33356;
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR: u32 = 33357;
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR: u32 = 33358;
pub const GL_DEBUG_TYPE_PORTABILITY: u32 = 33359;
pub const GL_DEBUG_TYPE_PERFORMANCE: u32 = 33360;
pub const GL_DEBUG_TYPE_OTHER: u32 = 33361;
pub const GL_MAX_DEBUG_MESSAGE_LENGTH: u32 = 37187;
pub const GL_MAX_DEBUG_LOGGED_MESSAGES: u32 = 37188;
pub const GL_DEBUG_LOGGED_MESSAGES: u32 = 37189;
pub const GL_DEBUG_SEVERITY_HIGH: u32 = 37190;
pub const GL_DEBUG_SEVERITY_MEDIUM: u32 = 37191;
pub const GL_DEBUG_SEVERITY_LOW: u32 = 37192;
pub const GL_DEBUG_TYPE_MARKER: u32 = 33384;
pub const GL_DEBUG_TYPE_PUSH_GROUP: u32 = 33385;
pub const GL_DEBUG_TYPE_POP_GROUP: u32 = 33386;
pub const GL_DEBUG_SEVERITY_NOTIFICATION: u32 = 33387;
pub const GL_MAX_DEBUG_GROUP_STACK_DEPTH: u32 = 33388;
pub const GL_DEBUG_GROUP_STACK_DEPTH: u32 = 33389;
pub const GL_BUFFER: u32 = 33504;
pub const GL_SHADER: u32 = 33505;
pub const GL_PROGRAM: u32 = 33506;
pub const GL_VERTEX_ARRAY: u32 = 32884;
pub const GL_QUERY: u32 = 33507;
pub const GL_PROGRAM_PIPELINE: u32 = 33508;
pub const GL_SAMPLER: u32 = 33510;
pub const GL_MAX_LABEL_LENGTH: u32 = 33512;
pub const GL_DEBUG_OUTPUT: u32 = 37600;
pub const GL_CONTEXT_FLAG_DEBUG_BIT: u32 = 2;
pub const GL_MAX_UNIFORM_LOCATIONS: u32 = 33390;
pub const GL_FRAMEBUFFER_DEFAULT_WIDTH: u32 = 37648;
pub const GL_FRAMEBUFFER_DEFAULT_HEIGHT: u32 = 37649;
pub const GL_FRAMEBUFFER_DEFAULT_LAYERS: u32 = 37650;
pub const GL_FRAMEBUFFER_DEFAULT_SAMPLES: u32 = 37651;
pub const GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS: u32 = 37652;
pub const GL_MAX_FRAMEBUFFER_WIDTH: u32 = 37653;
pub const GL_MAX_FRAMEBUFFER_HEIGHT: u32 = 37654;
pub const GL_MAX_FRAMEBUFFER_LAYERS: u32 = 37655;
pub const GL_MAX_FRAMEBUFFER_SAMPLES: u32 = 37656;
pub const GL_INTERNALFORMAT_SUPPORTED: u32 = 33391;
pub const GL_INTERNALFORMAT_PREFERRED: u32 = 33392;
pub const GL_INTERNALFORMAT_RED_SIZE: u32 = 33393;
pub const GL_INTERNALFORMAT_GREEN_SIZE: u32 = 33394;
pub const GL_INTERNALFORMAT_BLUE_SIZE: u32 = 33395;
pub const GL_INTERNALFORMAT_ALPHA_SIZE: u32 = 33396;
pub const GL_INTERNALFORMAT_DEPTH_SIZE: u32 = 33397;
pub const GL_INTERNALFORMAT_STENCIL_SIZE: u32 = 33398;
pub const GL_INTERNALFORMAT_SHARED_SIZE: u32 = 33399;
pub const GL_INTERNALFORMAT_RED_TYPE: u32 = 33400;
pub const GL_INTERNALFORMAT_GREEN_TYPE: u32 = 33401;
pub const GL_INTERNALFORMAT_BLUE_TYPE: u32 = 33402;
pub const GL_INTERNALFORMAT_ALPHA_TYPE: u32 = 33403;
pub const GL_INTERNALFORMAT_DEPTH_TYPE: u32 = 33404;
pub const GL_INTERNALFORMAT_STENCIL_TYPE: u32 = 33405;
pub const GL_MAX_WIDTH: u32 = 33406;
pub const GL_MAX_HEIGHT: u32 = 33407;
pub const GL_MAX_DEPTH: u32 = 33408;
pub const GL_MAX_LAYERS: u32 = 33409;
pub const GL_MAX_COMBINED_DIMENSIONS: u32 = 33410;
pub const GL_COLOR_COMPONENTS: u32 = 33411;
pub const GL_DEPTH_COMPONENTS: u32 = 33412;
pub const GL_STENCIL_COMPONENTS: u32 = 33413;
pub const GL_COLOR_RENDERABLE: u32 = 33414;
pub const GL_DEPTH_RENDERABLE: u32 = 33415;
pub const GL_STENCIL_RENDERABLE: u32 = 33416;
pub const GL_FRAMEBUFFER_RENDERABLE: u32 = 33417;
pub const GL_FRAMEBUFFER_RENDERABLE_LAYERED: u32 = 33418;
pub const GL_FRAMEBUFFER_BLEND: u32 = 33419;
pub const GL_READ_PIXELS: u32 = 33420;
pub const GL_READ_PIXELS_FORMAT: u32 = 33421;
pub const GL_READ_PIXELS_TYPE: u32 = 33422;
pub const GL_TEXTURE_IMAGE_FORMAT: u32 = 33423;
pub const GL_TEXTURE_IMAGE_TYPE: u32 = 33424;
pub const GL_GET_TEXTURE_IMAGE_FORMAT: u32 = 33425;
pub const GL_GET_TEXTURE_IMAGE_TYPE: u32 = 33426;
pub const GL_MIPMAP: u32 = 33427;
pub const GL_MANUAL_GENERATE_MIPMAP: u32 = 33428;
pub const GL_AUTO_GENERATE_MIPMAP: u32 = 33429;
pub const GL_COLOR_ENCODING: u32 = 33430;
pub const GL_SRGB_READ: u32 = 33431;
pub const GL_SRGB_WRITE: u32 = 33432;
pub const GL_FILTER: u32 = 33434;
pub const GL_VERTEX_TEXTURE: u32 = 33435;
pub const GL_TESS_CONTROL_TEXTURE: u32 = 33436;
pub const GL_TESS_EVALUATION_TEXTURE: u32 = 33437;
pub const GL_GEOMETRY_TEXTURE: u32 = 33438;
pub const GL_FRAGMENT_TEXTURE: u32 = 33439;
pub const GL_COMPUTE_TEXTURE: u32 = 33440;
pub const GL_TEXTURE_SHADOW: u32 = 33441;
pub const GL_TEXTURE_GATHER: u32 = 33442;
pub const GL_TEXTURE_GATHER_SHADOW: u32 = 33443;
pub const GL_SHADER_IMAGE_LOAD: u32 = 33444;
pub const GL_SHADER_IMAGE_STORE: u32 = 33445;
pub const GL_SHADER_IMAGE_ATOMIC: u32 = 33446;
pub const GL_IMAGE_TEXEL_SIZE: u32 = 33447;
pub const GL_IMAGE_COMPATIBILITY_CLASS: u32 = 33448;
pub const GL_IMAGE_PIXEL_FORMAT: u32 = 33449;
pub const GL_IMAGE_PIXEL_TYPE: u32 = 33450;
pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST: u32 = 33452;
pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST: u32 = 33453;
pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE: u32 = 33454;
pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE: u32 = 33455;
pub const GL_TEXTURE_COMPRESSED_BLOCK_WIDTH: u32 = 33457;
pub const GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT: u32 = 33458;
pub const GL_TEXTURE_COMPRESSED_BLOCK_SIZE: u32 = 33459;
pub const GL_CLEAR_BUFFER: u32 = 33460;
pub const GL_TEXTURE_VIEW: u32 = 33461;
pub const GL_VIEW_COMPATIBILITY_CLASS: u32 = 33462;
pub const GL_FULL_SUPPORT: u32 = 33463;
pub const GL_CAVEAT_SUPPORT: u32 = 33464;
pub const GL_IMAGE_CLASS_4_X_32: u32 = 33465;
pub const GL_IMAGE_CLASS_2_X_32: u32 = 33466;
pub const GL_IMAGE_CLASS_1_X_32: u32 = 33467;
pub const GL_IMAGE_CLASS_4_X_16: u32 = 33468;
pub const GL_IMAGE_CLASS_2_X_16: u32 = 33469;
pub const GL_IMAGE_CLASS_1_X_16: u32 = 33470;
pub const GL_IMAGE_CLASS_4_X_8: u32 = 33471;
pub const GL_IMAGE_CLASS_2_X_8: u32 = 33472;
pub const GL_IMAGE_CLASS_1_X_8: u32 = 33473;
pub const GL_IMAGE_CLASS_11_11_10: u32 = 33474;
pub const GL_IMAGE_CLASS_10_10_10_2: u32 = 33475;
pub const GL_VIEW_CLASS_128_BITS: u32 = 33476;
pub const GL_VIEW_CLASS_96_BITS: u32 = 33477;
pub const GL_VIEW_CLASS_64_BITS: u32 = 33478;
pub const GL_VIEW_CLASS_48_BITS: u32 = 33479;
pub const GL_VIEW_CLASS_32_BITS: u32 = 33480;
pub const GL_VIEW_CLASS_24_BITS: u32 = 33481;
pub const GL_VIEW_CLASS_16_BITS: u32 = 33482;
pub const GL_VIEW_CLASS_8_BITS: u32 = 33483;
pub const GL_VIEW_CLASS_S3TC_DXT1_RGB: u32 = 33484;
pub const GL_VIEW_CLASS_S3TC_DXT1_RGBA: u32 = 33485;
pub const GL_VIEW_CLASS_S3TC_DXT3_RGBA: u32 = 33486;
pub const GL_VIEW_CLASS_S3TC_DXT5_RGBA: u32 = 33487;
pub const GL_VIEW_CLASS_RGTC1_RED: u32 = 33488;
pub const GL_VIEW_CLASS_RGTC2_RG: u32 = 33489;
pub const GL_VIEW_CLASS_BPTC_UNORM: u32 = 33490;
pub const GL_VIEW_CLASS_BPTC_FLOAT: u32 = 33491;
pub const GL_UNIFORM: u32 = 37601;
pub const GL_UNIFORM_BLOCK: u32 = 37602;
pub const GL_PROGRAM_INPUT: u32 = 37603;
pub const GL_PROGRAM_OUTPUT: u32 = 37604;
pub const GL_BUFFER_VARIABLE: u32 = 37605;
pub const GL_SHADER_STORAGE_BLOCK: u32 = 37606;
pub const GL_VERTEX_SUBROUTINE: u32 = 37608;
pub const GL_TESS_CONTROL_SUBROUTINE: u32 = 37609;
pub const GL_TESS_EVALUATION_SUBROUTINE: u32 = 37610;
pub const GL_GEOMETRY_SUBROUTINE: u32 = 37611;
pub const GL_FRAGMENT_SUBROUTINE: u32 = 37612;
pub const GL_COMPUTE_SUBROUTINE: u32 = 37613;
pub const GL_VERTEX_SUBROUTINE_UNIFORM: u32 = 37614;
pub const GL_TESS_CONTROL_SUBROUTINE_UNIFORM: u32 = 37615;
pub const GL_TESS_EVALUATION_SUBROUTINE_UNIFORM: u32 = 37616;
pub const GL_GEOMETRY_SUBROUTINE_UNIFORM: u32 = 37617;
pub const GL_FRAGMENT_SUBROUTINE_UNIFORM: u32 = 37618;
pub const GL_COMPUTE_SUBROUTINE_UNIFORM: u32 = 37619;
pub const GL_TRANSFORM_FEEDBACK_VARYING: u32 = 37620;
pub const GL_ACTIVE_RESOURCES: u32 = 37621;
pub const GL_MAX_NAME_LENGTH: u32 = 37622;
pub const GL_MAX_NUM_ACTIVE_VARIABLES: u32 = 37623;
pub const GL_MAX_NUM_COMPATIBLE_SUBROUTINES: u32 = 37624;
pub const GL_NAME_LENGTH: u32 = 37625;
pub const GL_TYPE: u32 = 37626;
pub const GL_ARRAY_SIZE: u32 = 37627;
pub const GL_OFFSET: u32 = 37628;
pub const GL_BLOCK_INDEX: u32 = 37629;
pub const GL_ARRAY_STRIDE: u32 = 37630;
pub const GL_MATRIX_STRIDE: u32 = 37631;
pub const GL_IS_ROW_MAJOR: u32 = 37632;
pub const GL_ATOMIC_COUNTER_BUFFER_INDEX: u32 = 37633;
pub const GL_BUFFER_BINDING: u32 = 37634;
pub const GL_BUFFER_DATA_SIZE: u32 = 37635;
pub const GL_NUM_ACTIVE_VARIABLES: u32 = 37636;
pub const GL_ACTIVE_VARIABLES: u32 = 37637;
pub const GL_REFERENCED_BY_VERTEX_SHADER: u32 = 37638;
pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER: u32 = 37639;
pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER: u32 = 37640;
pub const GL_REFERENCED_BY_GEOMETRY_SHADER: u32 = 37641;
pub const GL_REFERENCED_BY_FRAGMENT_SHADER: u32 = 37642;
pub const GL_REFERENCED_BY_COMPUTE_SHADER: u32 = 37643;
pub const GL_TOP_LEVEL_ARRAY_SIZE: u32 = 37644;
pub const GL_TOP_LEVEL_ARRAY_STRIDE: u32 = 37645;
pub const GL_LOCATION: u32 = 37646;
pub const GL_LOCATION_INDEX: u32 = 37647;
pub const GL_IS_PER_PATCH: u32 = 37607;
pub const GL_SHADER_STORAGE_BUFFER: u32 = 37074;
pub const GL_SHADER_STORAGE_BUFFER_BINDING: u32 = 37075;
pub const GL_SHADER_STORAGE_BUFFER_START: u32 = 37076;
pub const GL_SHADER_STORAGE_BUFFER_SIZE: u32 = 37077;
pub const GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS: u32 = 37078;
pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS: u32 = 37079;
pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS: u32 = 37080;
pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS: u32 = 37081;
pub const GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS: u32 = 37082;
pub const GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS: u32 = 37083;
pub const GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS: u32 = 37084;
pub const GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS: u32 = 37085;
pub const GL_MAX_SHADER_STORAGE_BLOCK_SIZE: u32 = 37086;
pub const GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT: u32 = 37087;
pub const GL_SHADER_STORAGE_BARRIER_BIT: u32 = 8192;
pub const GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES: u32 = 36665;
pub const GL_DEPTH_STENCIL_TEXTURE_MODE: u32 = 37098;
pub const GL_TEXTURE_BUFFER_OFFSET: u32 = 37277;
pub const GL_TEXTURE_BUFFER_SIZE: u32 = 37278;
pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT: u32 = 37279;
pub const GL_TEXTURE_VIEW_MIN_LEVEL: u32 = 33499;
pub const GL_TEXTURE_VIEW_NUM_LEVELS: u32 = 33500;
pub const GL_TEXTURE_VIEW_MIN_LAYER: u32 = 33501;
pub const GL_TEXTURE_VIEW_NUM_LAYERS: u32 = 33502;
pub const GL_TEXTURE_IMMUTABLE_LEVELS: u32 = 33503;
pub const GL_VERTEX_ATTRIB_BINDING: u32 = 33492;
pub const GL_VERTEX_ATTRIB_RELATIVE_OFFSET: u32 = 33493;
pub const GL_VERTEX_BINDING_DIVISOR: u32 = 33494;
pub const GL_VERTEX_BINDING_OFFSET: u32 = 33495;
pub const GL_VERTEX_BINDING_STRIDE: u32 = 33496;
pub const GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET: u32 = 33497;
pub const GL_MAX_VERTEX_ATTRIB_BINDINGS: u32 = 33498;
pub const GL_VERTEX_BINDING_BUFFER: u32 = 36687;
pub const GL_DISPLAY_LIST: u32 = 33511;
pub const GL_STACK_UNDERFLOW: u32 = 1284;
pub const GL_STACK_OVERFLOW: u32 = 1283;
pub const GL_MAX_VERTEX_ATTRIB_STRIDE: u32 = 33509;
pub const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED: u32 = 33313;
pub const GL_TEXTURE_BUFFER_BINDING: u32 = 35882;
pub const GL_MAP_PERSISTENT_BIT: u32 = 64;
pub const GL_MAP_COHERENT_BIT: u32 = 128;
pub const GL_DYNAMIC_STORAGE_BIT: u32 = 256;
pub const GL_CLIENT_STORAGE_BIT: u32 = 512;
pub const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT: u32 = 16384;
pub const GL_BUFFER_IMMUTABLE_STORAGE: u32 = 33311;
pub const GL_BUFFER_STORAGE_FLAGS: u32 = 33312;
pub const GL_CLEAR_TEXTURE: u32 = 37733;
pub const GL_LOCATION_COMPONENT: u32 = 37706;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_INDEX: u32 = 37707;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE: u32 = 37708;
pub const GL_QUERY_BUFFER: u32 = 37266;
pub const GL_QUERY_BUFFER_BARRIER_BIT: u32 = 32768;
pub const GL_QUERY_BUFFER_BINDING: u32 = 37267;
pub const GL_QUERY_RESULT_NO_WAIT: u32 = 37268;
pub const GL_MIRROR_CLAMP_TO_EDGE: u32 = 34627;
pub const GL_CONTEXT_LOST: u32 = 1287;
pub const GL_NEGATIVE_ONE_TO_ONE: u32 = 37726;
pub const GL_ZERO_TO_ONE: u32 = 37727;
pub const GL_CLIP_ORIGIN: u32 = 37724;
pub const GL_CLIP_DEPTH_MODE: u32 = 37725;
pub const GL_QUERY_WAIT_INVERTED: u32 = 36375;
pub const GL_QUERY_NO_WAIT_INVERTED: u32 = 36376;
pub const GL_QUERY_BY_REGION_WAIT_INVERTED: u32 = 36377;
pub const GL_QUERY_BY_REGION_NO_WAIT_INVERTED: u32 = 36378;
pub const GL_MAX_CULL_DISTANCES: u32 = 33529;
pub const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES: u32 = 33530;
pub const GL_TEXTURE_TARGET: u32 = 4102;
pub const GL_QUERY_TARGET: u32 = 33514;
pub const GL_GUILTY_CONTEXT_RESET: u32 = 33363;
pub const GL_INNOCENT_CONTEXT_RESET: u32 = 33364;
pub const GL_UNKNOWN_CONTEXT_RESET: u32 = 33365;
pub const GL_RESET_NOTIFICATION_STRATEGY: u32 = 33366;
pub const GL_LOSE_CONTEXT_ON_RESET: u32 = 33362;
pub const GL_NO_RESET_NOTIFICATION: u32 = 33377;
pub const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT: u32 = 4;
pub const GL_COLOR_TABLE: u32 = 32976;
pub const GL_POST_CONVOLUTION_COLOR_TABLE: u32 = 32977;
pub const GL_POST_COLOR_MATRIX_COLOR_TABLE: u32 = 32978;
pub const GL_PROXY_COLOR_TABLE: u32 = 32979;
pub const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE: u32 = 32980;
pub const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE: u32 = 32981;
pub const GL_CONVOLUTION_1D: u32 = 32784;
pub const GL_CONVOLUTION_2D: u32 = 32785;
pub const GL_SEPARABLE_2D: u32 = 32786;
pub const GL_HISTOGRAM: u32 = 32804;
pub const GL_PROXY_HISTOGRAM: u32 = 32805;
pub const GL_MINMAX: u32 = 32814;
pub const GL_CONTEXT_RELEASE_BEHAVIOR: u32 = 33531;
pub const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH: u32 = 33532;
pub const GL_SHADER_BINARY_FORMAT_SPIR_V: u32 = 38225;
pub const GL_SPIR_V_BINARY: u32 = 38226;
pub const GL_PARAMETER_BUFFER: u32 = 33006;
pub const GL_PARAMETER_BUFFER_BINDING: u32 = 33007;
pub const GL_CONTEXT_FLAG_NO_ERROR_BIT: u32 = 8;
pub const GL_VERTICES_SUBMITTED: u32 = 33518;
pub const GL_PRIMITIVES_SUBMITTED: u32 = 33519;
pub const GL_VERTEX_SHADER_INVOCATIONS: u32 = 33520;
pub const GL_TESS_CONTROL_SHADER_PATCHES: u32 = 33521;
pub const GL_TESS_EVALUATION_SHADER_INVOCATIONS: u32 = 33522;
pub const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED: u32 = 33523;
pub const GL_FRAGMENT_SHADER_INVOCATIONS: u32 = 33524;
pub const GL_COMPUTE_SHADER_INVOCATIONS: u32 = 33525;
pub const GL_CLIPPING_INPUT_PRIMITIVES: u32 = 33526;
pub const GL_CLIPPING_OUTPUT_PRIMITIVES: u32 = 33527;
pub const GL_POLYGON_OFFSET_CLAMP: u32 = 36379;
pub const GL_SPIR_V_EXTENSIONS: u32 = 38227;
pub const GL_NUM_SPIR_V_EXTENSIONS: u32 = 38228;
pub const GL_TEXTURE_MAX_ANISOTROPY: u32 = 34046;
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY: u32 = 34047;
pub const GL_TRANSFORM_FEEDBACK_OVERFLOW: u32 = 33516;
pub const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW: u32 = 33517;
pub const GL_VERSION_1_0: u32 = 1;
pub const GL_VERSION_1_1: u32 = 1;
pub const GL_VERSION_1_2: u32 = 1;
pub const GL_VERSION_1_3: u32 = 1;
pub const GL_VERSION_1_4: u32 = 1;
pub const GL_VERSION_1_5: u32 = 1;
pub const GL_VERSION_2_0: u32 = 1;
pub const GL_VERSION_2_1: u32 = 1;
pub const GL_VERSION_3_0: u32 = 1;
pub const GL_VERSION_3_1: u32 = 1;
pub const GL_VERSION_3_2: u32 = 1;
pub const GL_VERSION_3_3: u32 = 1;
pub const GL_VERSION_4_0: u32 = 1;
pub const GL_VERSION_4_1: u32 = 1;
pub const GL_VERSION_4_2: u32 = 1;
pub const GL_VERSION_4_3: u32 = 1;
pub const GL_VERSION_4_4: u32 = 1;
pub const GL_VERSION_4_5: u32 = 1;
pub const GL_VERSION_4_6: u32 = 1;
pub const GLFW_VERSION_MAJOR: u32 = 3;
pub const GLFW_VERSION_MINOR: u32 = 3;
pub const GLFW_VERSION_REVISION: u32 = 8;
pub const GLFW_TRUE: u32 = 1;
pub const GLFW_FALSE: u32 = 0;
pub const GLFW_RELEASE: u32 = 0;
pub const GLFW_PRESS: u32 = 1;
pub const GLFW_REPEAT: u32 = 2;
pub const GLFW_HAT_CENTERED: u32 = 0;
pub const GLFW_HAT_UP: u32 = 1;
pub const GLFW_HAT_RIGHT: u32 = 2;
pub const GLFW_HAT_DOWN: u32 = 4;
pub const GLFW_HAT_LEFT: u32 = 8;
pub const GLFW_HAT_RIGHT_UP: u32 = 3;
pub const GLFW_HAT_RIGHT_DOWN: u32 = 6;
pub const GLFW_HAT_LEFT_UP: u32 = 9;
pub const GLFW_HAT_LEFT_DOWN: u32 = 12;
pub const GLFW_KEY_UNKNOWN: i32 = -1;
pub const GLFW_KEY_SPACE: u32 = 32;
pub const GLFW_KEY_APOSTROPHE: u32 = 39;
pub const GLFW_KEY_COMMA: u32 = 44;
pub const GLFW_KEY_MINUS: u32 = 45;
pub const GLFW_KEY_PERIOD: u32 = 46;
pub const GLFW_KEY_SLASH: u32 = 47;
pub const GLFW_KEY_0: u32 = 48;
pub const GLFW_KEY_1: u32 = 49;
pub const GLFW_KEY_2: u32 = 50;
pub const GLFW_KEY_3: u32 = 51;
pub const GLFW_KEY_4: u32 = 52;
pub const GLFW_KEY_5: u32 = 53;
pub const GLFW_KEY_6: u32 = 54;
pub const GLFW_KEY_7: u32 = 55;
pub const GLFW_KEY_8: u32 = 56;
pub const GLFW_KEY_9: u32 = 57;
pub const GLFW_KEY_SEMICOLON: u32 = 59;
pub const GLFW_KEY_EQUAL: u32 = 61;
pub const GLFW_KEY_A: u32 = 65;
pub const GLFW_KEY_B: u32 = 66;
pub const GLFW_KEY_C: u32 = 67;
pub const GLFW_KEY_D: u32 = 68;
pub const GLFW_KEY_E: u32 = 69;
pub const GLFW_KEY_F: u32 = 70;
pub const GLFW_KEY_G: u32 = 71;
pub const GLFW_KEY_H: u32 = 72;
pub const GLFW_KEY_I: u32 = 73;
pub const GLFW_KEY_J: u32 = 74;
pub const GLFW_KEY_K: u32 = 75;
pub const GLFW_KEY_L: u32 = 76;
pub const GLFW_KEY_M: u32 = 77;
pub const GLFW_KEY_N: u32 = 78;
pub const GLFW_KEY_O: u32 = 79;
pub const GLFW_KEY_P: u32 = 80;
pub const GLFW_KEY_Q: u32 = 81;
pub const GLFW_KEY_R: u32 = 82;
pub const GLFW_KEY_S: u32 = 83;
pub const GLFW_KEY_T: u32 = 84;
pub const GLFW_KEY_U: u32 = 85;
pub const GLFW_KEY_V: u32 = 86;
pub const GLFW_KEY_W: u32 = 87;
pub const GLFW_KEY_X: u32 = 88;
pub const GLFW_KEY_Y: u32 = 89;
pub const GLFW_KEY_Z: u32 = 90;
pub const GLFW_KEY_LEFT_BRACKET: u32 = 91;
pub const GLFW_KEY_BACKSLASH: u32 = 92;
pub const GLFW_KEY_RIGHT_BRACKET: u32 = 93;
pub const GLFW_KEY_GRAVE_ACCENT: u32 = 96;
pub const GLFW_KEY_WORLD_1: u32 = 161;
pub const GLFW_KEY_WORLD_2: u32 = 162;
pub const GLFW_KEY_ESCAPE: u32 = 256;
pub const GLFW_KEY_ENTER: u32 = 257;
pub const GLFW_KEY_TAB: u32 = 258;
pub const GLFW_KEY_BACKSPACE: u32 = 259;
pub const GLFW_KEY_INSERT: u32 = 260;
pub const GLFW_KEY_DELETE: u32 = 261;
pub const GLFW_KEY_RIGHT: u32 = 262;
pub const GLFW_KEY_LEFT: u32 = 263;
pub const GLFW_KEY_DOWN: u32 = 264;
pub const GLFW_KEY_UP: u32 = 265;
pub const GLFW_KEY_PAGE_UP: u32 = 266;
pub const GLFW_KEY_PAGE_DOWN: u32 = 267;
pub const GLFW_KEY_HOME: u32 = 268;
pub const GLFW_KEY_END: u32 = 269;
pub const GLFW_KEY_CAPS_LOCK: u32 = 280;
pub const GLFW_KEY_SCROLL_LOCK: u32 = 281;
pub const GLFW_KEY_NUM_LOCK: u32 = 282;
pub const GLFW_KEY_PRINT_SCREEN: u32 = 283;
pub const GLFW_KEY_PAUSE: u32 = 284;
pub const GLFW_KEY_F1: u32 = 290;
pub const GLFW_KEY_F2: u32 = 291;
pub const GLFW_KEY_F3: u32 = 292;
pub const GLFW_KEY_F4: u32 = 293;
pub const GLFW_KEY_F5: u32 = 294;
pub const GLFW_KEY_F6: u32 = 295;
pub const GLFW_KEY_F7: u32 = 296;
pub const GLFW_KEY_F8: u32 = 297;
pub const GLFW_KEY_F9: u32 = 298;
pub const GLFW_KEY_F10: u32 = 299;
pub const GLFW_KEY_F11: u32 = 300;
pub const GLFW_KEY_F12: u32 = 301;
pub const GLFW_KEY_F13: u32 = 302;
pub const GLFW_KEY_F14: u32 = 303;
pub const GLFW_KEY_F15: u32 = 304;
pub const GLFW_KEY_F16: u32 = 305;
pub const GLFW_KEY_F17: u32 = 306;
pub const GLFW_KEY_F18: u32 = 307;
pub const GLFW_KEY_F19: u32 = 308;
pub const GLFW_KEY_F20: u32 = 309;
pub const GLFW_KEY_F21: u32 = 310;
pub const GLFW_KEY_F22: u32 = 311;
pub const GLFW_KEY_F23: u32 = 312;
pub const GLFW_KEY_F24: u32 = 313;
pub const GLFW_KEY_F25: u32 = 314;
pub const GLFW_KEY_KP_0: u32 = 320;
pub const GLFW_KEY_KP_1: u32 = 321;
pub const GLFW_KEY_KP_2: u32 = 322;
pub const GLFW_KEY_KP_3: u32 = 323;
pub const GLFW_KEY_KP_4: u32 = 324;
pub const GLFW_KEY_KP_5: u32 = 325;
pub const GLFW_KEY_KP_6: u32 = 326;
pub const GLFW_KEY_KP_7: u32 = 327;
pub const GLFW_KEY_KP_8: u32 = 328;
pub const GLFW_KEY_KP_9: u32 = 329;
pub const GLFW_KEY_KP_DECIMAL: u32 = 330;
pub const GLFW_KEY_KP_DIVIDE: u32 = 331;
pub const GLFW_KEY_KP_MULTIPLY: u32 = 332;
pub const GLFW_KEY_KP_SUBTRACT: u32 = 333;
pub const GLFW_KEY_KP_ADD: u32 = 334;
pub const GLFW_KEY_KP_ENTER: u32 = 335;
pub const GLFW_KEY_KP_EQUAL: u32 = 336;
pub const GLFW_KEY_LEFT_SHIFT: u32 = 340;
pub const GLFW_KEY_LEFT_CONTROL: u32 = 341;
pub const GLFW_KEY_LEFT_ALT: u32 = 342;
pub const GLFW_KEY_LEFT_SUPER: u32 = 343;
pub const GLFW_KEY_RIGHT_SHIFT: u32 = 344;
pub const GLFW_KEY_RIGHT_CONTROL: u32 = 345;
pub const GLFW_KEY_RIGHT_ALT: u32 = 346;
pub const GLFW_KEY_RIGHT_SUPER: u32 = 347;
pub const GLFW_KEY_MENU: u32 = 348;
pub const GLFW_KEY_LAST: u32 = 348;
pub const GLFW_MOD_SHIFT: u32 = 1;
pub const GLFW_MOD_CONTROL: u32 = 2;
pub const GLFW_MOD_ALT: u32 = 4;
pub const GLFW_MOD_SUPER: u32 = 8;
pub const GLFW_MOD_CAPS_LOCK: u32 = 16;
pub const GLFW_MOD_NUM_LOCK: u32 = 32;
pub const GLFW_MOUSE_BUTTON_1: u32 = 0;
pub const GLFW_MOUSE_BUTTON_2: u32 = 1;
pub const GLFW_MOUSE_BUTTON_3: u32 = 2;
pub const GLFW_MOUSE_BUTTON_4: u32 = 3;
pub const GLFW_MOUSE_BUTTON_5: u32 = 4;
pub const GLFW_MOUSE_BUTTON_6: u32 = 5;
pub const GLFW_MOUSE_BUTTON_7: u32 = 6;
pub const GLFW_MOUSE_BUTTON_8: u32 = 7;
pub const GLFW_MOUSE_BUTTON_LAST: u32 = 7;
pub const GLFW_MOUSE_BUTTON_LEFT: u32 = 0;
pub const GLFW_MOUSE_BUTTON_RIGHT: u32 = 1;
pub const GLFW_MOUSE_BUTTON_MIDDLE: u32 = 2;
pub const GLFW_JOYSTICK_1: u32 = 0;
pub const GLFW_JOYSTICK_2: u32 = 1;
pub const GLFW_JOYSTICK_3: u32 = 2;
pub const GLFW_JOYSTICK_4: u32 = 3;
pub const GLFW_JOYSTICK_5: u32 = 4;
pub const GLFW_JOYSTICK_6: u32 = 5;
pub const GLFW_JOYSTICK_7: u32 = 6;
pub const GLFW_JOYSTICK_8: u32 = 7;
pub const GLFW_JOYSTICK_9: u32 = 8;
pub const GLFW_JOYSTICK_10: u32 = 9;
pub const GLFW_JOYSTICK_11: u32 = 10;
pub const GLFW_JOYSTICK_12: u32 = 11;
pub const GLFW_JOYSTICK_13: u32 = 12;
pub const GLFW_JOYSTICK_14: u32 = 13;
pub const GLFW_JOYSTICK_15: u32 = 14;
pub const GLFW_JOYSTICK_16: u32 = 15;
pub const GLFW_JOYSTICK_LAST: u32 = 15;
pub const GLFW_GAMEPAD_BUTTON_A: u32 = 0;
pub const GLFW_GAMEPAD_BUTTON_B: u32 = 1;
pub const GLFW_GAMEPAD_BUTTON_X: u32 = 2;
pub const GLFW_GAMEPAD_BUTTON_Y: u32 = 3;
pub const GLFW_GAMEPAD_BUTTON_LEFT_BUMPER: u32 = 4;
pub const GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER: u32 = 5;
pub const GLFW_GAMEPAD_BUTTON_BACK: u32 = 6;
pub const GLFW_GAMEPAD_BUTTON_START: u32 = 7;
pub const GLFW_GAMEPAD_BUTTON_GUIDE: u32 = 8;
pub const GLFW_GAMEPAD_BUTTON_LEFT_THUMB: u32 = 9;
pub const GLFW_GAMEPAD_BUTTON_RIGHT_THUMB: u32 = 10;
pub const GLFW_GAMEPAD_BUTTON_DPAD_UP: u32 = 11;
pub const GLFW_GAMEPAD_BUTTON_DPAD_RIGHT: u32 = 12;
pub const GLFW_GAMEPAD_BUTTON_DPAD_DOWN: u32 = 13;
pub const GLFW_GAMEPAD_BUTTON_DPAD_LEFT: u32 = 14;
pub const GLFW_GAMEPAD_BUTTON_LAST: u32 = 14;
pub const GLFW_GAMEPAD_BUTTON_CROSS: u32 = 0;
pub const GLFW_GAMEPAD_BUTTON_CIRCLE: u32 = 1;
pub const GLFW_GAMEPAD_BUTTON_SQUARE: u32 = 2;
pub const GLFW_GAMEPAD_BUTTON_TRIANGLE: u32 = 3;
pub const GLFW_GAMEPAD_AXIS_LEFT_X: u32 = 0;
pub const GLFW_GAMEPAD_AXIS_LEFT_Y: u32 = 1;
pub const GLFW_GAMEPAD_AXIS_RIGHT_X: u32 = 2;
pub const GLFW_GAMEPAD_AXIS_RIGHT_Y: u32 = 3;
pub const GLFW_GAMEPAD_AXIS_LEFT_TRIGGER: u32 = 4;
pub const GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER: u32 = 5;
pub const GLFW_GAMEPAD_AXIS_LAST: u32 = 5;
pub const GLFW_NO_ERROR: u32 = 0;
pub const GLFW_NOT_INITIALIZED: u32 = 65537;
pub const GLFW_NO_CURRENT_CONTEXT: u32 = 65538;
pub const GLFW_INVALID_ENUM: u32 = 65539;
pub const GLFW_INVALID_VALUE: u32 = 65540;
pub const GLFW_OUT_OF_MEMORY: u32 = 65541;
pub const GLFW_API_UNAVAILABLE: u32 = 65542;
pub const GLFW_VERSION_UNAVAILABLE: u32 = 65543;
pub const GLFW_PLATFORM_ERROR: u32 = 65544;
pub const GLFW_FORMAT_UNAVAILABLE: u32 = 65545;
pub const GLFW_NO_WINDOW_CONTEXT: u32 = 65546;
pub const GLFW_FOCUSED: u32 = 131073;
pub const GLFW_ICONIFIED: u32 = 131074;
pub const GLFW_RESIZABLE: u32 = 131075;
pub const GLFW_VISIBLE: u32 = 131076;
pub const GLFW_DECORATED: u32 = 131077;
pub const GLFW_AUTO_ICONIFY: u32 = 131078;
pub const GLFW_FLOATING: u32 = 131079;
pub const GLFW_MAXIMIZED: u32 = 131080;
pub const GLFW_CENTER_CURSOR: u32 = 131081;
pub const GLFW_TRANSPARENT_FRAMEBUFFER: u32 = 131082;
pub const GLFW_HOVERED: u32 = 131083;
pub const GLFW_FOCUS_ON_SHOW: u32 = 131084;
pub const GLFW_RED_BITS: u32 = 135169;
pub const GLFW_GREEN_BITS: u32 = 135170;
pub const GLFW_BLUE_BITS: u32 = 135171;
pub const GLFW_ALPHA_BITS: u32 = 135172;
pub const GLFW_DEPTH_BITS: u32 = 135173;
pub const GLFW_STENCIL_BITS: u32 = 135174;
pub const GLFW_ACCUM_RED_BITS: u32 = 135175;
pub const GLFW_ACCUM_GREEN_BITS: u32 = 135176;
pub const GLFW_ACCUM_BLUE_BITS: u32 = 135177;
pub const GLFW_ACCUM_ALPHA_BITS: u32 = 135178;
pub const GLFW_AUX_BUFFERS: u32 = 135179;
pub const GLFW_STEREO: u32 = 135180;
pub const GLFW_SAMPLES: u32 = 135181;
pub const GLFW_SRGB_CAPABLE: u32 = 135182;
pub const GLFW_REFRESH_RATE: u32 = 135183;
pub const GLFW_DOUBLEBUFFER: u32 = 135184;
pub const GLFW_CLIENT_API: u32 = 139265;
pub const GLFW_CONTEXT_VERSION_MAJOR: u32 = 139266;
pub const GLFW_CONTEXT_VERSION_MINOR: u32 = 139267;
pub const GLFW_CONTEXT_REVISION: u32 = 139268;
pub const GLFW_CONTEXT_ROBUSTNESS: u32 = 139269;
pub const GLFW_OPENGL_FORWARD_COMPAT: u32 = 139270;
pub const GLFW_OPENGL_DEBUG_CONTEXT: u32 = 139271;
pub const GLFW_OPENGL_PROFILE: u32 = 139272;
pub const GLFW_CONTEXT_RELEASE_BEHAVIOR: u32 = 139273;
pub const GLFW_CONTEXT_NO_ERROR: u32 = 139274;
pub const GLFW_CONTEXT_CREATION_API: u32 = 139275;
pub const GLFW_SCALE_TO_MONITOR: u32 = 139276;
pub const GLFW_COCOA_RETINA_FRAMEBUFFER: u32 = 143361;
pub const GLFW_COCOA_FRAME_NAME: u32 = 143362;
pub const GLFW_COCOA_GRAPHICS_SWITCHING: u32 = 143363;
pub const GLFW_X11_CLASS_NAME: u32 = 147457;
pub const GLFW_X11_INSTANCE_NAME: u32 = 147458;
pub const GLFW_NO_API: u32 = 0;
pub const GLFW_OPENGL_API: u32 = 196609;
pub const GLFW_OPENGL_ES_API: u32 = 196610;
pub const GLFW_NO_ROBUSTNESS: u32 = 0;
pub const GLFW_NO_RESET_NOTIFICATION: u32 = 200705;
pub const GLFW_LOSE_CONTEXT_ON_RESET: u32 = 200706;
pub const GLFW_OPENGL_ANY_PROFILE: u32 = 0;
pub const GLFW_OPENGL_CORE_PROFILE: u32 = 204801;
pub const GLFW_OPENGL_COMPAT_PROFILE: u32 = 204802;
pub const GLFW_CURSOR: u32 = 208897;
pub const GLFW_STICKY_KEYS: u32 = 208898;
pub const GLFW_STICKY_MOUSE_BUTTONS: u32 = 208899;
pub const GLFW_LOCK_KEY_MODS: u32 = 208900;
pub const GLFW_RAW_MOUSE_MOTION: u32 = 208901;
pub const GLFW_CURSOR_NORMAL: u32 = 212993;
pub const GLFW_CURSOR_HIDDEN: u32 = 212994;
pub const GLFW_CURSOR_DISABLED: u32 = 212995;
pub const GLFW_ANY_RELEASE_BEHAVIOR: u32 = 0;
pub const GLFW_RELEASE_BEHAVIOR_FLUSH: u32 = 217089;
pub const GLFW_RELEASE_BEHAVIOR_NONE: u32 = 217090;
pub const GLFW_NATIVE_CONTEXT_API: u32 = 221185;
pub const GLFW_EGL_CONTEXT_API: u32 = 221186;
pub const GLFW_OSMESA_CONTEXT_API: u32 = 221187;
pub const GLFW_ARROW_CURSOR: u32 = 221185;
pub const GLFW_IBEAM_CURSOR: u32 = 221186;
pub const GLFW_CROSSHAIR_CURSOR: u32 = 221187;
pub const GLFW_HAND_CURSOR: u32 = 221188;
pub const GLFW_HRESIZE_CURSOR: u32 = 221189;
pub const GLFW_VRESIZE_CURSOR: u32 = 221190;
pub const GLFW_CONNECTED: u32 = 262145;
pub const GLFW_DISCONNECTED: u32 = 262146;
pub const GLFW_JOYSTICK_HAT_BUTTONS: u32 = 327681;
pub const GLFW_COCOA_CHDIR_RESOURCES: u32 = 331777;
pub const GLFW_COCOA_MENUBAR: u32 = 331778;
pub const GLFW_DONT_CARE: i32 = -1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gladGLversionStruct {
    pub major: ::std::os::raw::c_int,
    pub minor: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_gladGLversionStruct() {
    const UNINIT: ::std::mem::MaybeUninit<gladGLversionStruct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<gladGLversionStruct>(),
        8usize,
        concat!("Size of: ", stringify!(gladGLversionStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<gladGLversionStruct>(),
        4usize,
        concat!("Alignment of ", stringify!(gladGLversionStruct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gladGLversionStruct),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(gladGLversionStruct),
            "::",
            stringify!(minor)
        )
    );
}
pub type GLADloadproc = ::std::option::Option<
    unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void,
>;
extern "C" {
    pub static mut GLVersion: gladGLversionStruct;
}
extern "C" {
    pub fn gladLoadGL() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gladLoadGLLoader(arg1: GLADloadproc) -> ::std::os::raw::c_int;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type khronos_int32_t = i32;
pub type khronos_uint32_t = u32;
pub type khronos_int64_t = i64;
pub type khronos_uint64_t = u64;
pub type khronos_int8_t = ::std::os::raw::c_schar;
pub type khronos_uint8_t = ::std::os::raw::c_uchar;
pub type khronos_int16_t = ::std::os::raw::c_short;
pub type khronos_uint16_t = ::std::os::raw::c_ushort;
pub type khronos_intptr_t = ::std::os::raw::c_long;
pub type khronos_uintptr_t = ::std::os::raw::c_ulong;
pub type khronos_ssize_t = ::std::os::raw::c_long;
pub type khronos_usize_t = ::std::os::raw::c_ulong;
pub type khronos_float_t = f32;
pub type khronos_utime_nanoseconds_t = khronos_uint64_t;
pub type khronos_stime_nanoseconds_t = khronos_int64_t;
pub const khronos_boolean_enum_t_KHRONOS_FALSE: khronos_boolean_enum_t = 0;
pub const khronos_boolean_enum_t_KHRONOS_TRUE: khronos_boolean_enum_t = 1;
pub const khronos_boolean_enum_t_KHRONOS_BOOLEAN_ENUM_FORCE_SIZE: khronos_boolean_enum_t =
    2147483647;
pub type khronos_boolean_enum_t = ::std::os::raw::c_uint;
pub type GLenum = ::std::os::raw::c_uint;
pub type GLboolean = ::std::os::raw::c_uchar;
pub type GLbitfield = ::std::os::raw::c_uint;
pub type GLvoid = ::std::os::raw::c_void;
pub type GLbyte = khronos_int8_t;
pub type GLubyte = khronos_uint8_t;
pub type GLshort = khronos_int16_t;
pub type GLushort = khronos_uint16_t;
pub type GLint = ::std::os::raw::c_int;
pub type GLuint = ::std::os::raw::c_uint;
pub type GLclampx = khronos_int32_t;
pub type GLsizei = ::std::os::raw::c_int;
pub type GLfloat = khronos_float_t;
pub type GLclampf = khronos_float_t;
pub type GLdouble = f64;
pub type GLclampd = f64;
pub type GLeglClientBufferEXT = *mut ::std::os::raw::c_void;
pub type GLeglImageOES = *mut ::std::os::raw::c_void;
pub type GLchar = ::std::os::raw::c_char;
pub type GLcharARB = ::std::os::raw::c_char;
pub type GLhandleARB = ::std::os::raw::c_uint;
pub type GLhalf = khronos_uint16_t;
pub type GLhalfARB = khronos_uint16_t;
pub type GLfixed = khronos_int32_t;
pub type GLintptr = khronos_intptr_t;
pub type GLintptrARB = khronos_intptr_t;
pub type GLsizeiptr = khronos_ssize_t;
pub type GLsizeiptrARB = khronos_ssize_t;
pub type GLint64 = khronos_int64_t;
pub type GLint64EXT = khronos_int64_t;
pub type GLuint64 = khronos_uint64_t;
pub type GLuint64EXT = khronos_uint64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __GLsync {
    _unused: [u8; 0],
}
pub type GLsync = *mut __GLsync;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_event {
    _unused: [u8; 0],
}
pub type GLDEBUGPROC = ::std::option::Option<
    unsafe extern "C" fn(
        source: GLenum,
        type_: GLenum,
        id: GLuint,
        severity: GLenum,
        length: GLsizei,
        message: *const GLchar,
        userParam: *const ::std::os::raw::c_void,
    ),
>;
pub type GLDEBUGPROCARB = ::std::option::Option<
    unsafe extern "C" fn(
        source: GLenum,
        type_: GLenum,
        id: GLuint,
        severity: GLenum,
        length: GLsizei,
        message: *const GLchar,
        userParam: *const ::std::os::raw::c_void,
    ),
>;
pub type GLDEBUGPROCKHR = ::std::option::Option<
    unsafe extern "C" fn(
        source: GLenum,
        type_: GLenum,
        id: GLuint,
        severity: GLenum,
        length: GLsizei,
        message: *const GLchar,
        userParam: *const ::std::os::raw::c_void,
    ),
>;
pub type GLDEBUGPROCAMD = ::std::option::Option<
    unsafe extern "C" fn(
        id: GLuint,
        category: GLenum,
        severity: GLenum,
        length: GLsizei,
        message: *const GLchar,
        userParam: *mut ::std::os::raw::c_void,
    ),
>;
pub type GLhalfNV = ::std::os::raw::c_ushort;
pub type GLvdpauSurfaceNV = GLintptr;
pub type GLVULKANPROCNV = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub static mut GLAD_GL_VERSION_1_0: ::std::os::raw::c_int;
}
pub type PFNGLCULLFACEPROC = ::std::option::Option<unsafe extern "C" fn(mode: GLenum)>;
extern "C" {
    pub static mut glad_glCullFace: PFNGLCULLFACEPROC;
}
pub type PFNGLFRONTFACEPROC = ::std::option::Option<unsafe extern "C" fn(mode: GLenum)>;
extern "C" {
    pub static mut glad_glFrontFace: PFNGLFRONTFACEPROC;
}
pub type PFNGLHINTPROC = ::std::option::Option<unsafe extern "C" fn(target: GLenum, mode: GLenum)>;
extern "C" {
    pub static mut glad_glHint: PFNGLHINTPROC;
}
pub type PFNGLLINEWIDTHPROC = ::std::option::Option<unsafe extern "C" fn(width: GLfloat)>;
extern "C" {
    pub static mut glad_glLineWidth: PFNGLLINEWIDTHPROC;
}
pub type PFNGLPOINTSIZEPROC = ::std::option::Option<unsafe extern "C" fn(size: GLfloat)>;
extern "C" {
    pub static mut glad_glPointSize: PFNGLPOINTSIZEPROC;
}
pub type PFNGLPOLYGONMODEPROC =
    ::std::option::Option<unsafe extern "C" fn(face: GLenum, mode: GLenum)>;
extern "C" {
    pub static mut glad_glPolygonMode: PFNGLPOLYGONMODEPROC;
}
pub type PFNGLSCISSORPROC = ::std::option::Option<
    unsafe extern "C" fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei),
>;
extern "C" {
    pub static mut glad_glScissor: PFNGLSCISSORPROC;
}
pub type PFNGLTEXPARAMETERFPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, param: GLfloat)>;
extern "C" {
    pub static mut glad_glTexParameterf: PFNGLTEXPARAMETERFPROC;
}
pub type PFNGLTEXPARAMETERFVPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLfloat),
>;
extern "C" {
    pub static mut glad_glTexParameterfv: PFNGLTEXPARAMETERFVPROC;
}
pub type PFNGLTEXPARAMETERIPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, param: GLint)>;
extern "C" {
    pub static mut glad_glTexParameteri: PFNGLTEXPARAMETERIPROC;
}
pub type PFNGLTEXPARAMETERIVPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLint),
>;
extern "C" {
    pub static mut glad_glTexParameteriv: PFNGLTEXPARAMETERIVPROC;
}
pub type PFNGLTEXIMAGE1DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLint,
        width: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glTexImage1D: PFNGLTEXIMAGE1DPROC;
}
pub type PFNGLTEXIMAGE2DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLint,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glTexImage2D: PFNGLTEXIMAGE2DPROC;
}
pub type PFNGLDRAWBUFFERPROC = ::std::option::Option<unsafe extern "C" fn(buf: GLenum)>;
extern "C" {
    pub static mut glad_glDrawBuffer: PFNGLDRAWBUFFERPROC;
}
pub type PFNGLCLEARPROC = ::std::option::Option<unsafe extern "C" fn(mask: GLbitfield)>;
extern "C" {
    pub static mut glad_glClear: PFNGLCLEARPROC;
}
pub type PFNGLCLEARCOLORPROC = ::std::option::Option<
    unsafe extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat),
>;
extern "C" {
    pub static mut glad_glClearColor: PFNGLCLEARCOLORPROC;
}
pub type PFNGLCLEARSTENCILPROC = ::std::option::Option<unsafe extern "C" fn(s: GLint)>;
extern "C" {
    pub static mut glad_glClearStencil: PFNGLCLEARSTENCILPROC;
}
pub type PFNGLCLEARDEPTHPROC = ::std::option::Option<unsafe extern "C" fn(depth: GLdouble)>;
extern "C" {
    pub static mut glad_glClearDepth: PFNGLCLEARDEPTHPROC;
}
pub type PFNGLSTENCILMASKPROC = ::std::option::Option<unsafe extern "C" fn(mask: GLuint)>;
extern "C" {
    pub static mut glad_glStencilMask: PFNGLSTENCILMASKPROC;
}
pub type PFNGLCOLORMASKPROC = ::std::option::Option<
    unsafe extern "C" fn(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean),
>;
extern "C" {
    pub static mut glad_glColorMask: PFNGLCOLORMASKPROC;
}
pub type PFNGLDEPTHMASKPROC = ::std::option::Option<unsafe extern "C" fn(flag: GLboolean)>;
extern "C" {
    pub static mut glad_glDepthMask: PFNGLDEPTHMASKPROC;
}
pub type PFNGLDISABLEPROC = ::std::option::Option<unsafe extern "C" fn(cap: GLenum)>;
extern "C" {
    pub static mut glad_glDisable: PFNGLDISABLEPROC;
}
pub type PFNGLENABLEPROC = ::std::option::Option<unsafe extern "C" fn(cap: GLenum)>;
extern "C" {
    pub static mut glad_glEnable: PFNGLENABLEPROC;
}
pub type PFNGLFINISHPROC = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub static mut glad_glFinish: PFNGLFINISHPROC;
}
pub type PFNGLFLUSHPROC = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub static mut glad_glFlush: PFNGLFLUSHPROC;
}
pub type PFNGLBLENDFUNCPROC =
    ::std::option::Option<unsafe extern "C" fn(sfactor: GLenum, dfactor: GLenum)>;
extern "C" {
    pub static mut glad_glBlendFunc: PFNGLBLENDFUNCPROC;
}
pub type PFNGLLOGICOPPROC = ::std::option::Option<unsafe extern "C" fn(opcode: GLenum)>;
extern "C" {
    pub static mut glad_glLogicOp: PFNGLLOGICOPPROC;
}
pub type PFNGLSTENCILFUNCPROC =
    ::std::option::Option<unsafe extern "C" fn(func: GLenum, ref_: GLint, mask: GLuint)>;
extern "C" {
    pub static mut glad_glStencilFunc: PFNGLSTENCILFUNCPROC;
}
pub type PFNGLSTENCILOPPROC =
    ::std::option::Option<unsafe extern "C" fn(fail: GLenum, zfail: GLenum, zpass: GLenum)>;
extern "C" {
    pub static mut glad_glStencilOp: PFNGLSTENCILOPPROC;
}
pub type PFNGLDEPTHFUNCPROC = ::std::option::Option<unsafe extern "C" fn(func: GLenum)>;
extern "C" {
    pub static mut glad_glDepthFunc: PFNGLDEPTHFUNCPROC;
}
pub type PFNGLPIXELSTOREFPROC =
    ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLfloat)>;
extern "C" {
    pub static mut glad_glPixelStoref: PFNGLPIXELSTOREFPROC;
}
pub type PFNGLPIXELSTOREIPROC =
    ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLint)>;
extern "C" {
    pub static mut glad_glPixelStorei: PFNGLPIXELSTOREIPROC;
}
pub type PFNGLREADBUFFERPROC = ::std::option::Option<unsafe extern "C" fn(src: GLenum)>;
extern "C" {
    pub static mut glad_glReadBuffer: PFNGLREADBUFFERPROC;
}
pub type PFNGLREADPIXELSPROC = ::std::option::Option<
    unsafe extern "C" fn(
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glReadPixels: PFNGLREADPIXELSPROC;
}
pub type PFNGLGETBOOLEANVPROC =
    ::std::option::Option<unsafe extern "C" fn(pname: GLenum, data: *mut GLboolean)>;
extern "C" {
    pub static mut glad_glGetBooleanv: PFNGLGETBOOLEANVPROC;
}
pub type PFNGLGETDOUBLEVPROC =
    ::std::option::Option<unsafe extern "C" fn(pname: GLenum, data: *mut GLdouble)>;
extern "C" {
    pub static mut glad_glGetDoublev: PFNGLGETDOUBLEVPROC;
}
pub type PFNGLGETERRORPROC = ::std::option::Option<unsafe extern "C" fn() -> GLenum>;
extern "C" {
    pub static mut glad_glGetError: PFNGLGETERRORPROC;
}
pub type PFNGLGETFLOATVPROC =
    ::std::option::Option<unsafe extern "C" fn(pname: GLenum, data: *mut GLfloat)>;
extern "C" {
    pub static mut glad_glGetFloatv: PFNGLGETFLOATVPROC;
}
pub type PFNGLGETINTEGERVPROC =
    ::std::option::Option<unsafe extern "C" fn(pname: GLenum, data: *mut GLint)>;
extern "C" {
    pub static mut glad_glGetIntegerv: PFNGLGETINTEGERVPROC;
}
pub type PFNGLGETSTRINGPROC =
    ::std::option::Option<unsafe extern "C" fn(name: GLenum) -> *const GLubyte>;
extern "C" {
    pub static mut glad_glGetString: PFNGLGETSTRINGPROC;
}
pub type PFNGLGETTEXIMAGEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glGetTexImage: PFNGLGETTEXIMAGEPROC;
}
pub type PFNGLGETTEXPARAMETERFVPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLfloat),
>;
extern "C" {
    pub static mut glad_glGetTexParameterfv: PFNGLGETTEXPARAMETERFVPROC;
}
pub type PFNGLGETTEXPARAMETERIVPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
extern "C" {
    pub static mut glad_glGetTexParameteriv: PFNGLGETTEXPARAMETERIVPROC;
}
pub type PFNGLGETTEXLEVELPARAMETERFVPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, level: GLint, pname: GLenum, params: *mut GLfloat),
>;
extern "C" {
    pub static mut glad_glGetTexLevelParameterfv: PFNGLGETTEXLEVELPARAMETERFVPROC;
}
pub type PFNGLGETTEXLEVELPARAMETERIVPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, level: GLint, pname: GLenum, params: *mut GLint),
>;
extern "C" {
    pub static mut glad_glGetTexLevelParameteriv: PFNGLGETTEXLEVELPARAMETERIVPROC;
}
pub type PFNGLISENABLEDPROC = ::std::option::Option<unsafe extern "C" fn(cap: GLenum) -> GLboolean>;
extern "C" {
    pub static mut glad_glIsEnabled: PFNGLISENABLEDPROC;
}
pub type PFNGLDEPTHRANGEPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLdouble, f: GLdouble)>;
extern "C" {
    pub static mut glad_glDepthRange: PFNGLDEPTHRANGEPROC;
}
pub type PFNGLVIEWPORTPROC = ::std::option::Option<
    unsafe extern "C" fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei),
>;
extern "C" {
    pub static mut glad_glViewport: PFNGLVIEWPORTPROC;
}
extern "C" {
    pub static mut GLAD_GL_VERSION_1_1: ::std::os::raw::c_int;
}
pub type PFNGLDRAWARRAYSPROC =
    ::std::option::Option<unsafe extern "C" fn(mode: GLenum, first: GLint, count: GLsizei)>;
extern "C" {
    pub static mut glad_glDrawArrays: PFNGLDRAWARRAYSPROC;
}
pub type PFNGLDRAWELEMENTSPROC = ::std::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glDrawElements: PFNGLDRAWELEMENTSPROC;
}
pub type PFNGLPOLYGONOFFSETPROC =
    ::std::option::Option<unsafe extern "C" fn(factor: GLfloat, units: GLfloat)>;
extern "C" {
    pub static mut glad_glPolygonOffset: PFNGLPOLYGONOFFSETPROC;
}
pub type PFNGLCOPYTEXIMAGE1DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        border: GLint,
    ),
>;
extern "C" {
    pub static mut glad_glCopyTexImage1D: PFNGLCOPYTEXIMAGE1DPROC;
}
pub type PFNGLCOPYTEXIMAGE2DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
    ),
>;
extern "C" {
    pub static mut glad_glCopyTexImage2D: PFNGLCOPYTEXIMAGE2DPROC;
}
pub type PFNGLCOPYTEXSUBIMAGE1DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glCopyTexSubImage1D: PFNGLCOPYTEXSUBIMAGE1DPROC;
}
pub type PFNGLCOPYTEXSUBIMAGE2DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glCopyTexSubImage2D: PFNGLCOPYTEXSUBIMAGE2DPROC;
}
pub type PFNGLTEXSUBIMAGE1DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        width: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glTexSubImage1D: PFNGLTEXSUBIMAGE1DPROC;
}
pub type PFNGLTEXSUBIMAGE2DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glTexSubImage2D: PFNGLTEXSUBIMAGE2DPROC;
}
pub type PFNGLBINDTEXTUREPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, texture: GLuint)>;
extern "C" {
    pub static mut glad_glBindTexture: PFNGLBINDTEXTUREPROC;
}
pub type PFNGLDELETETEXTURESPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, textures: *const GLuint)>;
extern "C" {
    pub static mut glad_glDeleteTextures: PFNGLDELETETEXTURESPROC;
}
pub type PFNGLGENTEXTURESPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, textures: *mut GLuint)>;
extern "C" {
    pub static mut glad_glGenTextures: PFNGLGENTEXTURESPROC;
}
pub type PFNGLISTEXTUREPROC =
    ::std::option::Option<unsafe extern "C" fn(texture: GLuint) -> GLboolean>;
extern "C" {
    pub static mut glad_glIsTexture: PFNGLISTEXTUREPROC;
}
extern "C" {
    pub static mut GLAD_GL_VERSION_1_2: ::std::os::raw::c_int;
}
pub type PFNGLDRAWRANGEELEMENTSPROC = ::std::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        start: GLuint,
        end: GLuint,
        count: GLsizei,
        type_: GLenum,
        indices: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glDrawRangeElements: PFNGLDRAWRANGEELEMENTSPROC;
}
pub type PFNGLTEXIMAGE3DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glTexImage3D: PFNGLTEXIMAGE3DPROC;
}
pub type PFNGLTEXSUBIMAGE3DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glTexSubImage3D: PFNGLTEXSUBIMAGE3DPROC;
}
pub type PFNGLCOPYTEXSUBIMAGE3DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glCopyTexSubImage3D: PFNGLCOPYTEXSUBIMAGE3DPROC;
}
extern "C" {
    pub static mut GLAD_GL_VERSION_1_3: ::std::os::raw::c_int;
}
pub type PFNGLACTIVETEXTUREPROC = ::std::option::Option<unsafe extern "C" fn(texture: GLenum)>;
extern "C" {
    pub static mut glad_glActiveTexture: PFNGLACTIVETEXTUREPROC;
}
pub type PFNGLSAMPLECOVERAGEPROC =
    ::std::option::Option<unsafe extern "C" fn(value: GLfloat, invert: GLboolean)>;
extern "C" {
    pub static mut glad_glSampleCoverage: PFNGLSAMPLECOVERAGEPROC;
}
pub type PFNGLCOMPRESSEDTEXIMAGE3DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        data: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glCompressedTexImage3D: PFNGLCOMPRESSEDTEXIMAGE3DPROC;
}
pub type PFNGLCOMPRESSEDTEXIMAGE2DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        data: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glCompressedTexImage2D: PFNGLCOMPRESSEDTEXIMAGE2DPROC;
}
pub type PFNGLCOMPRESSEDTEXIMAGE1DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        data: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glCompressedTexImage1D: PFNGLCOMPRESSEDTEXIMAGE1DPROC;
}
pub type PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glCompressedTexSubImage3D: PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC;
}
pub type PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glCompressedTexSubImage2D: PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC;
}
pub type PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        width: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glCompressedTexSubImage1D: PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC;
}
pub type PFNGLGETCOMPRESSEDTEXIMAGEPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, level: GLint, img: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub static mut glad_glGetCompressedTexImage: PFNGLGETCOMPRESSEDTEXIMAGEPROC;
}
extern "C" {
    pub static mut GLAD_GL_VERSION_1_4: ::std::os::raw::c_int;
}
pub type PFNGLBLENDFUNCSEPARATEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        sfactorRGB: GLenum,
        dfactorRGB: GLenum,
        sfactorAlpha: GLenum,
        dfactorAlpha: GLenum,
    ),
>;
extern "C" {
    pub static mut glad_glBlendFuncSeparate: PFNGLBLENDFUNCSEPARATEPROC;
}
pub type PFNGLMULTIDRAWARRAYSPROC = ::std::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        first: *const GLint,
        count: *const GLsizei,
        drawcount: GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glMultiDrawArrays: PFNGLMULTIDRAWARRAYSPROC;
}
pub type PFNGLMULTIDRAWELEMENTSPROC = ::std::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: *const GLsizei,
        type_: GLenum,
        indices: *const *const ::std::os::raw::c_void,
        drawcount: GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glMultiDrawElements: PFNGLMULTIDRAWELEMENTSPROC;
}
pub type PFNGLPOINTPARAMETERFPROC =
    ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLfloat)>;
extern "C" {
    pub static mut glad_glPointParameterf: PFNGLPOINTPARAMETERFPROC;
}
pub type PFNGLPOINTPARAMETERFVPROC =
    ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLfloat)>;
extern "C" {
    pub static mut glad_glPointParameterfv: PFNGLPOINTPARAMETERFVPROC;
}
pub type PFNGLPOINTPARAMETERIPROC =
    ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLint)>;
extern "C" {
    pub static mut glad_glPointParameteri: PFNGLPOINTPARAMETERIPROC;
}
pub type PFNGLPOINTPARAMETERIVPROC =
    ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLint)>;
extern "C" {
    pub static mut glad_glPointParameteriv: PFNGLPOINTPARAMETERIVPROC;
}
pub type PFNGLBLENDCOLORPROC = ::std::option::Option<
    unsafe extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat),
>;
extern "C" {
    pub static mut glad_glBlendColor: PFNGLBLENDCOLORPROC;
}
pub type PFNGLBLENDEQUATIONPROC = ::std::option::Option<unsafe extern "C" fn(mode: GLenum)>;
extern "C" {
    pub static mut glad_glBlendEquation: PFNGLBLENDEQUATIONPROC;
}
extern "C" {
    pub static mut GLAD_GL_VERSION_1_5: ::std::os::raw::c_int;
}
pub type PFNGLGENQUERIESPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, ids: *mut GLuint)>;
extern "C" {
    pub static mut glad_glGenQueries: PFNGLGENQUERIESPROC;
}
pub type PFNGLDELETEQUERIESPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, ids: *const GLuint)>;
extern "C" {
    pub static mut glad_glDeleteQueries: PFNGLDELETEQUERIESPROC;
}
pub type PFNGLISQUERYPROC = ::std::option::Option<unsafe extern "C" fn(id: GLuint) -> GLboolean>;
extern "C" {
    pub static mut glad_glIsQuery: PFNGLISQUERYPROC;
}
pub type PFNGLBEGINQUERYPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, id: GLuint)>;
extern "C" {
    pub static mut glad_glBeginQuery: PFNGLBEGINQUERYPROC;
}
pub type PFNGLENDQUERYPROC = ::std::option::Option<unsafe extern "C" fn(target: GLenum)>;
extern "C" {
    pub static mut glad_glEndQuery: PFNGLENDQUERYPROC;
}
pub type PFNGLGETQUERYIVPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
extern "C" {
    pub static mut glad_glGetQueryiv: PFNGLGETQUERYIVPROC;
}
pub type PFNGLGETQUERYOBJECTIVPROC =
    ::std::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLint)>;
extern "C" {
    pub static mut glad_glGetQueryObjectiv: PFNGLGETQUERYOBJECTIVPROC;
}
pub type PFNGLGETQUERYOBJECTUIVPROC =
    ::std::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLuint)>;
extern "C" {
    pub static mut glad_glGetQueryObjectuiv: PFNGLGETQUERYOBJECTUIVPROC;
}
pub type PFNGLBINDBUFFERPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, buffer: GLuint)>;
extern "C" {
    pub static mut glad_glBindBuffer: PFNGLBINDBUFFERPROC;
}
pub type PFNGLDELETEBUFFERSPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, buffers: *const GLuint)>;
extern "C" {
    pub static mut glad_glDeleteBuffers: PFNGLDELETEBUFFERSPROC;
}
pub type PFNGLGENBUFFERSPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, buffers: *mut GLuint)>;
extern "C" {
    pub static mut glad_glGenBuffers: PFNGLGENBUFFERSPROC;
}
pub type PFNGLISBUFFERPROC =
    ::std::option::Option<unsafe extern "C" fn(buffer: GLuint) -> GLboolean>;
extern "C" {
    pub static mut glad_glIsBuffer: PFNGLISBUFFERPROC;
}
pub type PFNGLBUFFERDATAPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        size: GLsizeiptr,
        data: *const ::std::os::raw::c_void,
        usage: GLenum,
    ),
>;
extern "C" {
    pub static mut glad_glBufferData: PFNGLBUFFERDATAPROC;
}
pub type PFNGLBUFFERSUBDATAPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        offset: GLintptr,
        size: GLsizeiptr,
        data: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glBufferSubData: PFNGLBUFFERSUBDATAPROC;
}
pub type PFNGLGETBUFFERSUBDATAPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        offset: GLintptr,
        size: GLsizeiptr,
        data: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glGetBufferSubData: PFNGLGETBUFFERSUBDATAPROC;
}
pub type PFNGLMAPBUFFERPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, access: GLenum) -> *mut ::std::os::raw::c_void,
>;
extern "C" {
    pub static mut glad_glMapBuffer: PFNGLMAPBUFFERPROC;
}
pub type PFNGLUNMAPBUFFERPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum) -> GLboolean>;
extern "C" {
    pub static mut glad_glUnmapBuffer: PFNGLUNMAPBUFFERPROC;
}
pub type PFNGLGETBUFFERPARAMETERIVPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
extern "C" {
    pub static mut glad_glGetBufferParameteriv: PFNGLGETBUFFERPARAMETERIVPROC;
}
pub type PFNGLGETBUFFERPOINTERVPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub static mut glad_glGetBufferPointerv: PFNGLGETBUFFERPOINTERVPROC;
}
extern "C" {
    pub static mut GLAD_GL_VERSION_2_0: ::std::os::raw::c_int;
}
pub type PFNGLBLENDEQUATIONSEPARATEPROC =
    ::std::option::Option<unsafe extern "C" fn(modeRGB: GLenum, modeAlpha: GLenum)>;
extern "C" {
    pub static mut glad_glBlendEquationSeparate: PFNGLBLENDEQUATIONSEPARATEPROC;
}
pub type PFNGLDRAWBUFFERSPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, bufs: *const GLenum)>;
extern "C" {
    pub static mut glad_glDrawBuffers: PFNGLDRAWBUFFERSPROC;
}
pub type PFNGLSTENCILOPSEPARATEPROC = ::std::option::Option<
    unsafe extern "C" fn(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum),
>;
extern "C" {
    pub static mut glad_glStencilOpSeparate: PFNGLSTENCILOPSEPARATEPROC;
}
pub type PFNGLSTENCILFUNCSEPARATEPROC = ::std::option::Option<
    unsafe extern "C" fn(face: GLenum, func: GLenum, ref_: GLint, mask: GLuint),
>;
extern "C" {
    pub static mut glad_glStencilFuncSeparate: PFNGLSTENCILFUNCSEPARATEPROC;
}
pub type PFNGLSTENCILMASKSEPARATEPROC =
    ::std::option::Option<unsafe extern "C" fn(face: GLenum, mask: GLuint)>;
extern "C" {
    pub static mut glad_glStencilMaskSeparate: PFNGLSTENCILMASKSEPARATEPROC;
}
pub type PFNGLATTACHSHADERPROC =
    ::std::option::Option<unsafe extern "C" fn(program: GLuint, shader: GLuint)>;
extern "C" {
    pub static mut glad_glAttachShader: PFNGLATTACHSHADERPROC;
}
pub type PFNGLBINDATTRIBLOCATIONPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, index: GLuint, name: *const GLchar),
>;
extern "C" {
    pub static mut glad_glBindAttribLocation: PFNGLBINDATTRIBLOCATIONPROC;
}
pub type PFNGLCOMPILESHADERPROC = ::std::option::Option<unsafe extern "C" fn(shader: GLuint)>;
extern "C" {
    pub static mut glad_glCompileShader: PFNGLCOMPILESHADERPROC;
}
pub type PFNGLCREATEPROGRAMPROC = ::std::option::Option<unsafe extern "C" fn() -> GLuint>;
extern "C" {
    pub static mut glad_glCreateProgram: PFNGLCREATEPROGRAMPROC;
}
pub type PFNGLCREATESHADERPROC =
    ::std::option::Option<unsafe extern "C" fn(type_: GLenum) -> GLuint>;
extern "C" {
    pub static mut glad_glCreateShader: PFNGLCREATESHADERPROC;
}
pub type PFNGLDELETEPROGRAMPROC = ::std::option::Option<unsafe extern "C" fn(program: GLuint)>;
extern "C" {
    pub static mut glad_glDeleteProgram: PFNGLDELETEPROGRAMPROC;
}
pub type PFNGLDELETESHADERPROC = ::std::option::Option<unsafe extern "C" fn(shader: GLuint)>;
extern "C" {
    pub static mut glad_glDeleteShader: PFNGLDELETESHADERPROC;
}
pub type PFNGLDETACHSHADERPROC =
    ::std::option::Option<unsafe extern "C" fn(program: GLuint, shader: GLuint)>;
extern "C" {
    pub static mut glad_glDetachShader: PFNGLDETACHSHADERPROC;
}
pub type PFNGLDISABLEVERTEXATTRIBARRAYPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint)>;
extern "C" {
    pub static mut glad_glDisableVertexAttribArray: PFNGLDISABLEVERTEXATTRIBARRAYPROC;
}
pub type PFNGLENABLEVERTEXATTRIBARRAYPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint)>;
extern "C" {
    pub static mut glad_glEnableVertexAttribArray: PFNGLENABLEVERTEXATTRIBARRAYPROC;
}
pub type PFNGLGETACTIVEATTRIBPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        size: *mut GLint,
        type_: *mut GLenum,
        name: *mut GLchar,
    ),
>;
extern "C" {
    pub static mut glad_glGetActiveAttrib: PFNGLGETACTIVEATTRIBPROC;
}
pub type PFNGLGETACTIVEUNIFORMPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        size: *mut GLint,
        type_: *mut GLenum,
        name: *mut GLchar,
    ),
>;
extern "C" {
    pub static mut glad_glGetActiveUniform: PFNGLGETACTIVEUNIFORMPROC;
}
pub type PFNGLGETATTACHEDSHADERSPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        maxCount: GLsizei,
        count: *mut GLsizei,
        shaders: *mut GLuint,
    ),
>;
extern "C" {
    pub static mut glad_glGetAttachedShaders: PFNGLGETATTACHEDSHADERSPROC;
}
pub type PFNGLGETATTRIBLOCATIONPROC =
    ::std::option::Option<unsafe extern "C" fn(program: GLuint, name: *const GLchar) -> GLint>;
extern "C" {
    pub static mut glad_glGetAttribLocation: PFNGLGETATTRIBLOCATIONPROC;
}
pub type PFNGLGETPROGRAMIVPROC =
    ::std::option::Option<unsafe extern "C" fn(program: GLuint, pname: GLenum, params: *mut GLint)>;
extern "C" {
    pub static mut glad_glGetProgramiv: PFNGLGETPROGRAMIVPROC;
}
pub type PFNGLGETPROGRAMINFOLOGPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        infoLog: *mut GLchar,
    ),
>;
extern "C" {
    pub static mut glad_glGetProgramInfoLog: PFNGLGETPROGRAMINFOLOGPROC;
}
pub type PFNGLGETSHADERIVPROC =
    ::std::option::Option<unsafe extern "C" fn(shader: GLuint, pname: GLenum, params: *mut GLint)>;
extern "C" {
    pub static mut glad_glGetShaderiv: PFNGLGETSHADERIVPROC;
}
pub type PFNGLGETSHADERINFOLOGPROC = ::std::option::Option<
    unsafe extern "C" fn(
        shader: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        infoLog: *mut GLchar,
    ),
>;
extern "C" {
    pub static mut glad_glGetShaderInfoLog: PFNGLGETSHADERINFOLOGPROC;
}
pub type PFNGLGETSHADERSOURCEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        shader: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        source: *mut GLchar,
    ),
>;
extern "C" {
    pub static mut glad_glGetShaderSource: PFNGLGETSHADERSOURCEPROC;
}
pub type PFNGLGETUNIFORMLOCATIONPROC =
    ::std::option::Option<unsafe extern "C" fn(program: GLuint, name: *const GLchar) -> GLint>;
extern "C" {
    pub static mut glad_glGetUniformLocation: PFNGLGETUNIFORMLOCATIONPROC;
}
pub type PFNGLGETUNIFORMFVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, params: *mut GLfloat),
>;
extern "C" {
    pub static mut glad_glGetUniformfv: PFNGLGETUNIFORMFVPROC;
}
pub type PFNGLGETUNIFORMIVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, params: *mut GLint),
>;
extern "C" {
    pub static mut glad_glGetUniformiv: PFNGLGETUNIFORMIVPROC;
}
pub type PFNGLGETVERTEXATTRIBDVPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLdouble),
>;
extern "C" {
    pub static mut glad_glGetVertexAttribdv: PFNGLGETVERTEXATTRIBDVPROC;
}
pub type PFNGLGETVERTEXATTRIBFVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLfloat)>;
extern "C" {
    pub static mut glad_glGetVertexAttribfv: PFNGLGETVERTEXATTRIBFVPROC;
}
pub type PFNGLGETVERTEXATTRIBIVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLint)>;
extern "C" {
    pub static mut glad_glGetVertexAttribiv: PFNGLGETVERTEXATTRIBIVPROC;
}
pub type PFNGLGETVERTEXATTRIBPOINTERVPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, pname: GLenum, pointer: *mut *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub static mut glad_glGetVertexAttribPointerv: PFNGLGETVERTEXATTRIBPOINTERVPROC;
}
pub type PFNGLISPROGRAMPROC =
    ::std::option::Option<unsafe extern "C" fn(program: GLuint) -> GLboolean>;
extern "C" {
    pub static mut glad_glIsProgram: PFNGLISPROGRAMPROC;
}
pub type PFNGLISSHADERPROC =
    ::std::option::Option<unsafe extern "C" fn(shader: GLuint) -> GLboolean>;
extern "C" {
    pub static mut glad_glIsShader: PFNGLISSHADERPROC;
}
pub type PFNGLLINKPROGRAMPROC = ::std::option::Option<unsafe extern "C" fn(program: GLuint)>;
extern "C" {
    pub static mut glad_glLinkProgram: PFNGLLINKPROGRAMPROC;
}
pub type PFNGLSHADERSOURCEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        shader: GLuint,
        count: GLsizei,
        string: *const *const GLchar,
        length: *const GLint,
    ),
>;
extern "C" {
    pub static mut glad_glShaderSource: PFNGLSHADERSOURCEPROC;
}
pub type PFNGLUSEPROGRAMPROC = ::std::option::Option<unsafe extern "C" fn(program: GLuint)>;
extern "C" {
    pub static mut glad_glUseProgram: PFNGLUSEPROGRAMPROC;
}
pub type PFNGLUNIFORM1FPROC =
    ::std::option::Option<unsafe extern "C" fn(location: GLint, v0: GLfloat)>;
extern "C" {
    pub static mut glad_glUniform1f: PFNGLUNIFORM1FPROC;
}
pub type PFNGLUNIFORM2FPROC =
    ::std::option::Option<unsafe extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat)>;
extern "C" {
    pub static mut glad_glUniform2f: PFNGLUNIFORM2FPROC;
}
pub type PFNGLUNIFORM3FPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat),
>;
extern "C" {
    pub static mut glad_glUniform3f: PFNGLUNIFORM3FPROC;
}
pub type PFNGLUNIFORM4FPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat),
>;
extern "C" {
    pub static mut glad_glUniform4f: PFNGLUNIFORM4FPROC;
}
pub type PFNGLUNIFORM1IPROC =
    ::std::option::Option<unsafe extern "C" fn(location: GLint, v0: GLint)>;
extern "C" {
    pub static mut glad_glUniform1i: PFNGLUNIFORM1IPROC;
}
pub type PFNGLUNIFORM2IPROC =
    ::std::option::Option<unsafe extern "C" fn(location: GLint, v0: GLint, v1: GLint)>;
extern "C" {
    pub static mut glad_glUniform2i: PFNGLUNIFORM2IPROC;
}
pub type PFNGLUNIFORM3IPROC =
    ::std::option::Option<unsafe extern "C" fn(location: GLint, v0: GLint, v1: GLint, v2: GLint)>;
extern "C" {
    pub static mut glad_glUniform3i: PFNGLUNIFORM3IPROC;
}
pub type PFNGLUNIFORM4IPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint),
>;
extern "C" {
    pub static mut glad_glUniform4i: PFNGLUNIFORM4IPROC;
}
pub type PFNGLUNIFORM1FVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLfloat),
>;
extern "C" {
    pub static mut glad_glUniform1fv: PFNGLUNIFORM1FVPROC;
}
pub type PFNGLUNIFORM2FVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLfloat),
>;
extern "C" {
    pub static mut glad_glUniform2fv: PFNGLUNIFORM2FVPROC;
}
pub type PFNGLUNIFORM3FVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLfloat),
>;
extern "C" {
    pub static mut glad_glUniform3fv: PFNGLUNIFORM3FVPROC;
}
pub type PFNGLUNIFORM4FVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLfloat),
>;
extern "C" {
    pub static mut glad_glUniform4fv: PFNGLUNIFORM4FVPROC;
}
pub type PFNGLUNIFORM1IVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint),
>;
extern "C" {
    pub static mut glad_glUniform1iv: PFNGLUNIFORM1IVPROC;
}
pub type PFNGLUNIFORM2IVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint),
>;
extern "C" {
    pub static mut glad_glUniform2iv: PFNGLUNIFORM2IVPROC;
}
pub type PFNGLUNIFORM3IVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint),
>;
extern "C" {
    pub static mut glad_glUniform3iv: PFNGLUNIFORM3IVPROC;
}
pub type PFNGLUNIFORM4IVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint),
>;
extern "C" {
    pub static mut glad_glUniform4iv: PFNGLUNIFORM4IVPROC;
}
pub type PFNGLUNIFORMMATRIX2FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
extern "C" {
    pub static mut glad_glUniformMatrix2fv: PFNGLUNIFORMMATRIX2FVPROC;
}
pub type PFNGLUNIFORMMATRIX3FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
extern "C" {
    pub static mut glad_glUniformMatrix3fv: PFNGLUNIFORMMATRIX3FVPROC;
}
pub type PFNGLUNIFORMMATRIX4FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
extern "C" {
    pub static mut glad_glUniformMatrix4fv: PFNGLUNIFORMMATRIX4FVPROC;
}
pub type PFNGLVALIDATEPROGRAMPROC = ::std::option::Option<unsafe extern "C" fn(program: GLuint)>;
extern "C" {
    pub static mut glad_glValidateProgram: PFNGLVALIDATEPROGRAMPROC;
}
pub type PFNGLVERTEXATTRIB1DPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLdouble)>;
extern "C" {
    pub static mut glad_glVertexAttrib1d: PFNGLVERTEXATTRIB1DPROC;
}
pub type PFNGLVERTEXATTRIB1DVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
extern "C" {
    pub static mut glad_glVertexAttrib1dv: PFNGLVERTEXATTRIB1DVPROC;
}
pub type PFNGLVERTEXATTRIB1FPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLfloat)>;
extern "C" {
    pub static mut glad_glVertexAttrib1f: PFNGLVERTEXATTRIB1FPROC;
}
pub type PFNGLVERTEXATTRIB1FVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
extern "C" {
    pub static mut glad_glVertexAttrib1fv: PFNGLVERTEXATTRIB1FVPROC;
}
pub type PFNGLVERTEXATTRIB1SPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLshort)>;
extern "C" {
    pub static mut glad_glVertexAttrib1s: PFNGLVERTEXATTRIB1SPROC;
}
pub type PFNGLVERTEXATTRIB1SVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>;
extern "C" {
    pub static mut glad_glVertexAttrib1sv: PFNGLVERTEXATTRIB1SVPROC;
}
pub type PFNGLVERTEXATTRIB2DPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble)>;
extern "C" {
    pub static mut glad_glVertexAttrib2d: PFNGLVERTEXATTRIB2DPROC;
}
pub type PFNGLVERTEXATTRIB2DVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
extern "C" {
    pub static mut glad_glVertexAttrib2dv: PFNGLVERTEXATTRIB2DVPROC;
}
pub type PFNGLVERTEXATTRIB2FPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat)>;
extern "C" {
    pub static mut glad_glVertexAttrib2f: PFNGLVERTEXATTRIB2FPROC;
}
pub type PFNGLVERTEXATTRIB2FVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
extern "C" {
    pub static mut glad_glVertexAttrib2fv: PFNGLVERTEXATTRIB2FVPROC;
}
pub type PFNGLVERTEXATTRIB2SPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLshort, y: GLshort)>;
extern "C" {
    pub static mut glad_glVertexAttrib2s: PFNGLVERTEXATTRIB2SPROC;
}
pub type PFNGLVERTEXATTRIB2SVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>;
extern "C" {
    pub static mut glad_glVertexAttrib2sv: PFNGLVERTEXATTRIB2SVPROC;
}
pub type PFNGLVERTEXATTRIB3DPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble),
>;
extern "C" {
    pub static mut glad_glVertexAttrib3d: PFNGLVERTEXATTRIB3DPROC;
}
pub type PFNGLVERTEXATTRIB3DVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
extern "C" {
    pub static mut glad_glVertexAttrib3dv: PFNGLVERTEXATTRIB3DVPROC;
}
pub type PFNGLVERTEXATTRIB3FPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat)>;
extern "C" {
    pub static mut glad_glVertexAttrib3f: PFNGLVERTEXATTRIB3FPROC;
}
pub type PFNGLVERTEXATTRIB3FVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
extern "C" {
    pub static mut glad_glVertexAttrib3fv: PFNGLVERTEXATTRIB3FVPROC;
}
pub type PFNGLVERTEXATTRIB3SPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort)>;
extern "C" {
    pub static mut glad_glVertexAttrib3s: PFNGLVERTEXATTRIB3SPROC;
}
pub type PFNGLVERTEXATTRIB3SVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>;
extern "C" {
    pub static mut glad_glVertexAttrib3sv: PFNGLVERTEXATTRIB3SVPROC;
}
pub type PFNGLVERTEXATTRIB4NBVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLbyte)>;
extern "C" {
    pub static mut glad_glVertexAttrib4Nbv: PFNGLVERTEXATTRIB4NBVPROC;
}
pub type PFNGLVERTEXATTRIB4NIVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
extern "C" {
    pub static mut glad_glVertexAttrib4Niv: PFNGLVERTEXATTRIB4NIVPROC;
}
pub type PFNGLVERTEXATTRIB4NSVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>;
extern "C" {
    pub static mut glad_glVertexAttrib4Nsv: PFNGLVERTEXATTRIB4NSVPROC;
}
pub type PFNGLVERTEXATTRIB4NUBPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte),
>;
extern "C" {
    pub static mut glad_glVertexAttrib4Nub: PFNGLVERTEXATTRIB4NUBPROC;
}
pub type PFNGLVERTEXATTRIB4NUBVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLubyte)>;
extern "C" {
    pub static mut glad_glVertexAttrib4Nubv: PFNGLVERTEXATTRIB4NUBVPROC;
}
pub type PFNGLVERTEXATTRIB4NUIVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint)>;
extern "C" {
    pub static mut glad_glVertexAttrib4Nuiv: PFNGLVERTEXATTRIB4NUIVPROC;
}
pub type PFNGLVERTEXATTRIB4NUSVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLushort)>;
extern "C" {
    pub static mut glad_glVertexAttrib4Nusv: PFNGLVERTEXATTRIB4NUSVPROC;
}
pub type PFNGLVERTEXATTRIB4BVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLbyte)>;
extern "C" {
    pub static mut glad_glVertexAttrib4bv: PFNGLVERTEXATTRIB4BVPROC;
}
pub type PFNGLVERTEXATTRIB4DPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble),
>;
extern "C" {
    pub static mut glad_glVertexAttrib4d: PFNGLVERTEXATTRIB4DPROC;
}
pub type PFNGLVERTEXATTRIB4DVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
extern "C" {
    pub static mut glad_glVertexAttrib4dv: PFNGLVERTEXATTRIB4DVPROC;
}
pub type PFNGLVERTEXATTRIB4FPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat),
>;
extern "C" {
    pub static mut glad_glVertexAttrib4f: PFNGLVERTEXATTRIB4FPROC;
}
pub type PFNGLVERTEXATTRIB4FVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
extern "C" {
    pub static mut glad_glVertexAttrib4fv: PFNGLVERTEXATTRIB4FVPROC;
}
pub type PFNGLVERTEXATTRIB4IVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
extern "C" {
    pub static mut glad_glVertexAttrib4iv: PFNGLVERTEXATTRIB4IVPROC;
}
pub type PFNGLVERTEXATTRIB4SPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort),
>;
extern "C" {
    pub static mut glad_glVertexAttrib4s: PFNGLVERTEXATTRIB4SPROC;
}
pub type PFNGLVERTEXATTRIB4SVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>;
extern "C" {
    pub static mut glad_glVertexAttrib4sv: PFNGLVERTEXATTRIB4SVPROC;
}
pub type PFNGLVERTEXATTRIB4UBVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLubyte)>;
extern "C" {
    pub static mut glad_glVertexAttrib4ubv: PFNGLVERTEXATTRIB4UBVPROC;
}
pub type PFNGLVERTEXATTRIB4UIVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint)>;
extern "C" {
    pub static mut glad_glVertexAttrib4uiv: PFNGLVERTEXATTRIB4UIVPROC;
}
pub type PFNGLVERTEXATTRIB4USVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLushort)>;
extern "C" {
    pub static mut glad_glVertexAttrib4usv: PFNGLVERTEXATTRIB4USVPROC;
}
pub type PFNGLVERTEXATTRIBPOINTERPROC = ::std::option::Option<
    unsafe extern "C" fn(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        normalized: GLboolean,
        stride: GLsizei,
        pointer: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glVertexAttribPointer: PFNGLVERTEXATTRIBPOINTERPROC;
}
extern "C" {
    pub static mut GLAD_GL_VERSION_2_1: ::std::os::raw::c_int;
}
pub type PFNGLUNIFORMMATRIX2X3FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
extern "C" {
    pub static mut glad_glUniformMatrix2x3fv: PFNGLUNIFORMMATRIX2X3FVPROC;
}
pub type PFNGLUNIFORMMATRIX3X2FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
extern "C" {
    pub static mut glad_glUniformMatrix3x2fv: PFNGLUNIFORMMATRIX3X2FVPROC;
}
pub type PFNGLUNIFORMMATRIX2X4FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
extern "C" {
    pub static mut glad_glUniformMatrix2x4fv: PFNGLUNIFORMMATRIX2X4FVPROC;
}
pub type PFNGLUNIFORMMATRIX4X2FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
extern "C" {
    pub static mut glad_glUniformMatrix4x2fv: PFNGLUNIFORMMATRIX4X2FVPROC;
}
pub type PFNGLUNIFORMMATRIX3X4FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
extern "C" {
    pub static mut glad_glUniformMatrix3x4fv: PFNGLUNIFORMMATRIX3X4FVPROC;
}
pub type PFNGLUNIFORMMATRIX4X3FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
extern "C" {
    pub static mut glad_glUniformMatrix4x3fv: PFNGLUNIFORMMATRIX4X3FVPROC;
}
extern "C" {
    pub static mut GLAD_GL_VERSION_3_0: ::std::os::raw::c_int;
}
pub type PFNGLCOLORMASKIPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean),
>;
extern "C" {
    pub static mut glad_glColorMaski: PFNGLCOLORMASKIPROC;
}
pub type PFNGLGETBOOLEANI_VPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, data: *mut GLboolean),
>;
extern "C" {
    pub static mut glad_glGetBooleani_v: PFNGLGETBOOLEANI_VPROC;
}
pub type PFNGLGETINTEGERI_VPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, data: *mut GLint)>;
extern "C" {
    pub static mut glad_glGetIntegeri_v: PFNGLGETINTEGERI_VPROC;
}
pub type PFNGLENABLEIPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint)>;
extern "C" {
    pub static mut glad_glEnablei: PFNGLENABLEIPROC;
}
pub type PFNGLDISABLEIPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint)>;
extern "C" {
    pub static mut glad_glDisablei: PFNGLDISABLEIPROC;
}
pub type PFNGLISENABLEDIPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint) -> GLboolean>;
extern "C" {
    pub static mut glad_glIsEnabledi: PFNGLISENABLEDIPROC;
}
pub type PFNGLBEGINTRANSFORMFEEDBACKPROC =
    ::std::option::Option<unsafe extern "C" fn(primitiveMode: GLenum)>;
extern "C" {
    pub static mut glad_glBeginTransformFeedback: PFNGLBEGINTRANSFORMFEEDBACKPROC;
}
pub type PFNGLENDTRANSFORMFEEDBACKPROC = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub static mut glad_glEndTransformFeedback: PFNGLENDTRANSFORMFEEDBACKPROC;
}
pub type PFNGLBINDBUFFERRANGEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        index: GLuint,
        buffer: GLuint,
        offset: GLintptr,
        size: GLsizeiptr,
    ),
>;
extern "C" {
    pub static mut glad_glBindBufferRange: PFNGLBINDBUFFERRANGEPROC;
}
pub type PFNGLBINDBUFFERBASEPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint)>;
extern "C" {
    pub static mut glad_glBindBufferBase: PFNGLBINDBUFFERBASEPROC;
}
pub type PFNGLTRANSFORMFEEDBACKVARYINGSPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        count: GLsizei,
        varyings: *const *const GLchar,
        bufferMode: GLenum,
    ),
>;
extern "C" {
    pub static mut glad_glTransformFeedbackVaryings: PFNGLTRANSFORMFEEDBACKVARYINGSPROC;
}
pub type PFNGLGETTRANSFORMFEEDBACKVARYINGPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        size: *mut GLsizei,
        type_: *mut GLenum,
        name: *mut GLchar,
    ),
>;
extern "C" {
    pub static mut glad_glGetTransformFeedbackVarying: PFNGLGETTRANSFORMFEEDBACKVARYINGPROC;
}
pub type PFNGLCLAMPCOLORPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, clamp: GLenum)>;
extern "C" {
    pub static mut glad_glClampColor: PFNGLCLAMPCOLORPROC;
}
pub type PFNGLBEGINCONDITIONALRENDERPROC =
    ::std::option::Option<unsafe extern "C" fn(id: GLuint, mode: GLenum)>;
extern "C" {
    pub static mut glad_glBeginConditionalRender: PFNGLBEGINCONDITIONALRENDERPROC;
}
pub type PFNGLENDCONDITIONALRENDERPROC = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub static mut glad_glEndConditionalRender: PFNGLENDCONDITIONALRENDERPROC;
}
pub type PFNGLVERTEXATTRIBIPOINTERPROC = ::std::option::Option<
    unsafe extern "C" fn(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glVertexAttribIPointer: PFNGLVERTEXATTRIBIPOINTERPROC;
}
pub type PFNGLGETVERTEXATTRIBIIVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLint)>;
extern "C" {
    pub static mut glad_glGetVertexAttribIiv: PFNGLGETVERTEXATTRIBIIVPROC;
}
pub type PFNGLGETVERTEXATTRIBIUIVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLuint)>;
extern "C" {
    pub static mut glad_glGetVertexAttribIuiv: PFNGLGETVERTEXATTRIBIUIVPROC;
}
pub type PFNGLVERTEXATTRIBI1IPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLint)>;
extern "C" {
    pub static mut glad_glVertexAttribI1i: PFNGLVERTEXATTRIBI1IPROC;
}
pub type PFNGLVERTEXATTRIBI2IPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLint, y: GLint)>;
extern "C" {
    pub static mut glad_glVertexAttribI2i: PFNGLVERTEXATTRIBI2IPROC;
}
pub type PFNGLVERTEXATTRIBI3IPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLint, y: GLint, z: GLint)>;
extern "C" {
    pub static mut glad_glVertexAttribI3i: PFNGLVERTEXATTRIBI3IPROC;
}
pub type PFNGLVERTEXATTRIBI4IPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint),
>;
extern "C" {
    pub static mut glad_glVertexAttribI4i: PFNGLVERTEXATTRIBI4IPROC;
}
pub type PFNGLVERTEXATTRIBI1UIPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLuint)>;
extern "C" {
    pub static mut glad_glVertexAttribI1ui: PFNGLVERTEXATTRIBI1UIPROC;
}
pub type PFNGLVERTEXATTRIBI2UIPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLuint, y: GLuint)>;
extern "C" {
    pub static mut glad_glVertexAttribI2ui: PFNGLVERTEXATTRIBI2UIPROC;
}
pub type PFNGLVERTEXATTRIBI3UIPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLuint, y: GLuint, z: GLuint)>;
extern "C" {
    pub static mut glad_glVertexAttribI3ui: PFNGLVERTEXATTRIBI3UIPROC;
}
pub type PFNGLVERTEXATTRIBI4UIPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint),
>;
extern "C" {
    pub static mut glad_glVertexAttribI4ui: PFNGLVERTEXATTRIBI4UIPROC;
}
pub type PFNGLVERTEXATTRIBI1IVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
extern "C" {
    pub static mut glad_glVertexAttribI1iv: PFNGLVERTEXATTRIBI1IVPROC;
}
pub type PFNGLVERTEXATTRIBI2IVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
extern "C" {
    pub static mut glad_glVertexAttribI2iv: PFNGLVERTEXATTRIBI2IVPROC;
}
pub type PFNGLVERTEXATTRIBI3IVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
extern "C" {
    pub static mut glad_glVertexAttribI3iv: PFNGLVERTEXATTRIBI3IVPROC;
}
pub type PFNGLVERTEXATTRIBI4IVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
extern "C" {
    pub static mut glad_glVertexAttribI4iv: PFNGLVERTEXATTRIBI4IVPROC;
}
pub type PFNGLVERTEXATTRIBI1UIVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint)>;
extern "C" {
    pub static mut glad_glVertexAttribI1uiv: PFNGLVERTEXATTRIBI1UIVPROC;
}
pub type PFNGLVERTEXATTRIBI2UIVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint)>;
extern "C" {
    pub static mut glad_glVertexAttribI2uiv: PFNGLVERTEXATTRIBI2UIVPROC;
}
pub type PFNGLVERTEXATTRIBI3UIVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint)>;
extern "C" {
    pub static mut glad_glVertexAttribI3uiv: PFNGLVERTEXATTRIBI3UIVPROC;
}
pub type PFNGLVERTEXATTRIBI4UIVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint)>;
extern "C" {
    pub static mut glad_glVertexAttribI4uiv: PFNGLVERTEXATTRIBI4UIVPROC;
}
pub type PFNGLVERTEXATTRIBI4BVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLbyte)>;
extern "C" {
    pub static mut glad_glVertexAttribI4bv: PFNGLVERTEXATTRIBI4BVPROC;
}
pub type PFNGLVERTEXATTRIBI4SVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>;
extern "C" {
    pub static mut glad_glVertexAttribI4sv: PFNGLVERTEXATTRIBI4SVPROC;
}
pub type PFNGLVERTEXATTRIBI4UBVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLubyte)>;
extern "C" {
    pub static mut glad_glVertexAttribI4ubv: PFNGLVERTEXATTRIBI4UBVPROC;
}
pub type PFNGLVERTEXATTRIBI4USVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLushort)>;
extern "C" {
    pub static mut glad_glVertexAttribI4usv: PFNGLVERTEXATTRIBI4USVPROC;
}
pub type PFNGLGETUNIFORMUIVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, params: *mut GLuint),
>;
extern "C" {
    pub static mut glad_glGetUniformuiv: PFNGLGETUNIFORMUIVPROC;
}
pub type PFNGLBINDFRAGDATALOCATIONPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, color: GLuint, name: *const GLchar),
>;
extern "C" {
    pub static mut glad_glBindFragDataLocation: PFNGLBINDFRAGDATALOCATIONPROC;
}
pub type PFNGLGETFRAGDATALOCATIONPROC =
    ::std::option::Option<unsafe extern "C" fn(program: GLuint, name: *const GLchar) -> GLint>;
extern "C" {
    pub static mut glad_glGetFragDataLocation: PFNGLGETFRAGDATALOCATIONPROC;
}
pub type PFNGLUNIFORM1UIPROC =
    ::std::option::Option<unsafe extern "C" fn(location: GLint, v0: GLuint)>;
extern "C" {
    pub static mut glad_glUniform1ui: PFNGLUNIFORM1UIPROC;
}
pub type PFNGLUNIFORM2UIPROC =
    ::std::option::Option<unsafe extern "C" fn(location: GLint, v0: GLuint, v1: GLuint)>;
extern "C" {
    pub static mut glad_glUniform2ui: PFNGLUNIFORM2UIPROC;
}
pub type PFNGLUNIFORM3UIPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint),
>;
extern "C" {
    pub static mut glad_glUniform3ui: PFNGLUNIFORM3UIPROC;
}
pub type PFNGLUNIFORM4UIPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint),
>;
extern "C" {
    pub static mut glad_glUniform4ui: PFNGLUNIFORM4UIPROC;
}
pub type PFNGLUNIFORM1UIVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint),
>;
extern "C" {
    pub static mut glad_glUniform1uiv: PFNGLUNIFORM1UIVPROC;
}
pub type PFNGLUNIFORM2UIVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint),
>;
extern "C" {
    pub static mut glad_glUniform2uiv: PFNGLUNIFORM2UIVPROC;
}
pub type PFNGLUNIFORM3UIVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint),
>;
extern "C" {
    pub static mut glad_glUniform3uiv: PFNGLUNIFORM3UIVPROC;
}
pub type PFNGLUNIFORM4UIVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint),
>;
extern "C" {
    pub static mut glad_glUniform4uiv: PFNGLUNIFORM4UIVPROC;
}
pub type PFNGLTEXPARAMETERIIVPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLint),
>;
extern "C" {
    pub static mut glad_glTexParameterIiv: PFNGLTEXPARAMETERIIVPROC;
}
pub type PFNGLTEXPARAMETERIUIVPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLuint),
>;
extern "C" {
    pub static mut glad_glTexParameterIuiv: PFNGLTEXPARAMETERIUIVPROC;
}
pub type PFNGLGETTEXPARAMETERIIVPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
extern "C" {
    pub static mut glad_glGetTexParameterIiv: PFNGLGETTEXPARAMETERIIVPROC;
}
pub type PFNGLGETTEXPARAMETERIUIVPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLuint)>;
extern "C" {
    pub static mut glad_glGetTexParameterIuiv: PFNGLGETTEXPARAMETERIUIVPROC;
}
pub type PFNGLCLEARBUFFERIVPROC = ::std::option::Option<
    unsafe extern "C" fn(buffer: GLenum, drawbuffer: GLint, value: *const GLint),
>;
extern "C" {
    pub static mut glad_glClearBufferiv: PFNGLCLEARBUFFERIVPROC;
}
pub type PFNGLCLEARBUFFERUIVPROC = ::std::option::Option<
    unsafe extern "C" fn(buffer: GLenum, drawbuffer: GLint, value: *const GLuint),
>;
extern "C" {
    pub static mut glad_glClearBufferuiv: PFNGLCLEARBUFFERUIVPROC;
}
pub type PFNGLCLEARBUFFERFVPROC = ::std::option::Option<
    unsafe extern "C" fn(buffer: GLenum, drawbuffer: GLint, value: *const GLfloat),
>;
extern "C" {
    pub static mut glad_glClearBufferfv: PFNGLCLEARBUFFERFVPROC;
}
pub type PFNGLCLEARBUFFERFIPROC = ::std::option::Option<
    unsafe extern "C" fn(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint),
>;
extern "C" {
    pub static mut glad_glClearBufferfi: PFNGLCLEARBUFFERFIPROC;
}
pub type PFNGLGETSTRINGIPROC =
    ::std::option::Option<unsafe extern "C" fn(name: GLenum, index: GLuint) -> *const GLubyte>;
extern "C" {
    pub static mut glad_glGetStringi: PFNGLGETSTRINGIPROC;
}
pub type PFNGLISRENDERBUFFERPROC =
    ::std::option::Option<unsafe extern "C" fn(renderbuffer: GLuint) -> GLboolean>;
extern "C" {
    pub static mut glad_glIsRenderbuffer: PFNGLISRENDERBUFFERPROC;
}
pub type PFNGLBINDRENDERBUFFERPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, renderbuffer: GLuint)>;
extern "C" {
    pub static mut glad_glBindRenderbuffer: PFNGLBINDRENDERBUFFERPROC;
}
pub type PFNGLDELETERENDERBUFFERSPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, renderbuffers: *const GLuint)>;
extern "C" {
    pub static mut glad_glDeleteRenderbuffers: PFNGLDELETERENDERBUFFERSPROC;
}
pub type PFNGLGENRENDERBUFFERSPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, renderbuffers: *mut GLuint)>;
extern "C" {
    pub static mut glad_glGenRenderbuffers: PFNGLGENRENDERBUFFERSPROC;
}
pub type PFNGLRENDERBUFFERSTORAGEPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei),
>;
extern "C" {
    pub static mut glad_glRenderbufferStorage: PFNGLRENDERBUFFERSTORAGEPROC;
}
pub type PFNGLGETRENDERBUFFERPARAMETERIVPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
extern "C" {
    pub static mut glad_glGetRenderbufferParameteriv: PFNGLGETRENDERBUFFERPARAMETERIVPROC;
}
pub type PFNGLISFRAMEBUFFERPROC =
    ::std::option::Option<unsafe extern "C" fn(framebuffer: GLuint) -> GLboolean>;
extern "C" {
    pub static mut glad_glIsFramebuffer: PFNGLISFRAMEBUFFERPROC;
}
pub type PFNGLBINDFRAMEBUFFERPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, framebuffer: GLuint)>;
extern "C" {
    pub static mut glad_glBindFramebuffer: PFNGLBINDFRAMEBUFFERPROC;
}
pub type PFNGLDELETEFRAMEBUFFERSPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, framebuffers: *const GLuint)>;
extern "C" {
    pub static mut glad_glDeleteFramebuffers: PFNGLDELETEFRAMEBUFFERSPROC;
}
pub type PFNGLGENFRAMEBUFFERSPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, framebuffers: *mut GLuint)>;
extern "C" {
    pub static mut glad_glGenFramebuffers: PFNGLGENFRAMEBUFFERSPROC;
}
pub type PFNGLCHECKFRAMEBUFFERSTATUSPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum) -> GLenum>;
extern "C" {
    pub static mut glad_glCheckFramebufferStatus: PFNGLCHECKFRAMEBUFFERSTATUSPROC;
}
pub type PFNGLFRAMEBUFFERTEXTURE1DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
    ),
>;
extern "C" {
    pub static mut glad_glFramebufferTexture1D: PFNGLFRAMEBUFFERTEXTURE1DPROC;
}
pub type PFNGLFRAMEBUFFERTEXTURE2DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
    ),
>;
extern "C" {
    pub static mut glad_glFramebufferTexture2D: PFNGLFRAMEBUFFERTEXTURE2DPROC;
}
pub type PFNGLFRAMEBUFFERTEXTURE3DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
        zoffset: GLint,
    ),
>;
extern "C" {
    pub static mut glad_glFramebufferTexture3D: PFNGLFRAMEBUFFERTEXTURE3DPROC;
}
pub type PFNGLFRAMEBUFFERRENDERBUFFERPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        renderbuffertarget: GLenum,
        renderbuffer: GLuint,
    ),
>;
extern "C" {
    pub static mut glad_glFramebufferRenderbuffer: PFNGLFRAMEBUFFERRENDERBUFFERPROC;
}
pub type PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, attachment: GLenum, pname: GLenum, params: *mut GLint),
>;
extern "C" {
    pub static mut glad_glGetFramebufferAttachmentParameteriv:
        PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC;
}
pub type PFNGLGENERATEMIPMAPPROC = ::std::option::Option<unsafe extern "C" fn(target: GLenum)>;
extern "C" {
    pub static mut glad_glGenerateMipmap: PFNGLGENERATEMIPMAPPROC;
}
pub type PFNGLBLITFRAMEBUFFERPROC = ::std::option::Option<
    unsafe extern "C" fn(
        srcX0: GLint,
        srcY0: GLint,
        srcX1: GLint,
        srcY1: GLint,
        dstX0: GLint,
        dstY0: GLint,
        dstX1: GLint,
        dstY1: GLint,
        mask: GLbitfield,
        filter: GLenum,
    ),
>;
extern "C" {
    pub static mut glad_glBlitFramebuffer: PFNGLBLITFRAMEBUFFERPROC;
}
pub type PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glRenderbufferStorageMultisample: PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC;
}
pub type PFNGLFRAMEBUFFERTEXTURELAYERPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        texture: GLuint,
        level: GLint,
        layer: GLint,
    ),
>;
extern "C" {
    pub static mut glad_glFramebufferTextureLayer: PFNGLFRAMEBUFFERTEXTURELAYERPROC;
}
pub type PFNGLMAPBUFFERRANGEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        offset: GLintptr,
        length: GLsizeiptr,
        access: GLbitfield,
    ) -> *mut ::std::os::raw::c_void,
>;
extern "C" {
    pub static mut glad_glMapBufferRange: PFNGLMAPBUFFERRANGEPROC;
}
pub type PFNGLFLUSHMAPPEDBUFFERRANGEPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, offset: GLintptr, length: GLsizeiptr),
>;
extern "C" {
    pub static mut glad_glFlushMappedBufferRange: PFNGLFLUSHMAPPEDBUFFERRANGEPROC;
}
pub type PFNGLBINDVERTEXARRAYPROC = ::std::option::Option<unsafe extern "C" fn(array: GLuint)>;
extern "C" {
    pub static mut glad_glBindVertexArray: PFNGLBINDVERTEXARRAYPROC;
}
pub type PFNGLDELETEVERTEXARRAYSPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, arrays: *const GLuint)>;
extern "C" {
    pub static mut glad_glDeleteVertexArrays: PFNGLDELETEVERTEXARRAYSPROC;
}
pub type PFNGLGENVERTEXARRAYSPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, arrays: *mut GLuint)>;
extern "C" {
    pub static mut glad_glGenVertexArrays: PFNGLGENVERTEXARRAYSPROC;
}
pub type PFNGLISVERTEXARRAYPROC =
    ::std::option::Option<unsafe extern "C" fn(array: GLuint) -> GLboolean>;
extern "C" {
    pub static mut glad_glIsVertexArray: PFNGLISVERTEXARRAYPROC;
}
extern "C" {
    pub static mut GLAD_GL_VERSION_3_1: ::std::os::raw::c_int;
}
pub type PFNGLDRAWARRAYSINSTANCEDPROC = ::std::option::Option<
    unsafe extern "C" fn(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei),
>;
extern "C" {
    pub static mut glad_glDrawArraysInstanced: PFNGLDRAWARRAYSINSTANCEDPROC;
}
pub type PFNGLDRAWELEMENTSINSTANCEDPROC = ::std::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const ::std::os::raw::c_void,
        instancecount: GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glDrawElementsInstanced: PFNGLDRAWELEMENTSINSTANCEDPROC;
}
pub type PFNGLTEXBUFFERPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, internalformat: GLenum, buffer: GLuint),
>;
extern "C" {
    pub static mut glad_glTexBuffer: PFNGLTEXBUFFERPROC;
}
pub type PFNGLPRIMITIVERESTARTINDEXPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint)>;
extern "C" {
    pub static mut glad_glPrimitiveRestartIndex: PFNGLPRIMITIVERESTARTINDEXPROC;
}
pub type PFNGLCOPYBUFFERSUBDATAPROC = ::std::option::Option<
    unsafe extern "C" fn(
        readTarget: GLenum,
        writeTarget: GLenum,
        readOffset: GLintptr,
        writeOffset: GLintptr,
        size: GLsizeiptr,
    ),
>;
extern "C" {
    pub static mut glad_glCopyBufferSubData: PFNGLCOPYBUFFERSUBDATAPROC;
}
pub type PFNGLGETUNIFORMINDICESPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        uniformCount: GLsizei,
        uniformNames: *const *const GLchar,
        uniformIndices: *mut GLuint,
    ),
>;
extern "C" {
    pub static mut glad_glGetUniformIndices: PFNGLGETUNIFORMINDICESPROC;
}
pub type PFNGLGETACTIVEUNIFORMSIVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        uniformCount: GLsizei,
        uniformIndices: *const GLuint,
        pname: GLenum,
        params: *mut GLint,
    ),
>;
extern "C" {
    pub static mut glad_glGetActiveUniformsiv: PFNGLGETACTIVEUNIFORMSIVPROC;
}
pub type PFNGLGETACTIVEUNIFORMNAMEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        uniformIndex: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        uniformName: *mut GLchar,
    ),
>;
extern "C" {
    pub static mut glad_glGetActiveUniformName: PFNGLGETACTIVEUNIFORMNAMEPROC;
}
pub type PFNGLGETUNIFORMBLOCKINDEXPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, uniformBlockName: *const GLchar) -> GLuint,
>;
extern "C" {
    pub static mut glad_glGetUniformBlockIndex: PFNGLGETUNIFORMBLOCKINDEXPROC;
}
pub type PFNGLGETACTIVEUNIFORMBLOCKIVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        uniformBlockIndex: GLuint,
        pname: GLenum,
        params: *mut GLint,
    ),
>;
extern "C" {
    pub static mut glad_glGetActiveUniformBlockiv: PFNGLGETACTIVEUNIFORMBLOCKIVPROC;
}
pub type PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        uniformBlockIndex: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        uniformBlockName: *mut GLchar,
    ),
>;
extern "C" {
    pub static mut glad_glGetActiveUniformBlockName: PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC;
}
pub type PFNGLUNIFORMBLOCKBINDINGPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint),
>;
extern "C" {
    pub static mut glad_glUniformBlockBinding: PFNGLUNIFORMBLOCKBINDINGPROC;
}
extern "C" {
    pub static mut GLAD_GL_VERSION_3_2: ::std::os::raw::c_int;
}
pub type PFNGLDRAWELEMENTSBASEVERTEXPROC = ::std::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const ::std::os::raw::c_void,
        basevertex: GLint,
    ),
>;
extern "C" {
    pub static mut glad_glDrawElementsBaseVertex: PFNGLDRAWELEMENTSBASEVERTEXPROC;
}
pub type PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC = ::std::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        start: GLuint,
        end: GLuint,
        count: GLsizei,
        type_: GLenum,
        indices: *const ::std::os::raw::c_void,
        basevertex: GLint,
    ),
>;
extern "C" {
    pub static mut glad_glDrawRangeElementsBaseVertex: PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC;
}
pub type PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC = ::std::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const ::std::os::raw::c_void,
        instancecount: GLsizei,
        basevertex: GLint,
    ),
>;
extern "C" {
    pub static mut glad_glDrawElementsInstancedBaseVertex: PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC;
}
pub type PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC = ::std::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: *const GLsizei,
        type_: GLenum,
        indices: *const *const ::std::os::raw::c_void,
        drawcount: GLsizei,
        basevertex: *const GLint,
    ),
>;
extern "C" {
    pub static mut glad_glMultiDrawElementsBaseVertex: PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC;
}
pub type PFNGLPROVOKINGVERTEXPROC = ::std::option::Option<unsafe extern "C" fn(mode: GLenum)>;
extern "C" {
    pub static mut glad_glProvokingVertex: PFNGLPROVOKINGVERTEXPROC;
}
pub type PFNGLFENCESYNCPROC =
    ::std::option::Option<unsafe extern "C" fn(condition: GLenum, flags: GLbitfield) -> GLsync>;
extern "C" {
    pub static mut glad_glFenceSync: PFNGLFENCESYNCPROC;
}
pub type PFNGLISSYNCPROC = ::std::option::Option<unsafe extern "C" fn(sync: GLsync) -> GLboolean>;
extern "C" {
    pub static mut glad_glIsSync: PFNGLISSYNCPROC;
}
pub type PFNGLDELETESYNCPROC = ::std::option::Option<unsafe extern "C" fn(sync: GLsync)>;
extern "C" {
    pub static mut glad_glDeleteSync: PFNGLDELETESYNCPROC;
}
pub type PFNGLCLIENTWAITSYNCPROC = ::std::option::Option<
    unsafe extern "C" fn(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum,
>;
extern "C" {
    pub static mut glad_glClientWaitSync: PFNGLCLIENTWAITSYNCPROC;
}
pub type PFNGLWAITSYNCPROC =
    ::std::option::Option<unsafe extern "C" fn(sync: GLsync, flags: GLbitfield, timeout: GLuint64)>;
extern "C" {
    pub static mut glad_glWaitSync: PFNGLWAITSYNCPROC;
}
pub type PFNGLGETINTEGER64VPROC =
    ::std::option::Option<unsafe extern "C" fn(pname: GLenum, data: *mut GLint64)>;
extern "C" {
    pub static mut glad_glGetInteger64v: PFNGLGETINTEGER64VPROC;
}
pub type PFNGLGETSYNCIVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        sync: GLsync,
        pname: GLenum,
        count: GLsizei,
        length: *mut GLsizei,
        values: *mut GLint,
    ),
>;
extern "C" {
    pub static mut glad_glGetSynciv: PFNGLGETSYNCIVPROC;
}
pub type PFNGLGETINTEGER64I_VPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, data: *mut GLint64)>;
extern "C" {
    pub static mut glad_glGetInteger64i_v: PFNGLGETINTEGER64I_VPROC;
}
pub type PFNGLGETBUFFERPARAMETERI64VPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint64),
>;
extern "C" {
    pub static mut glad_glGetBufferParameteri64v: PFNGLGETBUFFERPARAMETERI64VPROC;
}
pub type PFNGLFRAMEBUFFERTEXTUREPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint),
>;
extern "C" {
    pub static mut glad_glFramebufferTexture: PFNGLFRAMEBUFFERTEXTUREPROC;
}
pub type PFNGLTEXIMAGE2DMULTISAMPLEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        fixedsamplelocations: GLboolean,
    ),
>;
extern "C" {
    pub static mut glad_glTexImage2DMultisample: PFNGLTEXIMAGE2DMULTISAMPLEPROC;
}
pub type PFNGLTEXIMAGE3DMULTISAMPLEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        fixedsamplelocations: GLboolean,
    ),
>;
extern "C" {
    pub static mut glad_glTexImage3DMultisample: PFNGLTEXIMAGE3DMULTISAMPLEPROC;
}
pub type PFNGLGETMULTISAMPLEFVPROC =
    ::std::option::Option<unsafe extern "C" fn(pname: GLenum, index: GLuint, val: *mut GLfloat)>;
extern "C" {
    pub static mut glad_glGetMultisamplefv: PFNGLGETMULTISAMPLEFVPROC;
}
pub type PFNGLSAMPLEMASKIPROC =
    ::std::option::Option<unsafe extern "C" fn(maskNumber: GLuint, mask: GLbitfield)>;
extern "C" {
    pub static mut glad_glSampleMaski: PFNGLSAMPLEMASKIPROC;
}
extern "C" {
    pub static mut GLAD_GL_VERSION_3_3: ::std::os::raw::c_int;
}
pub type PFNGLBINDFRAGDATALOCATIONINDEXEDPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, colorNumber: GLuint, index: GLuint, name: *const GLchar),
>;
extern "C" {
    pub static mut glad_glBindFragDataLocationIndexed: PFNGLBINDFRAGDATALOCATIONINDEXEDPROC;
}
pub type PFNGLGETFRAGDATAINDEXPROC =
    ::std::option::Option<unsafe extern "C" fn(program: GLuint, name: *const GLchar) -> GLint>;
extern "C" {
    pub static mut glad_glGetFragDataIndex: PFNGLGETFRAGDATAINDEXPROC;
}
pub type PFNGLGENSAMPLERSPROC =
    ::std::option::Option<unsafe extern "C" fn(count: GLsizei, samplers: *mut GLuint)>;
extern "C" {
    pub static mut glad_glGenSamplers: PFNGLGENSAMPLERSPROC;
}
pub type PFNGLDELETESAMPLERSPROC =
    ::std::option::Option<unsafe extern "C" fn(count: GLsizei, samplers: *const GLuint)>;
extern "C" {
    pub static mut glad_glDeleteSamplers: PFNGLDELETESAMPLERSPROC;
}
pub type PFNGLISSAMPLERPROC =
    ::std::option::Option<unsafe extern "C" fn(sampler: GLuint) -> GLboolean>;
extern "C" {
    pub static mut glad_glIsSampler: PFNGLISSAMPLERPROC;
}
pub type PFNGLBINDSAMPLERPROC =
    ::std::option::Option<unsafe extern "C" fn(unit: GLuint, sampler: GLuint)>;
extern "C" {
    pub static mut glad_glBindSampler: PFNGLBINDSAMPLERPROC;
}
pub type PFNGLSAMPLERPARAMETERIPROC =
    ::std::option::Option<unsafe extern "C" fn(sampler: GLuint, pname: GLenum, param: GLint)>;
extern "C" {
    pub static mut glad_glSamplerParameteri: PFNGLSAMPLERPARAMETERIPROC;
}
pub type PFNGLSAMPLERPARAMETERIVPROC = ::std::option::Option<
    unsafe extern "C" fn(sampler: GLuint, pname: GLenum, param: *const GLint),
>;
extern "C" {
    pub static mut glad_glSamplerParameteriv: PFNGLSAMPLERPARAMETERIVPROC;
}
pub type PFNGLSAMPLERPARAMETERFPROC =
    ::std::option::Option<unsafe extern "C" fn(sampler: GLuint, pname: GLenum, param: GLfloat)>;
extern "C" {
    pub static mut glad_glSamplerParameterf: PFNGLSAMPLERPARAMETERFPROC;
}
pub type PFNGLSAMPLERPARAMETERFVPROC = ::std::option::Option<
    unsafe extern "C" fn(sampler: GLuint, pname: GLenum, param: *const GLfloat),
>;
extern "C" {
    pub static mut glad_glSamplerParameterfv: PFNGLSAMPLERPARAMETERFVPROC;
}
pub type PFNGLSAMPLERPARAMETERIIVPROC = ::std::option::Option<
    unsafe extern "C" fn(sampler: GLuint, pname: GLenum, param: *const GLint),
>;
extern "C" {
    pub static mut glad_glSamplerParameterIiv: PFNGLSAMPLERPARAMETERIIVPROC;
}
pub type PFNGLSAMPLERPARAMETERIUIVPROC = ::std::option::Option<
    unsafe extern "C" fn(sampler: GLuint, pname: GLenum, param: *const GLuint),
>;
extern "C" {
    pub static mut glad_glSamplerParameterIuiv: PFNGLSAMPLERPARAMETERIUIVPROC;
}
pub type PFNGLGETSAMPLERPARAMETERIVPROC =
    ::std::option::Option<unsafe extern "C" fn(sampler: GLuint, pname: GLenum, params: *mut GLint)>;
extern "C" {
    pub static mut glad_glGetSamplerParameteriv: PFNGLGETSAMPLERPARAMETERIVPROC;
}
pub type PFNGLGETSAMPLERPARAMETERIIVPROC =
    ::std::option::Option<unsafe extern "C" fn(sampler: GLuint, pname: GLenum, params: *mut GLint)>;
extern "C" {
    pub static mut glad_glGetSamplerParameterIiv: PFNGLGETSAMPLERPARAMETERIIVPROC;
}
pub type PFNGLGETSAMPLERPARAMETERFVPROC = ::std::option::Option<
    unsafe extern "C" fn(sampler: GLuint, pname: GLenum, params: *mut GLfloat),
>;
extern "C" {
    pub static mut glad_glGetSamplerParameterfv: PFNGLGETSAMPLERPARAMETERFVPROC;
}
pub type PFNGLGETSAMPLERPARAMETERIUIVPROC = ::std::option::Option<
    unsafe extern "C" fn(sampler: GLuint, pname: GLenum, params: *mut GLuint),
>;
extern "C" {
    pub static mut glad_glGetSamplerParameterIuiv: PFNGLGETSAMPLERPARAMETERIUIVPROC;
}
pub type PFNGLQUERYCOUNTERPROC =
    ::std::option::Option<unsafe extern "C" fn(id: GLuint, target: GLenum)>;
extern "C" {
    pub static mut glad_glQueryCounter: PFNGLQUERYCOUNTERPROC;
}
pub type PFNGLGETQUERYOBJECTI64VPROC =
    ::std::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLint64)>;
extern "C" {
    pub static mut glad_glGetQueryObjecti64v: PFNGLGETQUERYOBJECTI64VPROC;
}
pub type PFNGLGETQUERYOBJECTUI64VPROC =
    ::std::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLuint64)>;
extern "C" {
    pub static mut glad_glGetQueryObjectui64v: PFNGLGETQUERYOBJECTUI64VPROC;
}
pub type PFNGLVERTEXATTRIBDIVISORPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, divisor: GLuint)>;
extern "C" {
    pub static mut glad_glVertexAttribDivisor: PFNGLVERTEXATTRIBDIVISORPROC;
}
pub type PFNGLVERTEXATTRIBP1UIPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint),
>;
extern "C" {
    pub static mut glad_glVertexAttribP1ui: PFNGLVERTEXATTRIBP1UIPROC;
}
pub type PFNGLVERTEXATTRIBP1UIVPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: *const GLuint),
>;
extern "C" {
    pub static mut glad_glVertexAttribP1uiv: PFNGLVERTEXATTRIBP1UIVPROC;
}
pub type PFNGLVERTEXATTRIBP2UIPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint),
>;
extern "C" {
    pub static mut glad_glVertexAttribP2ui: PFNGLVERTEXATTRIBP2UIPROC;
}
pub type PFNGLVERTEXATTRIBP2UIVPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: *const GLuint),
>;
extern "C" {
    pub static mut glad_glVertexAttribP2uiv: PFNGLVERTEXATTRIBP2UIVPROC;
}
pub type PFNGLVERTEXATTRIBP3UIPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint),
>;
extern "C" {
    pub static mut glad_glVertexAttribP3ui: PFNGLVERTEXATTRIBP3UIPROC;
}
pub type PFNGLVERTEXATTRIBP3UIVPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: *const GLuint),
>;
extern "C" {
    pub static mut glad_glVertexAttribP3uiv: PFNGLVERTEXATTRIBP3UIVPROC;
}
pub type PFNGLVERTEXATTRIBP4UIPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint),
>;
extern "C" {
    pub static mut glad_glVertexAttribP4ui: PFNGLVERTEXATTRIBP4UIPROC;
}
pub type PFNGLVERTEXATTRIBP4UIVPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: *const GLuint),
>;
extern "C" {
    pub static mut glad_glVertexAttribP4uiv: PFNGLVERTEXATTRIBP4UIVPROC;
}
pub type PFNGLVERTEXP2UIPROC =
    ::std::option::Option<unsafe extern "C" fn(type_: GLenum, value: GLuint)>;
extern "C" {
    pub static mut glad_glVertexP2ui: PFNGLVERTEXP2UIPROC;
}
pub type PFNGLVERTEXP2UIVPROC =
    ::std::option::Option<unsafe extern "C" fn(type_: GLenum, value: *const GLuint)>;
extern "C" {
    pub static mut glad_glVertexP2uiv: PFNGLVERTEXP2UIVPROC;
}
pub type PFNGLVERTEXP3UIPROC =
    ::std::option::Option<unsafe extern "C" fn(type_: GLenum, value: GLuint)>;
extern "C" {
    pub static mut glad_glVertexP3ui: PFNGLVERTEXP3UIPROC;
}
pub type PFNGLVERTEXP3UIVPROC =
    ::std::option::Option<unsafe extern "C" fn(type_: GLenum, value: *const GLuint)>;
extern "C" {
    pub static mut glad_glVertexP3uiv: PFNGLVERTEXP3UIVPROC;
}
pub type PFNGLVERTEXP4UIPROC =
    ::std::option::Option<unsafe extern "C" fn(type_: GLenum, value: GLuint)>;
extern "C" {
    pub static mut glad_glVertexP4ui: PFNGLVERTEXP4UIPROC;
}
pub type PFNGLVERTEXP4UIVPROC =
    ::std::option::Option<unsafe extern "C" fn(type_: GLenum, value: *const GLuint)>;
extern "C" {
    pub static mut glad_glVertexP4uiv: PFNGLVERTEXP4UIVPROC;
}
pub type PFNGLTEXCOORDP1UIPROC =
    ::std::option::Option<unsafe extern "C" fn(type_: GLenum, coords: GLuint)>;
extern "C" {
    pub static mut glad_glTexCoordP1ui: PFNGLTEXCOORDP1UIPROC;
}
pub type PFNGLTEXCOORDP1UIVPROC =
    ::std::option::Option<unsafe extern "C" fn(type_: GLenum, coords: *const GLuint)>;
extern "C" {
    pub static mut glad_glTexCoordP1uiv: PFNGLTEXCOORDP1UIVPROC;
}
pub type PFNGLTEXCOORDP2UIPROC =
    ::std::option::Option<unsafe extern "C" fn(type_: GLenum, coords: GLuint)>;
extern "C" {
    pub static mut glad_glTexCoordP2ui: PFNGLTEXCOORDP2UIPROC;
}
pub type PFNGLTEXCOORDP2UIVPROC =
    ::std::option::Option<unsafe extern "C" fn(type_: GLenum, coords: *const GLuint)>;
extern "C" {
    pub static mut glad_glTexCoordP2uiv: PFNGLTEXCOORDP2UIVPROC;
}
pub type PFNGLTEXCOORDP3UIPROC =
    ::std::option::Option<unsafe extern "C" fn(type_: GLenum, coords: GLuint)>;
extern "C" {
    pub static mut glad_glTexCoordP3ui: PFNGLTEXCOORDP3UIPROC;
}
pub type PFNGLTEXCOORDP3UIVPROC =
    ::std::option::Option<unsafe extern "C" fn(type_: GLenum, coords: *const GLuint)>;
extern "C" {
    pub static mut glad_glTexCoordP3uiv: PFNGLTEXCOORDP3UIVPROC;
}
pub type PFNGLTEXCOORDP4UIPROC =
    ::std::option::Option<unsafe extern "C" fn(type_: GLenum, coords: GLuint)>;
extern "C" {
    pub static mut glad_glTexCoordP4ui: PFNGLTEXCOORDP4UIPROC;
}
pub type PFNGLTEXCOORDP4UIVPROC =
    ::std::option::Option<unsafe extern "C" fn(type_: GLenum, coords: *const GLuint)>;
extern "C" {
    pub static mut glad_glTexCoordP4uiv: PFNGLTEXCOORDP4UIVPROC;
}
pub type PFNGLMULTITEXCOORDP1UIPROC =
    ::std::option::Option<unsafe extern "C" fn(texture: GLenum, type_: GLenum, coords: GLuint)>;
extern "C" {
    pub static mut glad_glMultiTexCoordP1ui: PFNGLMULTITEXCOORDP1UIPROC;
}
pub type PFNGLMULTITEXCOORDP1UIVPROC = ::std::option::Option<
    unsafe extern "C" fn(texture: GLenum, type_: GLenum, coords: *const GLuint),
>;
extern "C" {
    pub static mut glad_glMultiTexCoordP1uiv: PFNGLMULTITEXCOORDP1UIVPROC;
}
pub type PFNGLMULTITEXCOORDP2UIPROC =
    ::std::option::Option<unsafe extern "C" fn(texture: GLenum, type_: GLenum, coords: GLuint)>;
extern "C" {
    pub static mut glad_glMultiTexCoordP2ui: PFNGLMULTITEXCOORDP2UIPROC;
}
pub type PFNGLMULTITEXCOORDP2UIVPROC = ::std::option::Option<
    unsafe extern "C" fn(texture: GLenum, type_: GLenum, coords: *const GLuint),
>;
extern "C" {
    pub static mut glad_glMultiTexCoordP2uiv: PFNGLMULTITEXCOORDP2UIVPROC;
}
pub type PFNGLMULTITEXCOORDP3UIPROC =
    ::std::option::Option<unsafe extern "C" fn(texture: GLenum, type_: GLenum, coords: GLuint)>;
extern "C" {
    pub static mut glad_glMultiTexCoordP3ui: PFNGLMULTITEXCOORDP3UIPROC;
}
pub type PFNGLMULTITEXCOORDP3UIVPROC = ::std::option::Option<
    unsafe extern "C" fn(texture: GLenum, type_: GLenum, coords: *const GLuint),
>;
extern "C" {
    pub static mut glad_glMultiTexCoordP3uiv: PFNGLMULTITEXCOORDP3UIVPROC;
}
pub type PFNGLMULTITEXCOORDP4UIPROC =
    ::std::option::Option<unsafe extern "C" fn(texture: GLenum, type_: GLenum, coords: GLuint)>;
extern "C" {
    pub static mut glad_glMultiTexCoordP4ui: PFNGLMULTITEXCOORDP4UIPROC;
}
pub type PFNGLMULTITEXCOORDP4UIVPROC = ::std::option::Option<
    unsafe extern "C" fn(texture: GLenum, type_: GLenum, coords: *const GLuint),
>;
extern "C" {
    pub static mut glad_glMultiTexCoordP4uiv: PFNGLMULTITEXCOORDP4UIVPROC;
}
pub type PFNGLNORMALP3UIPROC =
    ::std::option::Option<unsafe extern "C" fn(type_: GLenum, coords: GLuint)>;
extern "C" {
    pub static mut glad_glNormalP3ui: PFNGLNORMALP3UIPROC;
}
pub type PFNGLNORMALP3UIVPROC =
    ::std::option::Option<unsafe extern "C" fn(type_: GLenum, coords: *const GLuint)>;
extern "C" {
    pub static mut glad_glNormalP3uiv: PFNGLNORMALP3UIVPROC;
}
pub type PFNGLCOLORP3UIPROC =
    ::std::option::Option<unsafe extern "C" fn(type_: GLenum, color: GLuint)>;
extern "C" {
    pub static mut glad_glColorP3ui: PFNGLCOLORP3UIPROC;
}
pub type PFNGLCOLORP3UIVPROC =
    ::std::option::Option<unsafe extern "C" fn(type_: GLenum, color: *const GLuint)>;
extern "C" {
    pub static mut glad_glColorP3uiv: PFNGLCOLORP3UIVPROC;
}
pub type PFNGLCOLORP4UIPROC =
    ::std::option::Option<unsafe extern "C" fn(type_: GLenum, color: GLuint)>;
extern "C" {
    pub static mut glad_glColorP4ui: PFNGLCOLORP4UIPROC;
}
pub type PFNGLCOLORP4UIVPROC =
    ::std::option::Option<unsafe extern "C" fn(type_: GLenum, color: *const GLuint)>;
extern "C" {
    pub static mut glad_glColorP4uiv: PFNGLCOLORP4UIVPROC;
}
pub type PFNGLSECONDARYCOLORP3UIPROC =
    ::std::option::Option<unsafe extern "C" fn(type_: GLenum, color: GLuint)>;
extern "C" {
    pub static mut glad_glSecondaryColorP3ui: PFNGLSECONDARYCOLORP3UIPROC;
}
pub type PFNGLSECONDARYCOLORP3UIVPROC =
    ::std::option::Option<unsafe extern "C" fn(type_: GLenum, color: *const GLuint)>;
extern "C" {
    pub static mut glad_glSecondaryColorP3uiv: PFNGLSECONDARYCOLORP3UIVPROC;
}
extern "C" {
    pub static mut GLAD_GL_VERSION_4_0: ::std::os::raw::c_int;
}
pub type PFNGLMINSAMPLESHADINGPROC = ::std::option::Option<unsafe extern "C" fn(value: GLfloat)>;
extern "C" {
    pub static mut glad_glMinSampleShading: PFNGLMINSAMPLESHADINGPROC;
}
pub type PFNGLBLENDEQUATIONIPROC =
    ::std::option::Option<unsafe extern "C" fn(buf: GLuint, mode: GLenum)>;
extern "C" {
    pub static mut glad_glBlendEquationi: PFNGLBLENDEQUATIONIPROC;
}
pub type PFNGLBLENDEQUATIONSEPARATEIPROC =
    ::std::option::Option<unsafe extern "C" fn(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum)>;
extern "C" {
    pub static mut glad_glBlendEquationSeparatei: PFNGLBLENDEQUATIONSEPARATEIPROC;
}
pub type PFNGLBLENDFUNCIPROC =
    ::std::option::Option<unsafe extern "C" fn(buf: GLuint, src: GLenum, dst: GLenum)>;
extern "C" {
    pub static mut glad_glBlendFunci: PFNGLBLENDFUNCIPROC;
}
pub type PFNGLBLENDFUNCSEPARATEIPROC = ::std::option::Option<
    unsafe extern "C" fn(
        buf: GLuint,
        srcRGB: GLenum,
        dstRGB: GLenum,
        srcAlpha: GLenum,
        dstAlpha: GLenum,
    ),
>;
extern "C" {
    pub static mut glad_glBlendFuncSeparatei: PFNGLBLENDFUNCSEPARATEIPROC;
}
pub type PFNGLDRAWARRAYSINDIRECTPROC = ::std::option::Option<
    unsafe extern "C" fn(mode: GLenum, indirect: *const ::std::os::raw::c_void),
>;
extern "C" {
    pub static mut glad_glDrawArraysIndirect: PFNGLDRAWARRAYSINDIRECTPROC;
}
pub type PFNGLDRAWELEMENTSINDIRECTPROC = ::std::option::Option<
    unsafe extern "C" fn(mode: GLenum, type_: GLenum, indirect: *const ::std::os::raw::c_void),
>;
extern "C" {
    pub static mut glad_glDrawElementsIndirect: PFNGLDRAWELEMENTSINDIRECTPROC;
}
pub type PFNGLUNIFORM1DPROC =
    ::std::option::Option<unsafe extern "C" fn(location: GLint, x: GLdouble)>;
extern "C" {
    pub static mut glad_glUniform1d: PFNGLUNIFORM1DPROC;
}
pub type PFNGLUNIFORM2DPROC =
    ::std::option::Option<unsafe extern "C" fn(location: GLint, x: GLdouble, y: GLdouble)>;
extern "C" {
    pub static mut glad_glUniform2d: PFNGLUNIFORM2DPROC;
}
pub type PFNGLUNIFORM3DPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble),
>;
extern "C" {
    pub static mut glad_glUniform3d: PFNGLUNIFORM3DPROC;
}
pub type PFNGLUNIFORM4DPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble),
>;
extern "C" {
    pub static mut glad_glUniform4d: PFNGLUNIFORM4DPROC;
}
pub type PFNGLUNIFORM1DVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLdouble),
>;
extern "C" {
    pub static mut glad_glUniform1dv: PFNGLUNIFORM1DVPROC;
}
pub type PFNGLUNIFORM2DVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLdouble),
>;
extern "C" {
    pub static mut glad_glUniform2dv: PFNGLUNIFORM2DVPROC;
}
pub type PFNGLUNIFORM3DVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLdouble),
>;
extern "C" {
    pub static mut glad_glUniform3dv: PFNGLUNIFORM3DVPROC;
}
pub type PFNGLUNIFORM4DVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLdouble),
>;
extern "C" {
    pub static mut glad_glUniform4dv: PFNGLUNIFORM4DVPROC;
}
pub type PFNGLUNIFORMMATRIX2DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
extern "C" {
    pub static mut glad_glUniformMatrix2dv: PFNGLUNIFORMMATRIX2DVPROC;
}
pub type PFNGLUNIFORMMATRIX3DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
extern "C" {
    pub static mut glad_glUniformMatrix3dv: PFNGLUNIFORMMATRIX3DVPROC;
}
pub type PFNGLUNIFORMMATRIX4DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
extern "C" {
    pub static mut glad_glUniformMatrix4dv: PFNGLUNIFORMMATRIX4DVPROC;
}
pub type PFNGLUNIFORMMATRIX2X3DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
extern "C" {
    pub static mut glad_glUniformMatrix2x3dv: PFNGLUNIFORMMATRIX2X3DVPROC;
}
pub type PFNGLUNIFORMMATRIX2X4DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
extern "C" {
    pub static mut glad_glUniformMatrix2x4dv: PFNGLUNIFORMMATRIX2X4DVPROC;
}
pub type PFNGLUNIFORMMATRIX3X2DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
extern "C" {
    pub static mut glad_glUniformMatrix3x2dv: PFNGLUNIFORMMATRIX3X2DVPROC;
}
pub type PFNGLUNIFORMMATRIX3X4DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
extern "C" {
    pub static mut glad_glUniformMatrix3x4dv: PFNGLUNIFORMMATRIX3X4DVPROC;
}
pub type PFNGLUNIFORMMATRIX4X2DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
extern "C" {
    pub static mut glad_glUniformMatrix4x2dv: PFNGLUNIFORMMATRIX4X2DVPROC;
}
pub type PFNGLUNIFORMMATRIX4X3DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
extern "C" {
    pub static mut glad_glUniformMatrix4x3dv: PFNGLUNIFORMMATRIX4X3DVPROC;
}
pub type PFNGLGETUNIFORMDVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, params: *mut GLdouble),
>;
extern "C" {
    pub static mut glad_glGetUniformdv: PFNGLGETUNIFORMDVPROC;
}
pub type PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, shadertype: GLenum, name: *const GLchar) -> GLint,
>;
extern "C" {
    pub static mut glad_glGetSubroutineUniformLocation: PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC;
}
pub type PFNGLGETSUBROUTINEINDEXPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, shadertype: GLenum, name: *const GLchar) -> GLuint,
>;
extern "C" {
    pub static mut glad_glGetSubroutineIndex: PFNGLGETSUBROUTINEINDEXPROC;
}
pub type PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        shadertype: GLenum,
        index: GLuint,
        pname: GLenum,
        values: *mut GLint,
    ),
>;
extern "C" {
    pub static mut glad_glGetActiveSubroutineUniformiv: PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC;
}
pub type PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        shadertype: GLenum,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        name: *mut GLchar,
    ),
>;
extern "C" {
    pub static mut glad_glGetActiveSubroutineUniformName: PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC;
}
pub type PFNGLGETACTIVESUBROUTINENAMEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        shadertype: GLenum,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        name: *mut GLchar,
    ),
>;
extern "C" {
    pub static mut glad_glGetActiveSubroutineName: PFNGLGETACTIVESUBROUTINENAMEPROC;
}
pub type PFNGLUNIFORMSUBROUTINESUIVPROC = ::std::option::Option<
    unsafe extern "C" fn(shadertype: GLenum, count: GLsizei, indices: *const GLuint),
>;
extern "C" {
    pub static mut glad_glUniformSubroutinesuiv: PFNGLUNIFORMSUBROUTINESUIVPROC;
}
pub type PFNGLGETUNIFORMSUBROUTINEUIVPROC = ::std::option::Option<
    unsafe extern "C" fn(shadertype: GLenum, location: GLint, params: *mut GLuint),
>;
extern "C" {
    pub static mut glad_glGetUniformSubroutineuiv: PFNGLGETUNIFORMSUBROUTINEUIVPROC;
}
pub type PFNGLGETPROGRAMSTAGEIVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, shadertype: GLenum, pname: GLenum, values: *mut GLint),
>;
extern "C" {
    pub static mut glad_glGetProgramStageiv: PFNGLGETPROGRAMSTAGEIVPROC;
}
pub type PFNGLPATCHPARAMETERIPROC =
    ::std::option::Option<unsafe extern "C" fn(pname: GLenum, value: GLint)>;
extern "C" {
    pub static mut glad_glPatchParameteri: PFNGLPATCHPARAMETERIPROC;
}
pub type PFNGLPATCHPARAMETERFVPROC =
    ::std::option::Option<unsafe extern "C" fn(pname: GLenum, values: *const GLfloat)>;
extern "C" {
    pub static mut glad_glPatchParameterfv: PFNGLPATCHPARAMETERFVPROC;
}
pub type PFNGLBINDTRANSFORMFEEDBACKPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, id: GLuint)>;
extern "C" {
    pub static mut glad_glBindTransformFeedback: PFNGLBINDTRANSFORMFEEDBACKPROC;
}
pub type PFNGLDELETETRANSFORMFEEDBACKSPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, ids: *const GLuint)>;
extern "C" {
    pub static mut glad_glDeleteTransformFeedbacks: PFNGLDELETETRANSFORMFEEDBACKSPROC;
}
pub type PFNGLGENTRANSFORMFEEDBACKSPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, ids: *mut GLuint)>;
extern "C" {
    pub static mut glad_glGenTransformFeedbacks: PFNGLGENTRANSFORMFEEDBACKSPROC;
}
pub type PFNGLISTRANSFORMFEEDBACKPROC =
    ::std::option::Option<unsafe extern "C" fn(id: GLuint) -> GLboolean>;
extern "C" {
    pub static mut glad_glIsTransformFeedback: PFNGLISTRANSFORMFEEDBACKPROC;
}
pub type PFNGLPAUSETRANSFORMFEEDBACKPROC = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub static mut glad_glPauseTransformFeedback: PFNGLPAUSETRANSFORMFEEDBACKPROC;
}
pub type PFNGLRESUMETRANSFORMFEEDBACKPROC = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub static mut glad_glResumeTransformFeedback: PFNGLRESUMETRANSFORMFEEDBACKPROC;
}
pub type PFNGLDRAWTRANSFORMFEEDBACKPROC =
    ::std::option::Option<unsafe extern "C" fn(mode: GLenum, id: GLuint)>;
extern "C" {
    pub static mut glad_glDrawTransformFeedback: PFNGLDRAWTRANSFORMFEEDBACKPROC;
}
pub type PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC =
    ::std::option::Option<unsafe extern "C" fn(mode: GLenum, id: GLuint, stream: GLuint)>;
extern "C" {
    pub static mut glad_glDrawTransformFeedbackStream: PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC;
}
pub type PFNGLBEGINQUERYINDEXEDPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, id: GLuint)>;
extern "C" {
    pub static mut glad_glBeginQueryIndexed: PFNGLBEGINQUERYINDEXEDPROC;
}
pub type PFNGLENDQUERYINDEXEDPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint)>;
extern "C" {
    pub static mut glad_glEndQueryIndexed: PFNGLENDQUERYINDEXEDPROC;
}
pub type PFNGLGETQUERYINDEXEDIVPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, pname: GLenum, params: *mut GLint),
>;
extern "C" {
    pub static mut glad_glGetQueryIndexediv: PFNGLGETQUERYINDEXEDIVPROC;
}
extern "C" {
    pub static mut GLAD_GL_VERSION_4_1: ::std::os::raw::c_int;
}
pub type PFNGLRELEASESHADERCOMPILERPROC = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub static mut glad_glReleaseShaderCompiler: PFNGLRELEASESHADERCOMPILERPROC;
}
pub type PFNGLSHADERBINARYPROC = ::std::option::Option<
    unsafe extern "C" fn(
        count: GLsizei,
        shaders: *const GLuint,
        binaryFormat: GLenum,
        binary: *const ::std::os::raw::c_void,
        length: GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glShaderBinary: PFNGLSHADERBINARYPROC;
}
pub type PFNGLGETSHADERPRECISIONFORMATPROC = ::std::option::Option<
    unsafe extern "C" fn(
        shadertype: GLenum,
        precisiontype: GLenum,
        range: *mut GLint,
        precision: *mut GLint,
    ),
>;
extern "C" {
    pub static mut glad_glGetShaderPrecisionFormat: PFNGLGETSHADERPRECISIONFORMATPROC;
}
pub type PFNGLDEPTHRANGEFPROC = ::std::option::Option<unsafe extern "C" fn(n: GLfloat, f: GLfloat)>;
extern "C" {
    pub static mut glad_glDepthRangef: PFNGLDEPTHRANGEFPROC;
}
pub type PFNGLCLEARDEPTHFPROC = ::std::option::Option<unsafe extern "C" fn(d: GLfloat)>;
extern "C" {
    pub static mut glad_glClearDepthf: PFNGLCLEARDEPTHFPROC;
}
pub type PFNGLGETPROGRAMBINARYPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        binaryFormat: *mut GLenum,
        binary: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glGetProgramBinary: PFNGLGETPROGRAMBINARYPROC;
}
pub type PFNGLPROGRAMBINARYPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        binaryFormat: GLenum,
        binary: *const ::std::os::raw::c_void,
        length: GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glProgramBinary: PFNGLPROGRAMBINARYPROC;
}
pub type PFNGLPROGRAMPARAMETERIPROC =
    ::std::option::Option<unsafe extern "C" fn(program: GLuint, pname: GLenum, value: GLint)>;
extern "C" {
    pub static mut glad_glProgramParameteri: PFNGLPROGRAMPARAMETERIPROC;
}
pub type PFNGLUSEPROGRAMSTAGESPROC = ::std::option::Option<
    unsafe extern "C" fn(pipeline: GLuint, stages: GLbitfield, program: GLuint),
>;
extern "C" {
    pub static mut glad_glUseProgramStages: PFNGLUSEPROGRAMSTAGESPROC;
}
pub type PFNGLACTIVESHADERPROGRAMPROC =
    ::std::option::Option<unsafe extern "C" fn(pipeline: GLuint, program: GLuint)>;
extern "C" {
    pub static mut glad_glActiveShaderProgram: PFNGLACTIVESHADERPROGRAMPROC;
}
pub type PFNGLCREATESHADERPROGRAMVPROC = ::std::option::Option<
    unsafe extern "C" fn(type_: GLenum, count: GLsizei, strings: *const *const GLchar) -> GLuint,
>;
extern "C" {
    pub static mut glad_glCreateShaderProgramv: PFNGLCREATESHADERPROGRAMVPROC;
}
pub type PFNGLBINDPROGRAMPIPELINEPROC =
    ::std::option::Option<unsafe extern "C" fn(pipeline: GLuint)>;
extern "C" {
    pub static mut glad_glBindProgramPipeline: PFNGLBINDPROGRAMPIPELINEPROC;
}
pub type PFNGLDELETEPROGRAMPIPELINESPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, pipelines: *const GLuint)>;
extern "C" {
    pub static mut glad_glDeleteProgramPipelines: PFNGLDELETEPROGRAMPIPELINESPROC;
}
pub type PFNGLGENPROGRAMPIPELINESPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, pipelines: *mut GLuint)>;
extern "C" {
    pub static mut glad_glGenProgramPipelines: PFNGLGENPROGRAMPIPELINESPROC;
}
pub type PFNGLISPROGRAMPIPELINEPROC =
    ::std::option::Option<unsafe extern "C" fn(pipeline: GLuint) -> GLboolean>;
extern "C" {
    pub static mut glad_glIsProgramPipeline: PFNGLISPROGRAMPIPELINEPROC;
}
pub type PFNGLGETPROGRAMPIPELINEIVPROC = ::std::option::Option<
    unsafe extern "C" fn(pipeline: GLuint, pname: GLenum, params: *mut GLint),
>;
extern "C" {
    pub static mut glad_glGetProgramPipelineiv: PFNGLGETPROGRAMPIPELINEIVPROC;
}
pub type PFNGLPROGRAMUNIFORM1IPROC =
    ::std::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLint)>;
extern "C" {
    pub static mut glad_glProgramUniform1i: PFNGLPROGRAMUNIFORM1IPROC;
}
pub type PFNGLPROGRAMUNIFORM1IVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLint),
>;
extern "C" {
    pub static mut glad_glProgramUniform1iv: PFNGLPROGRAMUNIFORM1IVPROC;
}
pub type PFNGLPROGRAMUNIFORM1FPROC =
    ::std::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLfloat)>;
extern "C" {
    pub static mut glad_glProgramUniform1f: PFNGLPROGRAMUNIFORM1FPROC;
}
pub type PFNGLPROGRAMUNIFORM1FVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat),
>;
extern "C" {
    pub static mut glad_glProgramUniform1fv: PFNGLPROGRAMUNIFORM1FVPROC;
}
pub type PFNGLPROGRAMUNIFORM1DPROC =
    ::std::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLdouble)>;
extern "C" {
    pub static mut glad_glProgramUniform1d: PFNGLPROGRAMUNIFORM1DPROC;
}
pub type PFNGLPROGRAMUNIFORM1DVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble),
>;
extern "C" {
    pub static mut glad_glProgramUniform1dv: PFNGLPROGRAMUNIFORM1DVPROC;
}
pub type PFNGLPROGRAMUNIFORM1UIPROC =
    ::std::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLuint)>;
extern "C" {
    pub static mut glad_glProgramUniform1ui: PFNGLPROGRAMUNIFORM1UIPROC;
}
pub type PFNGLPROGRAMUNIFORM1UIVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint),
>;
extern "C" {
    pub static mut glad_glProgramUniform1uiv: PFNGLPROGRAMUNIFORM1UIVPROC;
}
pub type PFNGLPROGRAMUNIFORM2IPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLint, v1: GLint),
>;
extern "C" {
    pub static mut glad_glProgramUniform2i: PFNGLPROGRAMUNIFORM2IPROC;
}
pub type PFNGLPROGRAMUNIFORM2IVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLint),
>;
extern "C" {
    pub static mut glad_glProgramUniform2iv: PFNGLPROGRAMUNIFORM2IVPROC;
}
pub type PFNGLPROGRAMUNIFORM2FPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat),
>;
extern "C" {
    pub static mut glad_glProgramUniform2f: PFNGLPROGRAMUNIFORM2FPROC;
}
pub type PFNGLPROGRAMUNIFORM2FVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat),
>;
extern "C" {
    pub static mut glad_glProgramUniform2fv: PFNGLPROGRAMUNIFORM2FVPROC;
}
pub type PFNGLPROGRAMUNIFORM2DPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble),
>;
extern "C" {
    pub static mut glad_glProgramUniform2d: PFNGLPROGRAMUNIFORM2DPROC;
}
pub type PFNGLPROGRAMUNIFORM2DVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble),
>;
extern "C" {
    pub static mut glad_glProgramUniform2dv: PFNGLPROGRAMUNIFORM2DVPROC;
}
pub type PFNGLPROGRAMUNIFORM2UIPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLuint, v1: GLuint),
>;
extern "C" {
    pub static mut glad_glProgramUniform2ui: PFNGLPROGRAMUNIFORM2UIPROC;
}
pub type PFNGLPROGRAMUNIFORM2UIVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint),
>;
extern "C" {
    pub static mut glad_glProgramUniform2uiv: PFNGLPROGRAMUNIFORM2UIVPROC;
}
pub type PFNGLPROGRAMUNIFORM3IPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint),
>;
extern "C" {
    pub static mut glad_glProgramUniform3i: PFNGLPROGRAMUNIFORM3IPROC;
}
pub type PFNGLPROGRAMUNIFORM3IVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLint),
>;
extern "C" {
    pub static mut glad_glProgramUniform3iv: PFNGLPROGRAMUNIFORM3IVPROC;
}
pub type PFNGLPROGRAMUNIFORM3FPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat),
>;
extern "C" {
    pub static mut glad_glProgramUniform3f: PFNGLPROGRAMUNIFORM3FPROC;
}
pub type PFNGLPROGRAMUNIFORM3FVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat),
>;
extern "C" {
    pub static mut glad_glProgramUniform3fv: PFNGLPROGRAMUNIFORM3FVPROC;
}
pub type PFNGLPROGRAMUNIFORM3DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        v0: GLdouble,
        v1: GLdouble,
        v2: GLdouble,
    ),
>;
extern "C" {
    pub static mut glad_glProgramUniform3d: PFNGLPROGRAMUNIFORM3DPROC;
}
pub type PFNGLPROGRAMUNIFORM3DVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble),
>;
extern "C" {
    pub static mut glad_glProgramUniform3dv: PFNGLPROGRAMUNIFORM3DVPROC;
}
pub type PFNGLPROGRAMUNIFORM3UIPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint),
>;
extern "C" {
    pub static mut glad_glProgramUniform3ui: PFNGLPROGRAMUNIFORM3UIPROC;
}
pub type PFNGLPROGRAMUNIFORM3UIVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint),
>;
extern "C" {
    pub static mut glad_glProgramUniform3uiv: PFNGLPROGRAMUNIFORM3UIVPROC;
}
pub type PFNGLPROGRAMUNIFORM4IPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        v0: GLint,
        v1: GLint,
        v2: GLint,
        v3: GLint,
    ),
>;
extern "C" {
    pub static mut glad_glProgramUniform4i: PFNGLPROGRAMUNIFORM4IPROC;
}
pub type PFNGLPROGRAMUNIFORM4IVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLint),
>;
extern "C" {
    pub static mut glad_glProgramUniform4iv: PFNGLPROGRAMUNIFORM4IVPROC;
}
pub type PFNGLPROGRAMUNIFORM4FPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        v0: GLfloat,
        v1: GLfloat,
        v2: GLfloat,
        v3: GLfloat,
    ),
>;
extern "C" {
    pub static mut glad_glProgramUniform4f: PFNGLPROGRAMUNIFORM4FPROC;
}
pub type PFNGLPROGRAMUNIFORM4FVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat),
>;
extern "C" {
    pub static mut glad_glProgramUniform4fv: PFNGLPROGRAMUNIFORM4FVPROC;
}
pub type PFNGLPROGRAMUNIFORM4DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        v0: GLdouble,
        v1: GLdouble,
        v2: GLdouble,
        v3: GLdouble,
    ),
>;
extern "C" {
    pub static mut glad_glProgramUniform4d: PFNGLPROGRAMUNIFORM4DPROC;
}
pub type PFNGLPROGRAMUNIFORM4DVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble),
>;
extern "C" {
    pub static mut glad_glProgramUniform4dv: PFNGLPROGRAMUNIFORM4DVPROC;
}
pub type PFNGLPROGRAMUNIFORM4UIPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        v0: GLuint,
        v1: GLuint,
        v2: GLuint,
        v3: GLuint,
    ),
>;
extern "C" {
    pub static mut glad_glProgramUniform4ui: PFNGLPROGRAMUNIFORM4UIPROC;
}
pub type PFNGLPROGRAMUNIFORM4UIVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint),
>;
extern "C" {
    pub static mut glad_glProgramUniform4uiv: PFNGLPROGRAMUNIFORM4UIVPROC;
}
pub type PFNGLPROGRAMUNIFORMMATRIX2FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
extern "C" {
    pub static mut glad_glProgramUniformMatrix2fv: PFNGLPROGRAMUNIFORMMATRIX2FVPROC;
}
pub type PFNGLPROGRAMUNIFORMMATRIX3FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
extern "C" {
    pub static mut glad_glProgramUniformMatrix3fv: PFNGLPROGRAMUNIFORMMATRIX3FVPROC;
}
pub type PFNGLPROGRAMUNIFORMMATRIX4FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
extern "C" {
    pub static mut glad_glProgramUniformMatrix4fv: PFNGLPROGRAMUNIFORMMATRIX4FVPROC;
}
pub type PFNGLPROGRAMUNIFORMMATRIX2DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
extern "C" {
    pub static mut glad_glProgramUniformMatrix2dv: PFNGLPROGRAMUNIFORMMATRIX2DVPROC;
}
pub type PFNGLPROGRAMUNIFORMMATRIX3DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
extern "C" {
    pub static mut glad_glProgramUniformMatrix3dv: PFNGLPROGRAMUNIFORMMATRIX3DVPROC;
}
pub type PFNGLPROGRAMUNIFORMMATRIX4DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
extern "C" {
    pub static mut glad_glProgramUniformMatrix4dv: PFNGLPROGRAMUNIFORMMATRIX4DVPROC;
}
pub type PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
extern "C" {
    pub static mut glad_glProgramUniformMatrix2x3fv: PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC;
}
pub type PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
extern "C" {
    pub static mut glad_glProgramUniformMatrix3x2fv: PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC;
}
pub type PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
extern "C" {
    pub static mut glad_glProgramUniformMatrix2x4fv: PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC;
}
pub type PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
extern "C" {
    pub static mut glad_glProgramUniformMatrix4x2fv: PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC;
}
pub type PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
extern "C" {
    pub static mut glad_glProgramUniformMatrix3x4fv: PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC;
}
pub type PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
extern "C" {
    pub static mut glad_glProgramUniformMatrix4x3fv: PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC;
}
pub type PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
extern "C" {
    pub static mut glad_glProgramUniformMatrix2x3dv: PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC;
}
pub type PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
extern "C" {
    pub static mut glad_glProgramUniformMatrix3x2dv: PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC;
}
pub type PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
extern "C" {
    pub static mut glad_glProgramUniformMatrix2x4dv: PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC;
}
pub type PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
extern "C" {
    pub static mut glad_glProgramUniformMatrix4x2dv: PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC;
}
pub type PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
extern "C" {
    pub static mut glad_glProgramUniformMatrix3x4dv: PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC;
}
pub type PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
extern "C" {
    pub static mut glad_glProgramUniformMatrix4x3dv: PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC;
}
pub type PFNGLVALIDATEPROGRAMPIPELINEPROC =
    ::std::option::Option<unsafe extern "C" fn(pipeline: GLuint)>;
extern "C" {
    pub static mut glad_glValidateProgramPipeline: PFNGLVALIDATEPROGRAMPIPELINEPROC;
}
pub type PFNGLGETPROGRAMPIPELINEINFOLOGPROC = ::std::option::Option<
    unsafe extern "C" fn(
        pipeline: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        infoLog: *mut GLchar,
    ),
>;
extern "C" {
    pub static mut glad_glGetProgramPipelineInfoLog: PFNGLGETPROGRAMPIPELINEINFOLOGPROC;
}
pub type PFNGLVERTEXATTRIBL1DPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLdouble)>;
extern "C" {
    pub static mut glad_glVertexAttribL1d: PFNGLVERTEXATTRIBL1DPROC;
}
pub type PFNGLVERTEXATTRIBL2DPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble)>;
extern "C" {
    pub static mut glad_glVertexAttribL2d: PFNGLVERTEXATTRIBL2DPROC;
}
pub type PFNGLVERTEXATTRIBL3DPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble),
>;
extern "C" {
    pub static mut glad_glVertexAttribL3d: PFNGLVERTEXATTRIBL3DPROC;
}
pub type PFNGLVERTEXATTRIBL4DPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble),
>;
extern "C" {
    pub static mut glad_glVertexAttribL4d: PFNGLVERTEXATTRIBL4DPROC;
}
pub type PFNGLVERTEXATTRIBL1DVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
extern "C" {
    pub static mut glad_glVertexAttribL1dv: PFNGLVERTEXATTRIBL1DVPROC;
}
pub type PFNGLVERTEXATTRIBL2DVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
extern "C" {
    pub static mut glad_glVertexAttribL2dv: PFNGLVERTEXATTRIBL2DVPROC;
}
pub type PFNGLVERTEXATTRIBL3DVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
extern "C" {
    pub static mut glad_glVertexAttribL3dv: PFNGLVERTEXATTRIBL3DVPROC;
}
pub type PFNGLVERTEXATTRIBL4DVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
extern "C" {
    pub static mut glad_glVertexAttribL4dv: PFNGLVERTEXATTRIBL4DVPROC;
}
pub type PFNGLVERTEXATTRIBLPOINTERPROC = ::std::option::Option<
    unsafe extern "C" fn(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glVertexAttribLPointer: PFNGLVERTEXATTRIBLPOINTERPROC;
}
pub type PFNGLGETVERTEXATTRIBLDVPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLdouble),
>;
extern "C" {
    pub static mut glad_glGetVertexAttribLdv: PFNGLGETVERTEXATTRIBLDVPROC;
}
pub type PFNGLVIEWPORTARRAYVPROC =
    ::std::option::Option<unsafe extern "C" fn(first: GLuint, count: GLsizei, v: *const GLfloat)>;
extern "C" {
    pub static mut glad_glViewportArrayv: PFNGLVIEWPORTARRAYVPROC;
}
pub type PFNGLVIEWPORTINDEXEDFPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat),
>;
extern "C" {
    pub static mut glad_glViewportIndexedf: PFNGLVIEWPORTINDEXEDFPROC;
}
pub type PFNGLVIEWPORTINDEXEDFVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
extern "C" {
    pub static mut glad_glViewportIndexedfv: PFNGLVIEWPORTINDEXEDFVPROC;
}
pub type PFNGLSCISSORARRAYVPROC =
    ::std::option::Option<unsafe extern "C" fn(first: GLuint, count: GLsizei, v: *const GLint)>;
extern "C" {
    pub static mut glad_glScissorArrayv: PFNGLSCISSORARRAYVPROC;
}
pub type PFNGLSCISSORINDEXEDPROC = ::std::option::Option<
    unsafe extern "C" fn(
        index: GLuint,
        left: GLint,
        bottom: GLint,
        width: GLsizei,
        height: GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glScissorIndexed: PFNGLSCISSORINDEXEDPROC;
}
pub type PFNGLSCISSORINDEXEDVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
extern "C" {
    pub static mut glad_glScissorIndexedv: PFNGLSCISSORINDEXEDVPROC;
}
pub type PFNGLDEPTHRANGEARRAYVPROC =
    ::std::option::Option<unsafe extern "C" fn(first: GLuint, count: GLsizei, v: *const GLdouble)>;
extern "C" {
    pub static mut glad_glDepthRangeArrayv: PFNGLDEPTHRANGEARRAYVPROC;
}
pub type PFNGLDEPTHRANGEINDEXEDPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, n: GLdouble, f: GLdouble)>;
extern "C" {
    pub static mut glad_glDepthRangeIndexed: PFNGLDEPTHRANGEINDEXEDPROC;
}
pub type PFNGLGETFLOATI_VPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, data: *mut GLfloat)>;
extern "C" {
    pub static mut glad_glGetFloati_v: PFNGLGETFLOATI_VPROC;
}
pub type PFNGLGETDOUBLEI_VPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, data: *mut GLdouble)>;
extern "C" {
    pub static mut glad_glGetDoublei_v: PFNGLGETDOUBLEI_VPROC;
}
extern "C" {
    pub static mut GLAD_GL_VERSION_4_2: ::std::os::raw::c_int;
}
pub type PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        first: GLint,
        count: GLsizei,
        instancecount: GLsizei,
        baseinstance: GLuint,
    ),
>;
extern "C" {
    pub static mut glad_glDrawArraysInstancedBaseInstance: PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC;
}
pub type PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const ::std::os::raw::c_void,
        instancecount: GLsizei,
        baseinstance: GLuint,
    ),
>;
extern "C" {
    pub static mut glad_glDrawElementsInstancedBaseInstance:
        PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC;
}
pub type PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const ::std::os::raw::c_void,
        instancecount: GLsizei,
        basevertex: GLint,
        baseinstance: GLuint,
    ),
>;
extern "C" {
    pub static mut glad_glDrawElementsInstancedBaseVertexBaseInstance:
        PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC;
}
pub type PFNGLGETINTERNALFORMATIVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        internalformat: GLenum,
        pname: GLenum,
        count: GLsizei,
        params: *mut GLint,
    ),
>;
extern "C" {
    pub static mut glad_glGetInternalformativ: PFNGLGETINTERNALFORMATIVPROC;
}
pub type PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, bufferIndex: GLuint, pname: GLenum, params: *mut GLint),
>;
extern "C" {
    pub static mut glad_glGetActiveAtomicCounterBufferiv: PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC;
}
pub type PFNGLBINDIMAGETEXTUREPROC = ::std::option::Option<
    unsafe extern "C" fn(
        unit: GLuint,
        texture: GLuint,
        level: GLint,
        layered: GLboolean,
        layer: GLint,
        access: GLenum,
        format: GLenum,
    ),
>;
extern "C" {
    pub static mut glad_glBindImageTexture: PFNGLBINDIMAGETEXTUREPROC;
}
pub type PFNGLMEMORYBARRIERPROC = ::std::option::Option<unsafe extern "C" fn(barriers: GLbitfield)>;
extern "C" {
    pub static mut glad_glMemoryBarrier: PFNGLMEMORYBARRIERPROC;
}
pub type PFNGLTEXSTORAGE1DPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei),
>;
extern "C" {
    pub static mut glad_glTexStorage1D: PFNGLTEXSTORAGE1DPROC;
}
pub type PFNGLTEXSTORAGE2DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        levels: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glTexStorage2D: PFNGLTEXSTORAGE2DPROC;
}
pub type PFNGLTEXSTORAGE3DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        levels: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glTexStorage3D: PFNGLTEXSTORAGE3DPROC;
}
pub type PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC =
    ::std::option::Option<unsafe extern "C" fn(mode: GLenum, id: GLuint, instancecount: GLsizei)>;
extern "C" {
    pub static mut glad_glDrawTransformFeedbackInstanced: PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC;
}
pub type PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC = ::std::option::Option<
    unsafe extern "C" fn(mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei),
>;
extern "C" {
    pub static mut glad_glDrawTransformFeedbackStreamInstanced:
        PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC;
}
extern "C" {
    pub static mut GLAD_GL_VERSION_4_3: ::std::os::raw::c_int;
}
pub type PFNGLCLEARBUFFERDATAPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        internalformat: GLenum,
        format: GLenum,
        type_: GLenum,
        data: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glClearBufferData: PFNGLCLEARBUFFERDATAPROC;
}
pub type PFNGLCLEARBUFFERSUBDATAPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        internalformat: GLenum,
        offset: GLintptr,
        size: GLsizeiptr,
        format: GLenum,
        type_: GLenum,
        data: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glClearBufferSubData: PFNGLCLEARBUFFERSUBDATAPROC;
}
pub type PFNGLDISPATCHCOMPUTEPROC = ::std::option::Option<
    unsafe extern "C" fn(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint),
>;
extern "C" {
    pub static mut glad_glDispatchCompute: PFNGLDISPATCHCOMPUTEPROC;
}
pub type PFNGLDISPATCHCOMPUTEINDIRECTPROC =
    ::std::option::Option<unsafe extern "C" fn(indirect: GLintptr)>;
extern "C" {
    pub static mut glad_glDispatchComputeIndirect: PFNGLDISPATCHCOMPUTEINDIRECTPROC;
}
pub type PFNGLCOPYIMAGESUBDATAPROC = ::std::option::Option<
    unsafe extern "C" fn(
        srcName: GLuint,
        srcTarget: GLenum,
        srcLevel: GLint,
        srcX: GLint,
        srcY: GLint,
        srcZ: GLint,
        dstName: GLuint,
        dstTarget: GLenum,
        dstLevel: GLint,
        dstX: GLint,
        dstY: GLint,
        dstZ: GLint,
        srcWidth: GLsizei,
        srcHeight: GLsizei,
        srcDepth: GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glCopyImageSubData: PFNGLCOPYIMAGESUBDATAPROC;
}
pub type PFNGLFRAMEBUFFERPARAMETERIPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, param: GLint)>;
extern "C" {
    pub static mut glad_glFramebufferParameteri: PFNGLFRAMEBUFFERPARAMETERIPROC;
}
pub type PFNGLGETFRAMEBUFFERPARAMETERIVPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
extern "C" {
    pub static mut glad_glGetFramebufferParameteriv: PFNGLGETFRAMEBUFFERPARAMETERIVPROC;
}
pub type PFNGLGETINTERNALFORMATI64VPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        internalformat: GLenum,
        pname: GLenum,
        count: GLsizei,
        params: *mut GLint64,
    ),
>;
extern "C" {
    pub static mut glad_glGetInternalformati64v: PFNGLGETINTERNALFORMATI64VPROC;
}
pub type PFNGLINVALIDATETEXSUBIMAGEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glInvalidateTexSubImage: PFNGLINVALIDATETEXSUBIMAGEPROC;
}
pub type PFNGLINVALIDATETEXIMAGEPROC =
    ::std::option::Option<unsafe extern "C" fn(texture: GLuint, level: GLint)>;
extern "C" {
    pub static mut glad_glInvalidateTexImage: PFNGLINVALIDATETEXIMAGEPROC;
}
pub type PFNGLINVALIDATEBUFFERSUBDATAPROC = ::std::option::Option<
    unsafe extern "C" fn(buffer: GLuint, offset: GLintptr, length: GLsizeiptr),
>;
extern "C" {
    pub static mut glad_glInvalidateBufferSubData: PFNGLINVALIDATEBUFFERSUBDATAPROC;
}
pub type PFNGLINVALIDATEBUFFERDATAPROC =
    ::std::option::Option<unsafe extern "C" fn(buffer: GLuint)>;
extern "C" {
    pub static mut glad_glInvalidateBufferData: PFNGLINVALIDATEBUFFERDATAPROC;
}
pub type PFNGLINVALIDATEFRAMEBUFFERPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, numAttachments: GLsizei, attachments: *const GLenum),
>;
extern "C" {
    pub static mut glad_glInvalidateFramebuffer: PFNGLINVALIDATEFRAMEBUFFERPROC;
}
pub type PFNGLINVALIDATESUBFRAMEBUFFERPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        numAttachments: GLsizei,
        attachments: *const GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glInvalidateSubFramebuffer: PFNGLINVALIDATESUBFRAMEBUFFERPROC;
}
pub type PFNGLMULTIDRAWARRAYSINDIRECTPROC = ::std::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        indirect: *const ::std::os::raw::c_void,
        drawcount: GLsizei,
        stride: GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glMultiDrawArraysIndirect: PFNGLMULTIDRAWARRAYSINDIRECTPROC;
}
pub type PFNGLMULTIDRAWELEMENTSINDIRECTPROC = ::std::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        type_: GLenum,
        indirect: *const ::std::os::raw::c_void,
        drawcount: GLsizei,
        stride: GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glMultiDrawElementsIndirect: PFNGLMULTIDRAWELEMENTSINDIRECTPROC;
}
pub type PFNGLGETPROGRAMINTERFACEIVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        programInterface: GLenum,
        pname: GLenum,
        params: *mut GLint,
    ),
>;
extern "C" {
    pub static mut glad_glGetProgramInterfaceiv: PFNGLGETPROGRAMINTERFACEIVPROC;
}
pub type PFNGLGETPROGRAMRESOURCEINDEXPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, programInterface: GLenum, name: *const GLchar) -> GLuint,
>;
extern "C" {
    pub static mut glad_glGetProgramResourceIndex: PFNGLGETPROGRAMRESOURCEINDEXPROC;
}
pub type PFNGLGETPROGRAMRESOURCENAMEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        programInterface: GLenum,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        name: *mut GLchar,
    ),
>;
extern "C" {
    pub static mut glad_glGetProgramResourceName: PFNGLGETPROGRAMRESOURCENAMEPROC;
}
pub type PFNGLGETPROGRAMRESOURCEIVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        programInterface: GLenum,
        index: GLuint,
        propCount: GLsizei,
        props: *const GLenum,
        count: GLsizei,
        length: *mut GLsizei,
        params: *mut GLint,
    ),
>;
extern "C" {
    pub static mut glad_glGetProgramResourceiv: PFNGLGETPROGRAMRESOURCEIVPROC;
}
pub type PFNGLGETPROGRAMRESOURCELOCATIONPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, programInterface: GLenum, name: *const GLchar) -> GLint,
>;
extern "C" {
    pub static mut glad_glGetProgramResourceLocation: PFNGLGETPROGRAMRESOURCELOCATIONPROC;
}
pub type PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, programInterface: GLenum, name: *const GLchar) -> GLint,
>;
extern "C" {
    pub static mut glad_glGetProgramResourceLocationIndex: PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC;
}
pub type PFNGLSHADERSTORAGEBLOCKBINDINGPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint),
>;
extern "C" {
    pub static mut glad_glShaderStorageBlockBinding: PFNGLSHADERSTORAGEBLOCKBINDINGPROC;
}
pub type PFNGLTEXBUFFERRANGEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        internalformat: GLenum,
        buffer: GLuint,
        offset: GLintptr,
        size: GLsizeiptr,
    ),
>;
extern "C" {
    pub static mut glad_glTexBufferRange: PFNGLTEXBUFFERRANGEPROC;
}
pub type PFNGLTEXSTORAGE2DMULTISAMPLEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        fixedsamplelocations: GLboolean,
    ),
>;
extern "C" {
    pub static mut glad_glTexStorage2DMultisample: PFNGLTEXSTORAGE2DMULTISAMPLEPROC;
}
pub type PFNGLTEXSTORAGE3DMULTISAMPLEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        fixedsamplelocations: GLboolean,
    ),
>;
extern "C" {
    pub static mut glad_glTexStorage3DMultisample: PFNGLTEXSTORAGE3DMULTISAMPLEPROC;
}
pub type PFNGLTEXTUREVIEWPROC = ::std::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        target: GLenum,
        origtexture: GLuint,
        internalformat: GLenum,
        minlevel: GLuint,
        numlevels: GLuint,
        minlayer: GLuint,
        numlayers: GLuint,
    ),
>;
extern "C" {
    pub static mut glad_glTextureView: PFNGLTEXTUREVIEWPROC;
}
pub type PFNGLBINDVERTEXBUFFERPROC = ::std::option::Option<
    unsafe extern "C" fn(bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei),
>;
extern "C" {
    pub static mut glad_glBindVertexBuffer: PFNGLBINDVERTEXBUFFERPROC;
}
pub type PFNGLVERTEXATTRIBFORMATPROC = ::std::option::Option<
    unsafe extern "C" fn(
        attribindex: GLuint,
        size: GLint,
        type_: GLenum,
        normalized: GLboolean,
        relativeoffset: GLuint,
    ),
>;
extern "C" {
    pub static mut glad_glVertexAttribFormat: PFNGLVERTEXATTRIBFORMATPROC;
}
pub type PFNGLVERTEXATTRIBIFORMATPROC = ::std::option::Option<
    unsafe extern "C" fn(attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint),
>;
extern "C" {
    pub static mut glad_glVertexAttribIFormat: PFNGLVERTEXATTRIBIFORMATPROC;
}
pub type PFNGLVERTEXATTRIBLFORMATPROC = ::std::option::Option<
    unsafe extern "C" fn(attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint),
>;
extern "C" {
    pub static mut glad_glVertexAttribLFormat: PFNGLVERTEXATTRIBLFORMATPROC;
}
pub type PFNGLVERTEXATTRIBBINDINGPROC =
    ::std::option::Option<unsafe extern "C" fn(attribindex: GLuint, bindingindex: GLuint)>;
extern "C" {
    pub static mut glad_glVertexAttribBinding: PFNGLVERTEXATTRIBBINDINGPROC;
}
pub type PFNGLVERTEXBINDINGDIVISORPROC =
    ::std::option::Option<unsafe extern "C" fn(bindingindex: GLuint, divisor: GLuint)>;
extern "C" {
    pub static mut glad_glVertexBindingDivisor: PFNGLVERTEXBINDINGDIVISORPROC;
}
pub type PFNGLDEBUGMESSAGECONTROLPROC = ::std::option::Option<
    unsafe extern "C" fn(
        source: GLenum,
        type_: GLenum,
        severity: GLenum,
        count: GLsizei,
        ids: *const GLuint,
        enabled: GLboolean,
    ),
>;
extern "C" {
    pub static mut glad_glDebugMessageControl: PFNGLDEBUGMESSAGECONTROLPROC;
}
pub type PFNGLDEBUGMESSAGEINSERTPROC = ::std::option::Option<
    unsafe extern "C" fn(
        source: GLenum,
        type_: GLenum,
        id: GLuint,
        severity: GLenum,
        length: GLsizei,
        buf: *const GLchar,
    ),
>;
extern "C" {
    pub static mut glad_glDebugMessageInsert: PFNGLDEBUGMESSAGEINSERTPROC;
}
pub type PFNGLDEBUGMESSAGECALLBACKPROC = ::std::option::Option<
    unsafe extern "C" fn(callback: GLDEBUGPROC, userParam: *const ::std::os::raw::c_void),
>;
extern "C" {
    pub static mut glad_glDebugMessageCallback: PFNGLDEBUGMESSAGECALLBACKPROC;
}
pub type PFNGLGETDEBUGMESSAGELOGPROC = ::std::option::Option<
    unsafe extern "C" fn(
        count: GLuint,
        bufSize: GLsizei,
        sources: *mut GLenum,
        types: *mut GLenum,
        ids: *mut GLuint,
        severities: *mut GLenum,
        lengths: *mut GLsizei,
        messageLog: *mut GLchar,
    ) -> GLuint,
>;
extern "C" {
    pub static mut glad_glGetDebugMessageLog: PFNGLGETDEBUGMESSAGELOGPROC;
}
pub type PFNGLPUSHDEBUGGROUPPROC = ::std::option::Option<
    unsafe extern "C" fn(source: GLenum, id: GLuint, length: GLsizei, message: *const GLchar),
>;
extern "C" {
    pub static mut glad_glPushDebugGroup: PFNGLPUSHDEBUGGROUPPROC;
}
pub type PFNGLPOPDEBUGGROUPPROC = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub static mut glad_glPopDebugGroup: PFNGLPOPDEBUGGROUPPROC;
}
pub type PFNGLOBJECTLABELPROC = ::std::option::Option<
    unsafe extern "C" fn(identifier: GLenum, name: GLuint, length: GLsizei, label: *const GLchar),
>;
extern "C" {
    pub static mut glad_glObjectLabel: PFNGLOBJECTLABELPROC;
}
pub type PFNGLGETOBJECTLABELPROC = ::std::option::Option<
    unsafe extern "C" fn(
        identifier: GLenum,
        name: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        label: *mut GLchar,
    ),
>;
extern "C" {
    pub static mut glad_glGetObjectLabel: PFNGLGETOBJECTLABELPROC;
}
pub type PFNGLOBJECTPTRLABELPROC = ::std::option::Option<
    unsafe extern "C" fn(ptr: *const ::std::os::raw::c_void, length: GLsizei, label: *const GLchar),
>;
extern "C" {
    pub static mut glad_glObjectPtrLabel: PFNGLOBJECTPTRLABELPROC;
}
pub type PFNGLGETOBJECTPTRLABELPROC = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *const ::std::os::raw::c_void,
        bufSize: GLsizei,
        length: *mut GLsizei,
        label: *mut GLchar,
    ),
>;
extern "C" {
    pub static mut glad_glGetObjectPtrLabel: PFNGLGETOBJECTPTRLABELPROC;
}
pub type PFNGLGETPOINTERVPROC = ::std::option::Option<
    unsafe extern "C" fn(pname: GLenum, params: *mut *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub static mut glad_glGetPointerv: PFNGLGETPOINTERVPROC;
}
extern "C" {
    pub static mut GLAD_GL_VERSION_4_4: ::std::os::raw::c_int;
}
pub type PFNGLBUFFERSTORAGEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        size: GLsizeiptr,
        data: *const ::std::os::raw::c_void,
        flags: GLbitfield,
    ),
>;
extern "C" {
    pub static mut glad_glBufferStorage: PFNGLBUFFERSTORAGEPROC;
}
pub type PFNGLCLEARTEXIMAGEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        level: GLint,
        format: GLenum,
        type_: GLenum,
        data: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glClearTexImage: PFNGLCLEARTEXIMAGEPROC;
}
pub type PFNGLCLEARTEXSUBIMAGEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        type_: GLenum,
        data: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glClearTexSubImage: PFNGLCLEARTEXSUBIMAGEPROC;
}
pub type PFNGLBINDBUFFERSBASEPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, first: GLuint, count: GLsizei, buffers: *const GLuint),
>;
extern "C" {
    pub static mut glad_glBindBuffersBase: PFNGLBINDBUFFERSBASEPROC;
}
pub type PFNGLBINDBUFFERSRANGEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        first: GLuint,
        count: GLsizei,
        buffers: *const GLuint,
        offsets: *const GLintptr,
        sizes: *const GLsizeiptr,
    ),
>;
extern "C" {
    pub static mut glad_glBindBuffersRange: PFNGLBINDBUFFERSRANGEPROC;
}
pub type PFNGLBINDTEXTURESPROC = ::std::option::Option<
    unsafe extern "C" fn(first: GLuint, count: GLsizei, textures: *const GLuint),
>;
extern "C" {
    pub static mut glad_glBindTextures: PFNGLBINDTEXTURESPROC;
}
pub type PFNGLBINDSAMPLERSPROC = ::std::option::Option<
    unsafe extern "C" fn(first: GLuint, count: GLsizei, samplers: *const GLuint),
>;
extern "C" {
    pub static mut glad_glBindSamplers: PFNGLBINDSAMPLERSPROC;
}
pub type PFNGLBINDIMAGETEXTURESPROC = ::std::option::Option<
    unsafe extern "C" fn(first: GLuint, count: GLsizei, textures: *const GLuint),
>;
extern "C" {
    pub static mut glad_glBindImageTextures: PFNGLBINDIMAGETEXTURESPROC;
}
pub type PFNGLBINDVERTEXBUFFERSPROC = ::std::option::Option<
    unsafe extern "C" fn(
        first: GLuint,
        count: GLsizei,
        buffers: *const GLuint,
        offsets: *const GLintptr,
        strides: *const GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glBindVertexBuffers: PFNGLBINDVERTEXBUFFERSPROC;
}
extern "C" {
    pub static mut GLAD_GL_VERSION_4_5: ::std::os::raw::c_int;
}
pub type PFNGLCLIPCONTROLPROC =
    ::std::option::Option<unsafe extern "C" fn(origin: GLenum, depth: GLenum)>;
extern "C" {
    pub static mut glad_glClipControl: PFNGLCLIPCONTROLPROC;
}
pub type PFNGLCREATETRANSFORMFEEDBACKSPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, ids: *mut GLuint)>;
extern "C" {
    pub static mut glad_glCreateTransformFeedbacks: PFNGLCREATETRANSFORMFEEDBACKSPROC;
}
pub type PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC =
    ::std::option::Option<unsafe extern "C" fn(xfb: GLuint, index: GLuint, buffer: GLuint)>;
extern "C" {
    pub static mut glad_glTransformFeedbackBufferBase: PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC;
}
pub type PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        xfb: GLuint,
        index: GLuint,
        buffer: GLuint,
        offset: GLintptr,
        size: GLsizeiptr,
    ),
>;
extern "C" {
    pub static mut glad_glTransformFeedbackBufferRange: PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC;
}
pub type PFNGLGETTRANSFORMFEEDBACKIVPROC =
    ::std::option::Option<unsafe extern "C" fn(xfb: GLuint, pname: GLenum, param: *mut GLint)>;
extern "C" {
    pub static mut glad_glGetTransformFeedbackiv: PFNGLGETTRANSFORMFEEDBACKIVPROC;
}
pub type PFNGLGETTRANSFORMFEEDBACKI_VPROC = ::std::option::Option<
    unsafe extern "C" fn(xfb: GLuint, pname: GLenum, index: GLuint, param: *mut GLint),
>;
extern "C" {
    pub static mut glad_glGetTransformFeedbacki_v: PFNGLGETTRANSFORMFEEDBACKI_VPROC;
}
pub type PFNGLGETTRANSFORMFEEDBACKI64_VPROC = ::std::option::Option<
    unsafe extern "C" fn(xfb: GLuint, pname: GLenum, index: GLuint, param: *mut GLint64),
>;
extern "C" {
    pub static mut glad_glGetTransformFeedbacki64_v: PFNGLGETTRANSFORMFEEDBACKI64_VPROC;
}
pub type PFNGLCREATEBUFFERSPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, buffers: *mut GLuint)>;
extern "C" {
    pub static mut glad_glCreateBuffers: PFNGLCREATEBUFFERSPROC;
}
pub type PFNGLNAMEDBUFFERSTORAGEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: GLuint,
        size: GLsizeiptr,
        data: *const ::std::os::raw::c_void,
        flags: GLbitfield,
    ),
>;
extern "C" {
    pub static mut glad_glNamedBufferStorage: PFNGLNAMEDBUFFERSTORAGEPROC;
}
pub type PFNGLNAMEDBUFFERDATAPROC = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: GLuint,
        size: GLsizeiptr,
        data: *const ::std::os::raw::c_void,
        usage: GLenum,
    ),
>;
extern "C" {
    pub static mut glad_glNamedBufferData: PFNGLNAMEDBUFFERDATAPROC;
}
pub type PFNGLNAMEDBUFFERSUBDATAPROC = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: GLuint,
        offset: GLintptr,
        size: GLsizeiptr,
        data: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glNamedBufferSubData: PFNGLNAMEDBUFFERSUBDATAPROC;
}
pub type PFNGLCOPYNAMEDBUFFERSUBDATAPROC = ::std::option::Option<
    unsafe extern "C" fn(
        readBuffer: GLuint,
        writeBuffer: GLuint,
        readOffset: GLintptr,
        writeOffset: GLintptr,
        size: GLsizeiptr,
    ),
>;
extern "C" {
    pub static mut glad_glCopyNamedBufferSubData: PFNGLCOPYNAMEDBUFFERSUBDATAPROC;
}
pub type PFNGLCLEARNAMEDBUFFERDATAPROC = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: GLuint,
        internalformat: GLenum,
        format: GLenum,
        type_: GLenum,
        data: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glClearNamedBufferData: PFNGLCLEARNAMEDBUFFERDATAPROC;
}
pub type PFNGLCLEARNAMEDBUFFERSUBDATAPROC = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: GLuint,
        internalformat: GLenum,
        offset: GLintptr,
        size: GLsizeiptr,
        format: GLenum,
        type_: GLenum,
        data: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glClearNamedBufferSubData: PFNGLCLEARNAMEDBUFFERSUBDATAPROC;
}
pub type PFNGLMAPNAMEDBUFFERPROC = ::std::option::Option<
    unsafe extern "C" fn(buffer: GLuint, access: GLenum) -> *mut ::std::os::raw::c_void,
>;
extern "C" {
    pub static mut glad_glMapNamedBuffer: PFNGLMAPNAMEDBUFFERPROC;
}
pub type PFNGLMAPNAMEDBUFFERRANGEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: GLuint,
        offset: GLintptr,
        length: GLsizeiptr,
        access: GLbitfield,
    ) -> *mut ::std::os::raw::c_void,
>;
extern "C" {
    pub static mut glad_glMapNamedBufferRange: PFNGLMAPNAMEDBUFFERRANGEPROC;
}
pub type PFNGLUNMAPNAMEDBUFFERPROC =
    ::std::option::Option<unsafe extern "C" fn(buffer: GLuint) -> GLboolean>;
extern "C" {
    pub static mut glad_glUnmapNamedBuffer: PFNGLUNMAPNAMEDBUFFERPROC;
}
pub type PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC = ::std::option::Option<
    unsafe extern "C" fn(buffer: GLuint, offset: GLintptr, length: GLsizeiptr),
>;
extern "C" {
    pub static mut glad_glFlushMappedNamedBufferRange: PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC;
}
pub type PFNGLGETNAMEDBUFFERPARAMETERIVPROC =
    ::std::option::Option<unsafe extern "C" fn(buffer: GLuint, pname: GLenum, params: *mut GLint)>;
extern "C" {
    pub static mut glad_glGetNamedBufferParameteriv: PFNGLGETNAMEDBUFFERPARAMETERIVPROC;
}
pub type PFNGLGETNAMEDBUFFERPARAMETERI64VPROC = ::std::option::Option<
    unsafe extern "C" fn(buffer: GLuint, pname: GLenum, params: *mut GLint64),
>;
extern "C" {
    pub static mut glad_glGetNamedBufferParameteri64v: PFNGLGETNAMEDBUFFERPARAMETERI64VPROC;
}
pub type PFNGLGETNAMEDBUFFERPOINTERVPROC = ::std::option::Option<
    unsafe extern "C" fn(buffer: GLuint, pname: GLenum, params: *mut *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub static mut glad_glGetNamedBufferPointerv: PFNGLGETNAMEDBUFFERPOINTERVPROC;
}
pub type PFNGLGETNAMEDBUFFERSUBDATAPROC = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: GLuint,
        offset: GLintptr,
        size: GLsizeiptr,
        data: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glGetNamedBufferSubData: PFNGLGETNAMEDBUFFERSUBDATAPROC;
}
pub type PFNGLCREATEFRAMEBUFFERSPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, framebuffers: *mut GLuint)>;
extern "C" {
    pub static mut glad_glCreateFramebuffers: PFNGLCREATEFRAMEBUFFERSPROC;
}
pub type PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC = ::std::option::Option<
    unsafe extern "C" fn(
        framebuffer: GLuint,
        attachment: GLenum,
        renderbuffertarget: GLenum,
        renderbuffer: GLuint,
    ),
>;
extern "C" {
    pub static mut glad_glNamedFramebufferRenderbuffer: PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC;
}
pub type PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC =
    ::std::option::Option<unsafe extern "C" fn(framebuffer: GLuint, pname: GLenum, param: GLint)>;
extern "C" {
    pub static mut glad_glNamedFramebufferParameteri: PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC;
}
pub type PFNGLNAMEDFRAMEBUFFERTEXTUREPROC = ::std::option::Option<
    unsafe extern "C" fn(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint),
>;
extern "C" {
    pub static mut glad_glNamedFramebufferTexture: PFNGLNAMEDFRAMEBUFFERTEXTUREPROC;
}
pub type PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC = ::std::option::Option<
    unsafe extern "C" fn(
        framebuffer: GLuint,
        attachment: GLenum,
        texture: GLuint,
        level: GLint,
        layer: GLint,
    ),
>;
extern "C" {
    pub static mut glad_glNamedFramebufferTextureLayer: PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC;
}
pub type PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC =
    ::std::option::Option<unsafe extern "C" fn(framebuffer: GLuint, buf: GLenum)>;
extern "C" {
    pub static mut glad_glNamedFramebufferDrawBuffer: PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC;
}
pub type PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC = ::std::option::Option<
    unsafe extern "C" fn(framebuffer: GLuint, n: GLsizei, bufs: *const GLenum),
>;
extern "C" {
    pub static mut glad_glNamedFramebufferDrawBuffers: PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC;
}
pub type PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC =
    ::std::option::Option<unsafe extern "C" fn(framebuffer: GLuint, src: GLenum)>;
extern "C" {
    pub static mut glad_glNamedFramebufferReadBuffer: PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC;
}
pub type PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC = ::std::option::Option<
    unsafe extern "C" fn(framebuffer: GLuint, numAttachments: GLsizei, attachments: *const GLenum),
>;
extern "C" {
    pub static mut glad_glInvalidateNamedFramebufferData: PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC;
}
pub type PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC = ::std::option::Option<
    unsafe extern "C" fn(
        framebuffer: GLuint,
        numAttachments: GLsizei,
        attachments: *const GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glInvalidateNamedFramebufferSubData:
        PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC;
}
pub type PFNGLCLEARNAMEDFRAMEBUFFERIVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        framebuffer: GLuint,
        buffer: GLenum,
        drawbuffer: GLint,
        value: *const GLint,
    ),
>;
extern "C" {
    pub static mut glad_glClearNamedFramebufferiv: PFNGLCLEARNAMEDFRAMEBUFFERIVPROC;
}
pub type PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        framebuffer: GLuint,
        buffer: GLenum,
        drawbuffer: GLint,
        value: *const GLuint,
    ),
>;
extern "C" {
    pub static mut glad_glClearNamedFramebufferuiv: PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC;
}
pub type PFNGLCLEARNAMEDFRAMEBUFFERFVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        framebuffer: GLuint,
        buffer: GLenum,
        drawbuffer: GLint,
        value: *const GLfloat,
    ),
>;
extern "C" {
    pub static mut glad_glClearNamedFramebufferfv: PFNGLCLEARNAMEDFRAMEBUFFERFVPROC;
}
pub type PFNGLCLEARNAMEDFRAMEBUFFERFIPROC = ::std::option::Option<
    unsafe extern "C" fn(
        framebuffer: GLuint,
        buffer: GLenum,
        drawbuffer: GLint,
        depth: GLfloat,
        stencil: GLint,
    ),
>;
extern "C" {
    pub static mut glad_glClearNamedFramebufferfi: PFNGLCLEARNAMEDFRAMEBUFFERFIPROC;
}
pub type PFNGLBLITNAMEDFRAMEBUFFERPROC = ::std::option::Option<
    unsafe extern "C" fn(
        readFramebuffer: GLuint,
        drawFramebuffer: GLuint,
        srcX0: GLint,
        srcY0: GLint,
        srcX1: GLint,
        srcY1: GLint,
        dstX0: GLint,
        dstY0: GLint,
        dstX1: GLint,
        dstY1: GLint,
        mask: GLbitfield,
        filter: GLenum,
    ),
>;
extern "C" {
    pub static mut glad_glBlitNamedFramebuffer: PFNGLBLITNAMEDFRAMEBUFFERPROC;
}
pub type PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC =
    ::std::option::Option<unsafe extern "C" fn(framebuffer: GLuint, target: GLenum) -> GLenum>;
extern "C" {
    pub static mut glad_glCheckNamedFramebufferStatus: PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC;
}
pub type PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC = ::std::option::Option<
    unsafe extern "C" fn(framebuffer: GLuint, pname: GLenum, param: *mut GLint),
>;
extern "C" {
    pub static mut glad_glGetNamedFramebufferParameteriv: PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC;
}
pub type PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        framebuffer: GLuint,
        attachment: GLenum,
        pname: GLenum,
        params: *mut GLint,
    ),
>;
extern "C" {
    pub static mut glad_glGetNamedFramebufferAttachmentParameteriv:
        PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC;
}
pub type PFNGLCREATERENDERBUFFERSPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, renderbuffers: *mut GLuint)>;
extern "C" {
    pub static mut glad_glCreateRenderbuffers: PFNGLCREATERENDERBUFFERSPROC;
}
pub type PFNGLNAMEDRENDERBUFFERSTORAGEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        renderbuffer: GLuint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glNamedRenderbufferStorage: PFNGLNAMEDRENDERBUFFERSTORAGEPROC;
}
pub type PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        renderbuffer: GLuint,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glNamedRenderbufferStorageMultisample:
        PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC;
}
pub type PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC = ::std::option::Option<
    unsafe extern "C" fn(renderbuffer: GLuint, pname: GLenum, params: *mut GLint),
>;
extern "C" {
    pub static mut glad_glGetNamedRenderbufferParameteriv: PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC;
}
pub type PFNGLCREATETEXTURESPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, n: GLsizei, textures: *mut GLuint)>;
extern "C" {
    pub static mut glad_glCreateTextures: PFNGLCREATETEXTURESPROC;
}
pub type PFNGLTEXTUREBUFFERPROC = ::std::option::Option<
    unsafe extern "C" fn(texture: GLuint, internalformat: GLenum, buffer: GLuint),
>;
extern "C" {
    pub static mut glad_glTextureBuffer: PFNGLTEXTUREBUFFERPROC;
}
pub type PFNGLTEXTUREBUFFERRANGEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        internalformat: GLenum,
        buffer: GLuint,
        offset: GLintptr,
        size: GLsizeiptr,
    ),
>;
extern "C" {
    pub static mut glad_glTextureBufferRange: PFNGLTEXTUREBUFFERRANGEPROC;
}
pub type PFNGLTEXTURESTORAGE1DPROC = ::std::option::Option<
    unsafe extern "C" fn(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei),
>;
extern "C" {
    pub static mut glad_glTextureStorage1D: PFNGLTEXTURESTORAGE1DPROC;
}
pub type PFNGLTEXTURESTORAGE2DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        levels: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glTextureStorage2D: PFNGLTEXTURESTORAGE2DPROC;
}
pub type PFNGLTEXTURESTORAGE3DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        levels: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glTextureStorage3D: PFNGLTEXTURESTORAGE3DPROC;
}
pub type PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        fixedsamplelocations: GLboolean,
    ),
>;
extern "C" {
    pub static mut glad_glTextureStorage2DMultisample: PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC;
}
pub type PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        fixedsamplelocations: GLboolean,
    ),
>;
extern "C" {
    pub static mut glad_glTextureStorage3DMultisample: PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC;
}
pub type PFNGLTEXTURESUBIMAGE1DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        level: GLint,
        xoffset: GLint,
        width: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glTextureSubImage1D: PFNGLTEXTURESUBIMAGE1DPROC;
}
pub type PFNGLTEXTURESUBIMAGE2DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glTextureSubImage2D: PFNGLTEXTURESUBIMAGE2DPROC;
}
pub type PFNGLTEXTURESUBIMAGE3DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glTextureSubImage3D: PFNGLTEXTURESUBIMAGE3DPROC;
}
pub type PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        level: GLint,
        xoffset: GLint,
        width: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glCompressedTextureSubImage1D: PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC;
}
pub type PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glCompressedTextureSubImage2D: PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC;
}
pub type PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glCompressedTextureSubImage3D: PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC;
}
pub type PFNGLCOPYTEXTURESUBIMAGE1DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        level: GLint,
        xoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glCopyTextureSubImage1D: PFNGLCOPYTEXTURESUBIMAGE1DPROC;
}
pub type PFNGLCOPYTEXTURESUBIMAGE2DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glCopyTextureSubImage2D: PFNGLCOPYTEXTURESUBIMAGE2DPROC;
}
pub type PFNGLCOPYTEXTURESUBIMAGE3DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glCopyTextureSubImage3D: PFNGLCOPYTEXTURESUBIMAGE3DPROC;
}
pub type PFNGLTEXTUREPARAMETERFPROC =
    ::std::option::Option<unsafe extern "C" fn(texture: GLuint, pname: GLenum, param: GLfloat)>;
extern "C" {
    pub static mut glad_glTextureParameterf: PFNGLTEXTUREPARAMETERFPROC;
}
pub type PFNGLTEXTUREPARAMETERFVPROC = ::std::option::Option<
    unsafe extern "C" fn(texture: GLuint, pname: GLenum, param: *const GLfloat),
>;
extern "C" {
    pub static mut glad_glTextureParameterfv: PFNGLTEXTUREPARAMETERFVPROC;
}
pub type PFNGLTEXTUREPARAMETERIPROC =
    ::std::option::Option<unsafe extern "C" fn(texture: GLuint, pname: GLenum, param: GLint)>;
extern "C" {
    pub static mut glad_glTextureParameteri: PFNGLTEXTUREPARAMETERIPROC;
}
pub type PFNGLTEXTUREPARAMETERIIVPROC = ::std::option::Option<
    unsafe extern "C" fn(texture: GLuint, pname: GLenum, params: *const GLint),
>;
extern "C" {
    pub static mut glad_glTextureParameterIiv: PFNGLTEXTUREPARAMETERIIVPROC;
}
pub type PFNGLTEXTUREPARAMETERIUIVPROC = ::std::option::Option<
    unsafe extern "C" fn(texture: GLuint, pname: GLenum, params: *const GLuint),
>;
extern "C" {
    pub static mut glad_glTextureParameterIuiv: PFNGLTEXTUREPARAMETERIUIVPROC;
}
pub type PFNGLTEXTUREPARAMETERIVPROC = ::std::option::Option<
    unsafe extern "C" fn(texture: GLuint, pname: GLenum, param: *const GLint),
>;
extern "C" {
    pub static mut glad_glTextureParameteriv: PFNGLTEXTUREPARAMETERIVPROC;
}
pub type PFNGLGENERATETEXTUREMIPMAPPROC =
    ::std::option::Option<unsafe extern "C" fn(texture: GLuint)>;
extern "C" {
    pub static mut glad_glGenerateTextureMipmap: PFNGLGENERATETEXTUREMIPMAPPROC;
}
pub type PFNGLBINDTEXTUREUNITPROC =
    ::std::option::Option<unsafe extern "C" fn(unit: GLuint, texture: GLuint)>;
extern "C" {
    pub static mut glad_glBindTextureUnit: PFNGLBINDTEXTUREUNITPROC;
}
pub type PFNGLGETTEXTUREIMAGEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        level: GLint,
        format: GLenum,
        type_: GLenum,
        bufSize: GLsizei,
        pixels: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glGetTextureImage: PFNGLGETTEXTUREIMAGEPROC;
}
pub type PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        level: GLint,
        bufSize: GLsizei,
        pixels: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glGetCompressedTextureImage: PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC;
}
pub type PFNGLGETTEXTURELEVELPARAMETERFVPROC = ::std::option::Option<
    unsafe extern "C" fn(texture: GLuint, level: GLint, pname: GLenum, params: *mut GLfloat),
>;
extern "C" {
    pub static mut glad_glGetTextureLevelParameterfv: PFNGLGETTEXTURELEVELPARAMETERFVPROC;
}
pub type PFNGLGETTEXTURELEVELPARAMETERIVPROC = ::std::option::Option<
    unsafe extern "C" fn(texture: GLuint, level: GLint, pname: GLenum, params: *mut GLint),
>;
extern "C" {
    pub static mut glad_glGetTextureLevelParameteriv: PFNGLGETTEXTURELEVELPARAMETERIVPROC;
}
pub type PFNGLGETTEXTUREPARAMETERFVPROC = ::std::option::Option<
    unsafe extern "C" fn(texture: GLuint, pname: GLenum, params: *mut GLfloat),
>;
extern "C" {
    pub static mut glad_glGetTextureParameterfv: PFNGLGETTEXTUREPARAMETERFVPROC;
}
pub type PFNGLGETTEXTUREPARAMETERIIVPROC =
    ::std::option::Option<unsafe extern "C" fn(texture: GLuint, pname: GLenum, params: *mut GLint)>;
extern "C" {
    pub static mut glad_glGetTextureParameterIiv: PFNGLGETTEXTUREPARAMETERIIVPROC;
}
pub type PFNGLGETTEXTUREPARAMETERIUIVPROC = ::std::option::Option<
    unsafe extern "C" fn(texture: GLuint, pname: GLenum, params: *mut GLuint),
>;
extern "C" {
    pub static mut glad_glGetTextureParameterIuiv: PFNGLGETTEXTUREPARAMETERIUIVPROC;
}
pub type PFNGLGETTEXTUREPARAMETERIVPROC =
    ::std::option::Option<unsafe extern "C" fn(texture: GLuint, pname: GLenum, params: *mut GLint)>;
extern "C" {
    pub static mut glad_glGetTextureParameteriv: PFNGLGETTEXTUREPARAMETERIVPROC;
}
pub type PFNGLCREATEVERTEXARRAYSPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, arrays: *mut GLuint)>;
extern "C" {
    pub static mut glad_glCreateVertexArrays: PFNGLCREATEVERTEXARRAYSPROC;
}
pub type PFNGLDISABLEVERTEXARRAYATTRIBPROC =
    ::std::option::Option<unsafe extern "C" fn(vaobj: GLuint, index: GLuint)>;
extern "C" {
    pub static mut glad_glDisableVertexArrayAttrib: PFNGLDISABLEVERTEXARRAYATTRIBPROC;
}
pub type PFNGLENABLEVERTEXARRAYATTRIBPROC =
    ::std::option::Option<unsafe extern "C" fn(vaobj: GLuint, index: GLuint)>;
extern "C" {
    pub static mut glad_glEnableVertexArrayAttrib: PFNGLENABLEVERTEXARRAYATTRIBPROC;
}
pub type PFNGLVERTEXARRAYELEMENTBUFFERPROC =
    ::std::option::Option<unsafe extern "C" fn(vaobj: GLuint, buffer: GLuint)>;
extern "C" {
    pub static mut glad_glVertexArrayElementBuffer: PFNGLVERTEXARRAYELEMENTBUFFERPROC;
}
pub type PFNGLVERTEXARRAYVERTEXBUFFERPROC = ::std::option::Option<
    unsafe extern "C" fn(
        vaobj: GLuint,
        bindingindex: GLuint,
        buffer: GLuint,
        offset: GLintptr,
        stride: GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glVertexArrayVertexBuffer: PFNGLVERTEXARRAYVERTEXBUFFERPROC;
}
pub type PFNGLVERTEXARRAYVERTEXBUFFERSPROC = ::std::option::Option<
    unsafe extern "C" fn(
        vaobj: GLuint,
        first: GLuint,
        count: GLsizei,
        buffers: *const GLuint,
        offsets: *const GLintptr,
        strides: *const GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glVertexArrayVertexBuffers: PFNGLVERTEXARRAYVERTEXBUFFERSPROC;
}
pub type PFNGLVERTEXARRAYATTRIBBINDINGPROC = ::std::option::Option<
    unsafe extern "C" fn(vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint),
>;
extern "C" {
    pub static mut glad_glVertexArrayAttribBinding: PFNGLVERTEXARRAYATTRIBBINDINGPROC;
}
pub type PFNGLVERTEXARRAYATTRIBFORMATPROC = ::std::option::Option<
    unsafe extern "C" fn(
        vaobj: GLuint,
        attribindex: GLuint,
        size: GLint,
        type_: GLenum,
        normalized: GLboolean,
        relativeoffset: GLuint,
    ),
>;
extern "C" {
    pub static mut glad_glVertexArrayAttribFormat: PFNGLVERTEXARRAYATTRIBFORMATPROC;
}
pub type PFNGLVERTEXARRAYATTRIBIFORMATPROC = ::std::option::Option<
    unsafe extern "C" fn(
        vaobj: GLuint,
        attribindex: GLuint,
        size: GLint,
        type_: GLenum,
        relativeoffset: GLuint,
    ),
>;
extern "C" {
    pub static mut glad_glVertexArrayAttribIFormat: PFNGLVERTEXARRAYATTRIBIFORMATPROC;
}
pub type PFNGLVERTEXARRAYATTRIBLFORMATPROC = ::std::option::Option<
    unsafe extern "C" fn(
        vaobj: GLuint,
        attribindex: GLuint,
        size: GLint,
        type_: GLenum,
        relativeoffset: GLuint,
    ),
>;
extern "C" {
    pub static mut glad_glVertexArrayAttribLFormat: PFNGLVERTEXARRAYATTRIBLFORMATPROC;
}
pub type PFNGLVERTEXARRAYBINDINGDIVISORPROC = ::std::option::Option<
    unsafe extern "C" fn(vaobj: GLuint, bindingindex: GLuint, divisor: GLuint),
>;
extern "C" {
    pub static mut glad_glVertexArrayBindingDivisor: PFNGLVERTEXARRAYBINDINGDIVISORPROC;
}
pub type PFNGLGETVERTEXARRAYIVPROC =
    ::std::option::Option<unsafe extern "C" fn(vaobj: GLuint, pname: GLenum, param: *mut GLint)>;
extern "C" {
    pub static mut glad_glGetVertexArrayiv: PFNGLGETVERTEXARRAYIVPROC;
}
pub type PFNGLGETVERTEXARRAYINDEXEDIVPROC = ::std::option::Option<
    unsafe extern "C" fn(vaobj: GLuint, index: GLuint, pname: GLenum, param: *mut GLint),
>;
extern "C" {
    pub static mut glad_glGetVertexArrayIndexediv: PFNGLGETVERTEXARRAYINDEXEDIVPROC;
}
pub type PFNGLGETVERTEXARRAYINDEXED64IVPROC = ::std::option::Option<
    unsafe extern "C" fn(vaobj: GLuint, index: GLuint, pname: GLenum, param: *mut GLint64),
>;
extern "C" {
    pub static mut glad_glGetVertexArrayIndexed64iv: PFNGLGETVERTEXARRAYINDEXED64IVPROC;
}
pub type PFNGLCREATESAMPLERSPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, samplers: *mut GLuint)>;
extern "C" {
    pub static mut glad_glCreateSamplers: PFNGLCREATESAMPLERSPROC;
}
pub type PFNGLCREATEPROGRAMPIPELINESPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, pipelines: *mut GLuint)>;
extern "C" {
    pub static mut glad_glCreateProgramPipelines: PFNGLCREATEPROGRAMPIPELINESPROC;
}
pub type PFNGLCREATEQUERIESPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, n: GLsizei, ids: *mut GLuint)>;
extern "C" {
    pub static mut glad_glCreateQueries: PFNGLCREATEQUERIESPROC;
}
pub type PFNGLGETQUERYBUFFEROBJECTI64VPROC = ::std::option::Option<
    unsafe extern "C" fn(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr),
>;
extern "C" {
    pub static mut glad_glGetQueryBufferObjecti64v: PFNGLGETQUERYBUFFEROBJECTI64VPROC;
}
pub type PFNGLGETQUERYBUFFEROBJECTIVPROC = ::std::option::Option<
    unsafe extern "C" fn(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr),
>;
extern "C" {
    pub static mut glad_glGetQueryBufferObjectiv: PFNGLGETQUERYBUFFEROBJECTIVPROC;
}
pub type PFNGLGETQUERYBUFFEROBJECTUI64VPROC = ::std::option::Option<
    unsafe extern "C" fn(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr),
>;
extern "C" {
    pub static mut glad_glGetQueryBufferObjectui64v: PFNGLGETQUERYBUFFEROBJECTUI64VPROC;
}
pub type PFNGLGETQUERYBUFFEROBJECTUIVPROC = ::std::option::Option<
    unsafe extern "C" fn(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr),
>;
extern "C" {
    pub static mut glad_glGetQueryBufferObjectuiv: PFNGLGETQUERYBUFFEROBJECTUIVPROC;
}
pub type PFNGLMEMORYBARRIERBYREGIONPROC =
    ::std::option::Option<unsafe extern "C" fn(barriers: GLbitfield)>;
extern "C" {
    pub static mut glad_glMemoryBarrierByRegion: PFNGLMEMORYBARRIERBYREGIONPROC;
}
pub type PFNGLGETTEXTURESUBIMAGEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        type_: GLenum,
        bufSize: GLsizei,
        pixels: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glGetTextureSubImage: PFNGLGETTEXTURESUBIMAGEPROC;
}
pub type PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        texture: GLuint,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        bufSize: GLsizei,
        pixels: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glGetCompressedTextureSubImage: PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC;
}
pub type PFNGLGETGRAPHICSRESETSTATUSPROC = ::std::option::Option<unsafe extern "C" fn() -> GLenum>;
extern "C" {
    pub static mut glad_glGetGraphicsResetStatus: PFNGLGETGRAPHICSRESETSTATUSPROC;
}
pub type PFNGLGETNCOMPRESSEDTEXIMAGEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        lod: GLint,
        bufSize: GLsizei,
        pixels: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glGetnCompressedTexImage: PFNGLGETNCOMPRESSEDTEXIMAGEPROC;
}
pub type PFNGLGETNTEXIMAGEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        format: GLenum,
        type_: GLenum,
        bufSize: GLsizei,
        pixels: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glGetnTexImage: PFNGLGETNTEXIMAGEPROC;
}
pub type PFNGLGETNUNIFORMDVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLdouble),
>;
extern "C" {
    pub static mut glad_glGetnUniformdv: PFNGLGETNUNIFORMDVPROC;
}
pub type PFNGLGETNUNIFORMFVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLfloat),
>;
extern "C" {
    pub static mut glad_glGetnUniformfv: PFNGLGETNUNIFORMFVPROC;
}
pub type PFNGLGETNUNIFORMIVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLint),
>;
extern "C" {
    pub static mut glad_glGetnUniformiv: PFNGLGETNUNIFORMIVPROC;
}
pub type PFNGLGETNUNIFORMUIVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLuint),
>;
extern "C" {
    pub static mut glad_glGetnUniformuiv: PFNGLGETNUNIFORMUIVPROC;
}
pub type PFNGLREADNPIXELSPROC = ::std::option::Option<
    unsafe extern "C" fn(
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        bufSize: GLsizei,
        data: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glReadnPixels: PFNGLREADNPIXELSPROC;
}
pub type PFNGLGETNMAPDVPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, query: GLenum, bufSize: GLsizei, v: *mut GLdouble),
>;
extern "C" {
    pub static mut glad_glGetnMapdv: PFNGLGETNMAPDVPROC;
}
pub type PFNGLGETNMAPFVPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, query: GLenum, bufSize: GLsizei, v: *mut GLfloat),
>;
extern "C" {
    pub static mut glad_glGetnMapfv: PFNGLGETNMAPFVPROC;
}
pub type PFNGLGETNMAPIVPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, query: GLenum, bufSize: GLsizei, v: *mut GLint),
>;
extern "C" {
    pub static mut glad_glGetnMapiv: PFNGLGETNMAPIVPROC;
}
pub type PFNGLGETNPIXELMAPFVPROC = ::std::option::Option<
    unsafe extern "C" fn(map: GLenum, bufSize: GLsizei, values: *mut GLfloat),
>;
extern "C" {
    pub static mut glad_glGetnPixelMapfv: PFNGLGETNPIXELMAPFVPROC;
}
pub type PFNGLGETNPIXELMAPUIVPROC =
    ::std::option::Option<unsafe extern "C" fn(map: GLenum, bufSize: GLsizei, values: *mut GLuint)>;
extern "C" {
    pub static mut glad_glGetnPixelMapuiv: PFNGLGETNPIXELMAPUIVPROC;
}
pub type PFNGLGETNPIXELMAPUSVPROC = ::std::option::Option<
    unsafe extern "C" fn(map: GLenum, bufSize: GLsizei, values: *mut GLushort),
>;
extern "C" {
    pub static mut glad_glGetnPixelMapusv: PFNGLGETNPIXELMAPUSVPROC;
}
pub type PFNGLGETNPOLYGONSTIPPLEPROC =
    ::std::option::Option<unsafe extern "C" fn(bufSize: GLsizei, pattern: *mut GLubyte)>;
extern "C" {
    pub static mut glad_glGetnPolygonStipple: PFNGLGETNPOLYGONSTIPPLEPROC;
}
pub type PFNGLGETNCOLORTABLEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        format: GLenum,
        type_: GLenum,
        bufSize: GLsizei,
        table: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glGetnColorTable: PFNGLGETNCOLORTABLEPROC;
}
pub type PFNGLGETNCONVOLUTIONFILTERPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        format: GLenum,
        type_: GLenum,
        bufSize: GLsizei,
        image: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glGetnConvolutionFilter: PFNGLGETNCONVOLUTIONFILTERPROC;
}
pub type PFNGLGETNSEPARABLEFILTERPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        format: GLenum,
        type_: GLenum,
        rowBufSize: GLsizei,
        row: *mut ::std::os::raw::c_void,
        columnBufSize: GLsizei,
        column: *mut ::std::os::raw::c_void,
        span: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glGetnSeparableFilter: PFNGLGETNSEPARABLEFILTERPROC;
}
pub type PFNGLGETNHISTOGRAMPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        reset: GLboolean,
        format: GLenum,
        type_: GLenum,
        bufSize: GLsizei,
        values: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glGetnHistogram: PFNGLGETNHISTOGRAMPROC;
}
pub type PFNGLGETNMINMAXPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        reset: GLboolean,
        format: GLenum,
        type_: GLenum,
        bufSize: GLsizei,
        values: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static mut glad_glGetnMinmax: PFNGLGETNMINMAXPROC;
}
pub type PFNGLTEXTUREBARRIERPROC = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub static mut glad_glTextureBarrier: PFNGLTEXTUREBARRIERPROC;
}
extern "C" {
    pub static mut GLAD_GL_VERSION_4_6: ::std::os::raw::c_int;
}
pub type PFNGLSPECIALIZESHADERPROC = ::std::option::Option<
    unsafe extern "C" fn(
        shader: GLuint,
        pEntryPoint: *const GLchar,
        numSpecializationConstants: GLuint,
        pConstantIndex: *const GLuint,
        pConstantValue: *const GLuint,
    ),
>;
extern "C" {
    pub static mut glad_glSpecializeShader: PFNGLSPECIALIZESHADERPROC;
}
pub type PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC = ::std::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        indirect: *const ::std::os::raw::c_void,
        drawcount: GLintptr,
        maxdrawcount: GLsizei,
        stride: GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glMultiDrawArraysIndirectCount: PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC;
}
pub type PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC = ::std::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        type_: GLenum,
        indirect: *const ::std::os::raw::c_void,
        drawcount: GLintptr,
        maxdrawcount: GLsizei,
        stride: GLsizei,
    ),
>;
extern "C" {
    pub static mut glad_glMultiDrawElementsIndirectCount: PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC;
}
pub type PFNGLPOLYGONOFFSETCLAMPPROC =
    ::std::option::Option<unsafe extern "C" fn(factor: GLfloat, units: GLfloat, clamp: GLfloat)>;
extern "C" {
    pub static mut glad_glPolygonOffsetClamp: PFNGLPOLYGONOFFSETCLAMPPROC;
}
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type GLFWglproc = ::std::option::Option<unsafe extern "C" fn()>;
pub type GLFWvkproc = ::std::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLFWmonitor {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLFWwindow {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLFWcursor {
    _unused: [u8; 0],
}
pub type GLFWerrorfun = ::std::option::Option<
    unsafe extern "C" fn(
        error_code: ::std::os::raw::c_int,
        description: *const ::std::os::raw::c_char,
    ),
>;
pub type GLFWwindowposfun = ::std::option::Option<
    unsafe extern "C" fn(
        window: *mut GLFWwindow,
        xpos: ::std::os::raw::c_int,
        ypos: ::std::os::raw::c_int,
    ),
>;
pub type GLFWwindowsizefun = ::std::option::Option<
    unsafe extern "C" fn(
        window: *mut GLFWwindow,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ),
>;
pub type GLFWwindowclosefun = ::std::option::Option<unsafe extern "C" fn(window: *mut GLFWwindow)>;
pub type GLFWwindowrefreshfun =
    ::std::option::Option<unsafe extern "C" fn(window: *mut GLFWwindow)>;
pub type GLFWwindowfocusfun = ::std::option::Option<
    unsafe extern "C" fn(window: *mut GLFWwindow, focused: ::std::os::raw::c_int),
>;
pub type GLFWwindowiconifyfun = ::std::option::Option<
    unsafe extern "C" fn(window: *mut GLFWwindow, iconified: ::std::os::raw::c_int),
>;
pub type GLFWwindowmaximizefun = ::std::option::Option<
    unsafe extern "C" fn(window: *mut GLFWwindow, maximized: ::std::os::raw::c_int),
>;
pub type GLFWframebuffersizefun = ::std::option::Option<
    unsafe extern "C" fn(
        window: *mut GLFWwindow,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ),
>;
pub type GLFWwindowcontentscalefun =
    ::std::option::Option<unsafe extern "C" fn(window: *mut GLFWwindow, xscale: f32, yscale: f32)>;
pub type GLFWmousebuttonfun = ::std::option::Option<
    unsafe extern "C" fn(
        window: *mut GLFWwindow,
        button: ::std::os::raw::c_int,
        action: ::std::os::raw::c_int,
        mods: ::std::os::raw::c_int,
    ),
>;
pub type GLFWcursorposfun =
    ::std::option::Option<unsafe extern "C" fn(window: *mut GLFWwindow, xpos: f64, ypos: f64)>;
pub type GLFWcursorenterfun = ::std::option::Option<
    unsafe extern "C" fn(window: *mut GLFWwindow, entered: ::std::os::raw::c_int),
>;
pub type GLFWscrollfun = ::std::option::Option<
    unsafe extern "C" fn(window: *mut GLFWwindow, xoffset: f64, yoffset: f64),
>;
pub type GLFWkeyfun = ::std::option::Option<
    unsafe extern "C" fn(
        window: *mut GLFWwindow,
        key: ::std::os::raw::c_int,
        scancode: ::std::os::raw::c_int,
        action: ::std::os::raw::c_int,
        mods: ::std::os::raw::c_int,
    ),
>;
pub type GLFWcharfun = ::std::option::Option<
    unsafe extern "C" fn(window: *mut GLFWwindow, codepoint: ::std::os::raw::c_uint),
>;
pub type GLFWcharmodsfun = ::std::option::Option<
    unsafe extern "C" fn(
        window: *mut GLFWwindow,
        codepoint: ::std::os::raw::c_uint,
        mods: ::std::os::raw::c_int,
    ),
>;
pub type GLFWdropfun = ::std::option::Option<
    unsafe extern "C" fn(
        window: *mut GLFWwindow,
        path_count: ::std::os::raw::c_int,
        paths: *mut *const ::std::os::raw::c_char,
    ),
>;
pub type GLFWmonitorfun = ::std::option::Option<
    unsafe extern "C" fn(monitor: *mut GLFWmonitor, event: ::std::os::raw::c_int),
>;
pub type GLFWjoystickfun = ::std::option::Option<
    unsafe extern "C" fn(jid: ::std::os::raw::c_int, event: ::std::os::raw::c_int),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLFWvidmode {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub redBits: ::std::os::raw::c_int,
    pub greenBits: ::std::os::raw::c_int,
    pub blueBits: ::std::os::raw::c_int,
    pub refreshRate: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_GLFWvidmode() {
    const UNINIT: ::std::mem::MaybeUninit<GLFWvidmode> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GLFWvidmode>(),
        24usize,
        concat!("Size of: ", stringify!(GLFWvidmode))
    );
    assert_eq!(
        ::std::mem::align_of::<GLFWvidmode>(),
        4usize,
        concat!("Alignment of ", stringify!(GLFWvidmode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWvidmode),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWvidmode),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).redBits) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWvidmode),
            "::",
            stringify!(redBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).greenBits) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWvidmode),
            "::",
            stringify!(greenBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blueBits) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWvidmode),
            "::",
            stringify!(blueBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refreshRate) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWvidmode),
            "::",
            stringify!(refreshRate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLFWgammaramp {
    pub red: *mut ::std::os::raw::c_ushort,
    pub green: *mut ::std::os::raw::c_ushort,
    pub blue: *mut ::std::os::raw::c_ushort,
    pub size: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_GLFWgammaramp() {
    const UNINIT: ::std::mem::MaybeUninit<GLFWgammaramp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GLFWgammaramp>(),
        32usize,
        concat!("Size of: ", stringify!(GLFWgammaramp))
    );
    assert_eq!(
        ::std::mem::align_of::<GLFWgammaramp>(),
        8usize,
        concat!("Alignment of ", stringify!(GLFWgammaramp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).red) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWgammaramp),
            "::",
            stringify!(red)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).green) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWgammaramp),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blue) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWgammaramp),
            "::",
            stringify!(blue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWgammaramp),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLFWimage {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub pixels: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_GLFWimage() {
    const UNINIT: ::std::mem::MaybeUninit<GLFWimage> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GLFWimage>(),
        16usize,
        concat!("Size of: ", stringify!(GLFWimage))
    );
    assert_eq!(
        ::std::mem::align_of::<GLFWimage>(),
        8usize,
        concat!("Alignment of ", stringify!(GLFWimage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWimage),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWimage),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixels) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWimage),
            "::",
            stringify!(pixels)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLFWgamepadstate {
    pub buttons: [::std::os::raw::c_uchar; 15usize],
    pub axes: [f32; 6usize],
}
#[test]
fn bindgen_test_layout_GLFWgamepadstate() {
    const UNINIT: ::std::mem::MaybeUninit<GLFWgamepadstate> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GLFWgamepadstate>(),
        40usize,
        concat!("Size of: ", stringify!(GLFWgamepadstate))
    );
    assert_eq!(
        ::std::mem::align_of::<GLFWgamepadstate>(),
        4usize,
        concat!("Alignment of ", stringify!(GLFWgamepadstate))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buttons) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWgamepadstate),
            "::",
            stringify!(buttons)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWgamepadstate),
            "::",
            stringify!(axes)
        )
    );
}
extern "C" {
    pub fn glfwInit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwTerminate();
}
extern "C" {
    pub fn glfwInitHint(hint: ::std::os::raw::c_int, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn glfwGetVersion(
        major: *mut ::std::os::raw::c_int,
        minor: *mut ::std::os::raw::c_int,
        rev: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwGetVersionString() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glfwGetError(description: *mut *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwSetErrorCallback(callback: GLFWerrorfun) -> GLFWerrorfun;
}
extern "C" {
    pub fn glfwGetMonitors(count: *mut ::std::os::raw::c_int) -> *mut *mut GLFWmonitor;
}
extern "C" {
    pub fn glfwGetPrimaryMonitor() -> *mut GLFWmonitor;
}
extern "C" {
    pub fn glfwGetMonitorPos(
        monitor: *mut GLFWmonitor,
        xpos: *mut ::std::os::raw::c_int,
        ypos: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwGetMonitorWorkarea(
        monitor: *mut GLFWmonitor,
        xpos: *mut ::std::os::raw::c_int,
        ypos: *mut ::std::os::raw::c_int,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwGetMonitorPhysicalSize(
        monitor: *mut GLFWmonitor,
        widthMM: *mut ::std::os::raw::c_int,
        heightMM: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwGetMonitorContentScale(
        monitor: *mut GLFWmonitor,
        xscale: *mut f32,
        yscale: *mut f32,
    );
}
extern "C" {
    pub fn glfwGetMonitorName(monitor: *mut GLFWmonitor) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glfwSetMonitorUserPointer(
        monitor: *mut GLFWmonitor,
        pointer: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glfwGetMonitorUserPointer(monitor: *mut GLFWmonitor) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn glfwSetMonitorCallback(callback: GLFWmonitorfun) -> GLFWmonitorfun;
}
extern "C" {
    pub fn glfwGetVideoModes(
        monitor: *mut GLFWmonitor,
        count: *mut ::std::os::raw::c_int,
    ) -> *const GLFWvidmode;
}
extern "C" {
    pub fn glfwGetVideoMode(monitor: *mut GLFWmonitor) -> *const GLFWvidmode;
}
extern "C" {
    pub fn glfwSetGamma(monitor: *mut GLFWmonitor, gamma: f32);
}
extern "C" {
    pub fn glfwGetGammaRamp(monitor: *mut GLFWmonitor) -> *const GLFWgammaramp;
}
extern "C" {
    pub fn glfwSetGammaRamp(monitor: *mut GLFWmonitor, ramp: *const GLFWgammaramp);
}
extern "C" {
    pub fn glfwDefaultWindowHints();
}
extern "C" {
    pub fn glfwWindowHint(hint: ::std::os::raw::c_int, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn glfwWindowHintString(hint: ::std::os::raw::c_int, value: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn glfwCreateWindow(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
        monitor: *mut GLFWmonitor,
        share: *mut GLFWwindow,
    ) -> *mut GLFWwindow;
}
extern "C" {
    pub fn glfwDestroyWindow(window: *mut GLFWwindow);
}
extern "C" {
    pub fn glfwWindowShouldClose(window: *mut GLFWwindow) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwSetWindowShouldClose(window: *mut GLFWwindow, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn glfwSetWindowTitle(window: *mut GLFWwindow, title: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn glfwSetWindowIcon(
        window: *mut GLFWwindow,
        count: ::std::os::raw::c_int,
        images: *const GLFWimage,
    );
}
extern "C" {
    pub fn glfwGetWindowPos(
        window: *mut GLFWwindow,
        xpos: *mut ::std::os::raw::c_int,
        ypos: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwSetWindowPos(
        window: *mut GLFWwindow,
        xpos: ::std::os::raw::c_int,
        ypos: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwGetWindowSize(
        window: *mut GLFWwindow,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwSetWindowSizeLimits(
        window: *mut GLFWwindow,
        minwidth: ::std::os::raw::c_int,
        minheight: ::std::os::raw::c_int,
        maxwidth: ::std::os::raw::c_int,
        maxheight: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwSetWindowAspectRatio(
        window: *mut GLFWwindow,
        numer: ::std::os::raw::c_int,
        denom: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwSetWindowSize(
        window: *mut GLFWwindow,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwGetFramebufferSize(
        window: *mut GLFWwindow,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwGetWindowFrameSize(
        window: *mut GLFWwindow,
        left: *mut ::std::os::raw::c_int,
        top: *mut ::std::os::raw::c_int,
        right: *mut ::std::os::raw::c_int,
        bottom: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwGetWindowContentScale(window: *mut GLFWwindow, xscale: *mut f32, yscale: *mut f32);
}
extern "C" {
    pub fn glfwGetWindowOpacity(window: *mut GLFWwindow) -> f32;
}
extern "C" {
    pub fn glfwSetWindowOpacity(window: *mut GLFWwindow, opacity: f32);
}
extern "C" {
    pub fn glfwIconifyWindow(window: *mut GLFWwindow);
}
extern "C" {
    pub fn glfwRestoreWindow(window: *mut GLFWwindow);
}
extern "C" {
    pub fn glfwMaximizeWindow(window: *mut GLFWwindow);
}
extern "C" {
    pub fn glfwShowWindow(window: *mut GLFWwindow);
}
extern "C" {
    pub fn glfwHideWindow(window: *mut GLFWwindow);
}
extern "C" {
    pub fn glfwFocusWindow(window: *mut GLFWwindow);
}
extern "C" {
    pub fn glfwRequestWindowAttention(window: *mut GLFWwindow);
}
extern "C" {
    pub fn glfwGetWindowMonitor(window: *mut GLFWwindow) -> *mut GLFWmonitor;
}
extern "C" {
    pub fn glfwSetWindowMonitor(
        window: *mut GLFWwindow,
        monitor: *mut GLFWmonitor,
        xpos: ::std::os::raw::c_int,
        ypos: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        refreshRate: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwGetWindowAttrib(
        window: *mut GLFWwindow,
        attrib: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwSetWindowAttrib(
        window: *mut GLFWwindow,
        attrib: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwSetWindowUserPointer(window: *mut GLFWwindow, pointer: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn glfwGetWindowUserPointer(window: *mut GLFWwindow) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn glfwSetWindowPosCallback(
        window: *mut GLFWwindow,
        callback: GLFWwindowposfun,
    ) -> GLFWwindowposfun;
}
extern "C" {
    pub fn glfwSetWindowSizeCallback(
        window: *mut GLFWwindow,
        callback: GLFWwindowsizefun,
    ) -> GLFWwindowsizefun;
}
extern "C" {
    pub fn glfwSetWindowCloseCallback(
        window: *mut GLFWwindow,
        callback: GLFWwindowclosefun,
    ) -> GLFWwindowclosefun;
}
extern "C" {
    pub fn glfwSetWindowRefreshCallback(
        window: *mut GLFWwindow,
        callback: GLFWwindowrefreshfun,
    ) -> GLFWwindowrefreshfun;
}
extern "C" {
    pub fn glfwSetWindowFocusCallback(
        window: *mut GLFWwindow,
        callback: GLFWwindowfocusfun,
    ) -> GLFWwindowfocusfun;
}
extern "C" {
    pub fn glfwSetWindowIconifyCallback(
        window: *mut GLFWwindow,
        callback: GLFWwindowiconifyfun,
    ) -> GLFWwindowiconifyfun;
}
extern "C" {
    pub fn glfwSetWindowMaximizeCallback(
        window: *mut GLFWwindow,
        callback: GLFWwindowmaximizefun,
    ) -> GLFWwindowmaximizefun;
}
extern "C" {
    pub fn glfwSetFramebufferSizeCallback(
        window: *mut GLFWwindow,
        callback: GLFWframebuffersizefun,
    ) -> GLFWframebuffersizefun;
}
extern "C" {
    pub fn glfwSetWindowContentScaleCallback(
        window: *mut GLFWwindow,
        callback: GLFWwindowcontentscalefun,
    ) -> GLFWwindowcontentscalefun;
}
extern "C" {
    pub fn glfwPollEvents();
}
extern "C" {
    pub fn glfwWaitEvents();
}
extern "C" {
    pub fn glfwWaitEventsTimeout(timeout: f64);
}
extern "C" {
    pub fn glfwPostEmptyEvent();
}
extern "C" {
    pub fn glfwGetInputMode(
        window: *mut GLFWwindow,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwSetInputMode(
        window: *mut GLFWwindow,
        mode: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwRawMouseMotionSupported() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwGetKeyName(
        key: ::std::os::raw::c_int,
        scancode: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glfwGetKeyScancode(key: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwGetKey(window: *mut GLFWwindow, key: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwGetMouseButton(
        window: *mut GLFWwindow,
        button: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwGetCursorPos(window: *mut GLFWwindow, xpos: *mut f64, ypos: *mut f64);
}
extern "C" {
    pub fn glfwSetCursorPos(window: *mut GLFWwindow, xpos: f64, ypos: f64);
}
extern "C" {
    pub fn glfwCreateCursor(
        image: *const GLFWimage,
        xhot: ::std::os::raw::c_int,
        yhot: ::std::os::raw::c_int,
    ) -> *mut GLFWcursor;
}
extern "C" {
    pub fn glfwCreateStandardCursor(shape: ::std::os::raw::c_int) -> *mut GLFWcursor;
}
extern "C" {
    pub fn glfwDestroyCursor(cursor: *mut GLFWcursor);
}
extern "C" {
    pub fn glfwSetCursor(window: *mut GLFWwindow, cursor: *mut GLFWcursor);
}
extern "C" {
    pub fn glfwSetKeyCallback(window: *mut GLFWwindow, callback: GLFWkeyfun) -> GLFWkeyfun;
}
extern "C" {
    pub fn glfwSetCharCallback(window: *mut GLFWwindow, callback: GLFWcharfun) -> GLFWcharfun;
}
extern "C" {
    pub fn glfwSetCharModsCallback(
        window: *mut GLFWwindow,
        callback: GLFWcharmodsfun,
    ) -> GLFWcharmodsfun;
}
extern "C" {
    pub fn glfwSetMouseButtonCallback(
        window: *mut GLFWwindow,
        callback: GLFWmousebuttonfun,
    ) -> GLFWmousebuttonfun;
}
extern "C" {
    pub fn glfwSetCursorPosCallback(
        window: *mut GLFWwindow,
        callback: GLFWcursorposfun,
    ) -> GLFWcursorposfun;
}
extern "C" {
    pub fn glfwSetCursorEnterCallback(
        window: *mut GLFWwindow,
        callback: GLFWcursorenterfun,
    ) -> GLFWcursorenterfun;
}
extern "C" {
    pub fn glfwSetScrollCallback(window: *mut GLFWwindow, callback: GLFWscrollfun)
        -> GLFWscrollfun;
}
extern "C" {
    pub fn glfwSetDropCallback(window: *mut GLFWwindow, callback: GLFWdropfun) -> GLFWdropfun;
}
extern "C" {
    pub fn glfwJoystickPresent(jid: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwGetJoystickAxes(
        jid: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> *const f32;
}
extern "C" {
    pub fn glfwGetJoystickButtons(
        jid: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn glfwGetJoystickHats(
        jid: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn glfwGetJoystickName(jid: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glfwGetJoystickGUID(jid: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glfwSetJoystickUserPointer(
        jid: ::std::os::raw::c_int,
        pointer: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glfwGetJoystickUserPointer(jid: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn glfwJoystickIsGamepad(jid: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwSetJoystickCallback(callback: GLFWjoystickfun) -> GLFWjoystickfun;
}
extern "C" {
    pub fn glfwUpdateGamepadMappings(
        string: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwGetGamepadName(jid: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glfwGetGamepadState(
        jid: ::std::os::raw::c_int,
        state: *mut GLFWgamepadstate,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwSetClipboardString(window: *mut GLFWwindow, string: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn glfwGetClipboardString(window: *mut GLFWwindow) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glfwGetTime() -> f64;
}
extern "C" {
    pub fn glfwSetTime(time: f64);
}
extern "C" {
    pub fn glfwGetTimerValue() -> u64;
}
extern "C" {
    pub fn glfwGetTimerFrequency() -> u64;
}
extern "C" {
    pub fn glfwMakeContextCurrent(window: *mut GLFWwindow);
}
extern "C" {
    pub fn glfwGetCurrentContext() -> *mut GLFWwindow;
}
extern "C" {
    pub fn glfwSwapBuffers(window: *mut GLFWwindow);
}
extern "C" {
    pub fn glfwSwapInterval(interval: ::std::os::raw::c_int);
}
extern "C" {
    pub fn glfwExtensionSupported(
        extension: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwGetProcAddress(procname: *const ::std::os::raw::c_char) -> GLFWglproc;
}
extern "C" {
    pub fn glfwVulkanSupported() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwGetRequiredInstanceExtensions(count: *mut u32)
        -> *mut *const ::std::os::raw::c_char;
}
